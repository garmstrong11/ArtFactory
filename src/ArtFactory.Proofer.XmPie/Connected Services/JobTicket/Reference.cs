//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtFactory.Proofer.XmPie.JobTicket {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="XMPieWSAPI", ConfigurationName="JobTicket.JobTicket_SSPSoap")]
    public interface JobTicket_SSPSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMExecutablePath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFFPMExecutablePath(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMExecutablePath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFFPMExecutablePathAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMQueueSpecs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFFPMQueueSpecs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMQueueSpecs", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFFPMQueueSpecsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRemoteCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRemoteCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRemoteCopyByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRemoteCopyByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveRemoteCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveRemoteCopy(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveRemoteCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveRemoteCopyAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsRemoteCopyExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsRemoteCopyExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsRemoteCopyExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRemoteCopyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRemoteCopyID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRemoteCopyID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRemoteCopyDestination", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRemoteCopyDestination(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRemoteCopyDestination", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsRemoteCopyDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsRemoteCopyDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddSecondaryRemoteCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddSecondaryRemoteCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddSecondaryRemoteCopyByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddSecondaryRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddSecondaryRemoteCopyByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddSecondaryRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveSecondaryRemoteCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveSecondaryRemoteCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSecondaryRemoteCopyExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsSecondaryRemoteCopyExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSecondaryRemoteCopyExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSecondaryRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSecondaryRemoteCopyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSecondaryRemoteCopyID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSecondaryRemoteCopyID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSecondaryRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSecondaryRemoteCopyDestination", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSecondaryRemoteCopyDestination(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSecondaryRemoteCopyDestination", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSecondaryRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSecondaryRemoteCopyDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsSecondaryRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSecondaryRemoteCopyDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSecondaryRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDFCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddJDFCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDFCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddJDFCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDFCopyByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddJDFCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDFCopyByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddJDFCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJDFCopy(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFCopy", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJDFCopyAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFCopyExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsJDFCopyExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFCopyExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsJDFCopyExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFCopyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJDFCopyID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFCopyID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetJDFCopyIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFCopyDestination", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJDFCopyDestination(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFCopyDestination", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetJDFCopyDestinationAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFCopyDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsJDFCopyDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFCopyDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsJDFCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDistillJobOptionName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDistillJobOptionName(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDistillJobOptionName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDistillJobOptionNameAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJobTracked", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsJobTracked(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJobTracked", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsJobTrackedAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTouchPointID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetTouchPointID(string inUsername, string inPassword, string inTicketID, string inTouchPointID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTouchPointID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID, string inTouchPointID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTouchPointID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTouchPointID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTouchPointID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddTracking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse AddTracking(ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddTracking", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse> AddTrackingAsync(ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTracking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveTracking(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTracking", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveTrackingAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTrackingParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetTrackingParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTrackingParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTrackingParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse SetTrackingParameters(ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTrackingParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse> SetTrackingParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Parameter GetTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        // CODEGEN: Parameter 'GetTrackingParametersResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse GetTrackingParameters(ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse> GetTrackingParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTrackingParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTrackingParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTrackingParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveTrackingParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveTrackingParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllTrackingParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllTrackingParameters(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllTrackingParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllTrackingParametersAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsTrackingADOR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsTrackingADOR(string inUsername, string inPassword, string inTicketID, string inADORName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsTrackingADOR", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsTrackingADORAsync(string inUsername, string inPassword, string inTicketID, string inADORName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingADORs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetTrackingADORs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTrackingADORs", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetTrackingADORsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCircleTouchpointGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCircleTouchpointGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCircleTouchpointGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCircleTouchpointGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCircleRunGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetCircleRunGuid(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCircleRunGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCircleRunGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCircleRunGuid(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCircleRunGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDeliveryProvider", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDeliveryProvider(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo inDeliveryProviderInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDeliveryProvider", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo inDeliveryProviderInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDeliveryProviderByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDeliveryProviderByID(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDeliveryProviderByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDeliveryProviderByIDAsync(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDeliveryProvider", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo GetDeliveryProvider(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDeliveryProvider", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo> GetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDeliveryProviderID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDeliveryProviderID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDeliveryProviderID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDeliveryProviderIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailHeader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailHeader(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo inEmailHeaderInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailHeader", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo inEmailHeaderInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailHeader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo GetEmailHeader(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailHeader", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo> GetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailBody(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBody", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailBodyAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailBodies(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] inEmailBodyInfoArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodies", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] inEmailBodyInfoArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddEmailBody(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddEmailBody", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddEmailBodyAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodyByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodyByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodiesByIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailBodiesByIDs(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions[] inBodyOptionsArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailBodiesByIDs", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailBodiesByIDsAsync(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions[] inBodyOptionsArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddEmailBodyByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddEmailBodyByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllEmailBodies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllEmailBodies(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllEmailBodies", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllEmailBodiesAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] GetEmailBodies(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodies", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[]> GetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodiesIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetEmailBodiesIDs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodiesIDs", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetEmailBodiesIDsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodyCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetEmailBodyCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailBodyCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetEmailBodyCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo GetNthEmailBody(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthEmailBody", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo> GetNthEmailBodyAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthEmailBodyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthEmailBodyID(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthEmailBodyID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthEmailBodyIDAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex);
        
        // CODEGEN: Parameter 'inProperties' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetMetaData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse SetMetaData(ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetMetaData", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse> SetMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest request);
        
        // CODEGEN: Parameter 'GetMetaDataResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetMetaData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse GetMetaData(ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetMetaData", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse> GetMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest request);
        
        // CODEGEN: Parameter 'GetAllMetaDataResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAllMetaData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse GetAllMetaData(ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAllMetaData", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse> GetAllMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetMetaDataSubGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetMetaDataSubGroups(string inUsername, string inPassword, string inTicketID, string[] inGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetMetaDataSubGroups", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetMetaDataSubGroupsAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveMetaData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveMetaData", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveMetaDataGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveMetaDataGroup(string inUsername, string inPassword, string inTicketID, string[] inGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveMetaDataGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveMetaDataGroupAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsMappingExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsMappingExists(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsMappingExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsMappingExistsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFieldMappings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.FieldMappings GetFieldMappings(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFieldMappings", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.FieldMappings> GetFieldMappingsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFieldMapping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetFieldMapping(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.FieldMappings inFieldMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFieldMapping", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetFieldMappingAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.FieldMappings inFieldMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFieldMappingByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetFieldMappingByID(string inUsername, string inPassword, string inTicketID, string inRecipientTableID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFieldMappingByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetFieldMappingByIDAsync(string inUsername, string inPassword, string inTicketID, string inRecipientTableID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFieldMapping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveFieldMapping(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFieldMapping", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveFieldMappingAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo GetNthRIInfo(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo> GetNthRIInfoAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIDataSourceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthRIDataSourceID(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIDataSourceID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthRIDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIDataSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Connection GetNthRIDataSource(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIDataSource", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetNthRIDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddRI(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRI", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddRIAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRIByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddRIByID(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddRIByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddRIByIDAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddDefaultRI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddDefaultRI", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIOnDemandInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRIOnDemandInfo(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIOnDemandInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRIOnDemandInfoAsync(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIOnDemandRecipientID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRIOnDemandRecipientID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIOnDemandRecipientID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRIOnDemandRecipientIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIOnDemandRecipientInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRIOnDemandRecipientInfo(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIOnDemandRecipientInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRIOnDemandRecipientInfoAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJobType(string inUsername, string inPassword, string inTicketID, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobType", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJobTypeAsync(string inUsername, string inPassword, string inTicketID, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetJobTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobPriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetJobPriority(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobPriority", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetJobPriorityAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobPriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJobPriority(string inUsername, string inPassword, string inTicketID, string inJobPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobPriority", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJobPriorityAsync(string inUsername, string inPassword, string inTicketID, string inJobPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobTrackingWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJobTrackingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobTrackingWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobTrackingWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobTrackingWebService(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobTrackingWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobReportingWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJobReportingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobReportingWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobReportingWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobReportingWebService(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobReportingWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSplittedJobInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetSplittedJobInfo(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSplittedJobInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetSplittedJobInfoAsync(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSplittedJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsSplittedJob(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSplittedJob", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSplittedJobAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsParallelProcessingJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsParallelProcessingJob(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsParallelProcessingJob", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsParallelProcessingJobAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAutomaticSubSplitAndMerge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAutomaticSubSplitAndMerge(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAutomaticSubSplitAndMerge", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAutomaticSubSplitAndMergeAsync(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsAutomaticSubSplitEnabled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsAutomaticSubSplitEnabled(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsAutomaticSubSplitEnabled", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAutomaticSubSplitEnabledAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsAutomaticMergeEnabled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsAutomaticMergeEnabled(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsAutomaticMergeEnabled", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAutomaticMergeEnabledAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSubJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsSubJob(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsSubJob", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSubJobAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SubJobInfo GetSubJobInfo(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SubJobInfo> GetSubJobInfoAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobIndex", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSubJobIndex(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobIndex", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSubJobIndexAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobOrigFrom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSubJobOrigFrom(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobOrigFrom", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSubJobOrigFromAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobOrigTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSubJobOrigTo(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobOrigTo", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSubJobOrigToAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobSplitCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSubJobSplitCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobSplitCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSubJobSplitCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobSplitType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSubJobSplitType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubJobSplitType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSubJobSplitTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJobParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJobParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse SetJobParameters(ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJobParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse> SetJobParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Parameter GetJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        // CODEGEN: Parameter 'GetJobParametersResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse GetJobParameters(ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJobParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse> GetJobParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJobParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJobParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJobParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJobParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJobParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllJobParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllJobParameters(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllJobParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllJobParametersAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailInfo(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailInfoAsync(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmailAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmailAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSenderAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetSenderAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSenderAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSubjectAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetSubjectAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetSubjectAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmbedEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEmbedEmailBody(string inUsername, string inPassword, string inTicketID, bool inEmbed);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEmbedEmailBody", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID, bool inEmbed);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetProcessEmailOutputType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetProcessEmailOutputType", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOnDemandBaseURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID, string inBaseURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOnDemandBaseURL", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID, string inBaseURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetEmailAdorName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmailAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSenderAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSenderAdorName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSenderAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubjectAdorName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSubjectAdorName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSubjectAdorName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmbedEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetEmbedEmailBody(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEmbedEmailBody", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetProcessEmailOutputType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetProcessEmailOutputType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOnDemandBaseURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOnDemandBaseURL", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFileNameOption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetOutputFileNameOption(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFileNameOption", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetOutputFileNameOptionAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse SetOutputInfo(ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse> SetOutputInfoAsync(ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOutputParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse SetOutputParameters(ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse> SetOutputParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Parameter GetOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        // CODEGEN: Parameter 'GetOutputParametersResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse GetOutputParameters(ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse> GetOutputParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveOutputParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveOutputParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveOutputParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveOutputParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveOutputParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllOutputParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllOutputParameters(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllOutputParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllOutputParametersAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAppendJobID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAppendJobID(string inUsername, string inPassword, string inTicketID, bool inAppendJobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAppendJobID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID, bool inAppendJobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEnvJobName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetEnvJobName(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetEnvJobName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputMedia", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOutputMedia(string inUsername, string inPassword, string inTicketID, int inMedia);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputMedia", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOutputMediaAsync(string inUsername, string inPassword, string inTicketID, int inMedia);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOutputType(string inUsername, string inPassword, string inTicketID, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputType", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOutputFolder(string inUsername, string inPassword, string inTicketID, string inFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputFolder", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOutputFolderAsync(string inUsername, string inPassword, string inTicketID, string inFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputFileName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOutputFileName(string inUsername, string inPassword, string inTicketID, string inFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetOutputFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID, string inFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAppendJobID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetAppendJobID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAppendJobID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDefaultCacheEnv", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetDefaultCacheEnv(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDefaultCacheEnv", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetDefaultCacheEnvAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEnvJobName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetEnvJobName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetEnvJobName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputMedia", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetOutputMedia(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputMedia", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetOutputMediaAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOutputType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOutputTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOutputFolder(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFolder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOutputFolderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFileName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOutputFileName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetOutputFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddImposition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse AddImposition(ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddImposition", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse> AddImpositionAsync(ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImposition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveImposition(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImposition", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveImpositionAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsImpositionExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsImpositionExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsImpositionExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsImpositionExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetImpositionParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetImpositionParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetImpositionParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetImpositionParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse SetImpositionParameters(ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetImpositionParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse> SetImpositionParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetImpositionParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Parameter GetImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetImpositionParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        // CODEGEN: Parameter 'GetImpositionParametersResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetImpositionParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse GetImpositionParameters(ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetImpositionParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse> GetImpositionParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImpositionParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImpositionParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImpositionParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveImpositionParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveImpositionParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllImpositionParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllImpositionParameters(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllImpositionParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllImpositionParametersAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse AddJDF(ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddJDF", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse> AddJDFAsync(ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJDF(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDF", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJDFAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsJDFExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsJDFExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsJDFExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJDFParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetJDFParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJDFParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam);
        
        // CODEGEN: Parameter 'inParams' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJDFParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse SetJDFParameters(ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetJDFParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse> SetJDFParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Parameter GetJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        // CODEGEN: Parameter 'GetJDFParametersResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse GetJDFParameters(ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetJDFParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse> GetJDFParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFParameter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveJDFParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveJDFParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllJDFParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllJDFParameters(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllJDFParameters", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllJDFParametersAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddCompression", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddCompression(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddCompression", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddCompressionAsync(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveCompression", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveCompression(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveCompression", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveCompressionAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsCompressionExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsCompressionExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsCompressionExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsCompressionExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsVPCCompression", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsVPCCompression(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsVPCCompression", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsVPCCompressionAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddDestinationByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddDestinationByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddDestinationByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddDestinationByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddFTP(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, [System.ServiceModel.MessageParameterAttribute(Name="inPassWord")] string inPassWord1, bool inPassive, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFTP", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddFTPAsync(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, [System.ServiceModel.MessageParameterAttribute(Name="inPassWord")] string inPassWord1, bool inPassive, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFTPByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddFTPByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFTPByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddFTPByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveFTP(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFTP", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveFTPAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFTPExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFTPExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFTPExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFTPExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFTPID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFTPIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFTPAddress(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFTPAddressAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetFTPPort(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPort", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetFTPPortAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFTPUser(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFTPUserAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFTPPassword(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFTPPasswordAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPassive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetFTPPassive(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFTPPassive", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetFTPPassiveAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFTPDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFTPDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFTPDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFTPDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddUMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddUMail(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddUMail", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddUMailAsync(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveUMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveUMail(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveUMail", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveUMailAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsUMailExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsUMailExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsUMailExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsUMailExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetUMailTemplate(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailTemplate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUMailTemplateAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailOrigZip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetUMailOrigZip(string inUsername, string inPassword, string inOrigZip);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailOrigZip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUMailOrigZipAsync(string inUsername, string inPassword, string inOrigZip);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailPCWT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetUMailPCWT(string inUsername, string inPassword, string inPCWT);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailPCWT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUMailPCWTAsync(string inUsername, string inPassword, string inPCWT);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailPCThick", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetUMailPCThick(string inUsername, string inPassword, string inPCWT);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUMailPCThick", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUMailPCThickAsync(string inUsername, string inPassword, string inPCWT);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddPrint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPrint(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddPrint", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddPrintAsync(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddPrintByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPrintByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddPrintByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddPrintByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemovePrint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemovePrint(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemovePrint", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemovePrintAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPrintExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsPrintExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPrintExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsPrintExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPrintID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPrintID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPrintID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPrintIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPrinter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPrinter(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPrinter", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPrinterAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPrinterDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsPrinterDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPrinterDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsPrinterDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFFPM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddFFPM(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFFPM", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddFFPMAsync(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFFPMByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddFFPMByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/AddFFPMByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddFFPMByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFFPM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveFFPM(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveFFPM", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveFFPMAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFFPMExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFFPMExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFFPMExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFFPMExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFFPMID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFFPMID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFFPMIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFFPMDeleteSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFFPMDeleteSource(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFFPMDeleteSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFFPMDeleteSourceAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewTicket(string inUsername, string inPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewTicketAsync(string inUsername, string inPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewTicketForDocument(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewTicketForDocumentAsync(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewTicketForPlan(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewTicketForPlanAsync(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForCampaign", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateNewTicketForCampaign(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/CreateNewTicketForCampaign", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateNewTicketForCampaignAsync(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RecycleTicketID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RecycleTicketID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RecycleTicketID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RecycleTicketIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadTicketFromFile(string inUsername, string inPassword, string inFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromFile", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadTicketFromFileAsync(string inUsername, string inPassword, string inFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadJobTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadJobTicket(string inUsername, string inPassword, string inJobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadJobTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadJobTicketAsync(string inUsername, string inPassword, string inJobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadLastJobTicketOfDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadLastJobTicketOfDocument(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadLastJobTicketOfDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadLastJobTicketOfDocumentAsync(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadLastJobTicketOfPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadLastJobTicketOfPlan(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadLastJobTicketOfPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadLastJobTicketOfPlanAsync(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadTicketFromTicket(string inUsername, string inPassword, string inTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadTicketFromTicketAsync(string inUsername, string inPassword, string inTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketPropertyFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicketPropertyFromDB(string inUsername, string inPassword, string inTicketGuid, string inProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketPropertyFromDB", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicketPropertyFromDBAsync(string inUsername, string inPassword, string inTicketGuid, string inProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadTicketFromDB(string inUsername, string inPassword, string inTicketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/LoadTicketFromDB", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadTicketFromDBAsync(string inUsername, string inPassword, string inTicketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SaveTicketToFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SaveTicketToFile(string inUsername, string inPassword, string inTicketID, string inFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SaveTicketToFile", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SaveTicketToFileAsync(string inUsername, string inPassword, string inTicketID, string inFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SaveNewTicketToDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveNewTicketToDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SaveNewTicketToDB", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveNewTicketToDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/OverwriteTicketInDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool OverwriteTicketInDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/OverwriteTicketInDB", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> OverwriteTicketInDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/DeleteTicketFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteTicketFromDB(string inUsername, string inPassword, string inTicketGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/DeleteTicketFromDB", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteTicketFromDBAsync(string inUsername, string inPassword, string inTicketGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketsFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTicketsFromDB(string inUsername, string inPassword, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketsFromDB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTicketsFromDBAsync(string inUsername, string inPassword, string inJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTemplatesFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTemplatesFromDB(string inUsername, string inPassword, string inJobType, string inAccountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTemplatesFromDB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTemplatesFromDBAsync(string inUsername, string inPassword, string inJobType, string inAccountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicket(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicketAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketAndRecycleID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicketAndRecycleID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetTicketAndRecycleID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicketAndRecycleIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetTicketDefaultsForDocument(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetTicketDefaultsForDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetTicketDefaultsForPlan(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetTicketDefaultsForPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForCampaign", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetTicketDefaultsForCampaign(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetTicketDefaultsForCampaign", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetTicketDefaultsForCampaignAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetPlan(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPlanByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetPlanByID(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPlanByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetPlanByIDAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUseTrivialPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetUseTrivialPlan(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetUseTrivialPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetUseTrivialPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetUseTrivialPlan(string inUsername, string inPassword, string inTicketID, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetUseTrivialPlan", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID, bool inUseTrivial);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPlanPath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPlanPath(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPlanPath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPlanPathAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPlanID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPlanID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPlanID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPlanIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCustomization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetCustomization(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization inCustomization, bool expressionAsValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCustomization", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetCustomizationAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization inCustomization, bool expressionAsValue);
        
        // CODEGEN: Parameter 'inCustomizations' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCustomizations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse SetCustomizations(ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCustomizations", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse> SetCustomizationsAsync(ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveCustomization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveCustomization(string inUsername, string inPassword, string inTicketID, string inName, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveCustomization", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveCustomizationAsync(string inUsername, string inPassword, string inTicketID, string inName, string inType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllCustomizations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllCustomizations(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllCustomizations", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllCustomizationsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCustomizationsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetCustomizationsCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCustomizationsCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetCustomizationsCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthCustomization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Customization GetNthCustomization(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthCustomization", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Customization> GetNthCustomizationAsync(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex);
        
        // CODEGEN: Parameter 'GetCustomizationsResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCustomizations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse GetCustomizations(ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCustomizations", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse> GetCustomizationsAsync(ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDocumentByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDocumentByID(string inUsername, string inPassword, string inTicketID, string inDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDocumentByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDocumentByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDocument(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentFolder(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentFolder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentFolderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetDocumentType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetWebResourcesBasePath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetWebResourcesBasePath", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetWebResourcesBasePath", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetWebResourcesBasePath", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAllowFriendly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAllowFriendly(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAllowFriendly", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAllowFriendly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetAllowFriendly(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAllowFriendly", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFriendliness", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetFriendliness(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFriendliness", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetFriendlinessAsync(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFriendlyDomain(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyDomain", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFriendlyDomainAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFriendlyFolder(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyFolder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFriendlyFolderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyLandingPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFriendlyLandingPage(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFriendlyLandingPage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFriendlyLandingPageAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFriendlyUrlRedirectMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFriendlyUrlRedirectMode(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFriendlyUrlRedirectMode", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFriendlyUrlRedirectModeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFriendlyUrlUseRIDPrefixMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsFriendlyUrlUseRIDPrefixMode(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsFriendlyUrlUseRIDPrefixMode", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFriendlyUrlUseRIDPrefixModeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCampaignID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetCampaignID(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetCampaignID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetCampaignIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCampaignID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCampaignID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetCampaignID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCampaignIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFonts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetFonts(string inUsername, string inPassword, string inTicketID, string inFontsFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFonts", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetFontsAsync(string inUsername, string inPassword, string inTicketID, string inFontsFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFontsByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetFontsByID(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetFontsByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetFontsByIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFontsFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFontsFolder(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetFontsFolder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFontsFolderAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPortLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetPortLink(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetPortLink", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetPortLinkAsync(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RefreshPortLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RefreshPortLink(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RefreshPortLink", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RefreshPortLinkAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemovePortLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemovePortLink(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemovePortLink", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemovePortLinkAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPortLinkExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsPortLinkExist(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/IsPortLinkExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsPortLinkExistAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPortLinkAccount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPortLinkAccountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkCampaign", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPortLinkCampaign(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkCampaign", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPortLinkCampaignAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkPortName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPortLinkPortName(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPortLinkPortName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPortLinkPortNameAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        // CODEGEN: Parameter 'inConnections' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse SetDataSources(ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSources", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse> SetDataSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSourceByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDataSourceByID(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSourceByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDataSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSourcesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDataSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDataSourcesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDataSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultDataSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDefaultDataSources(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultDataSources", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDefaultDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllSchemaDataSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllSchemaDataSources(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllSchemaDataSources", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllSchemaDataSourcesAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveSchemaDataSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveSchemaDataSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Connection GetSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSource", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourceID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemasNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetSchemasNames(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemasNames", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetSchemasNamesAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'GetSchemasDataSourcesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemasDataSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse GetSchemasDataSources(ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemasDataSources", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse> GetSchemasDataSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourceIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetSchemaDataSourceIDs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourceIDs", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetSchemaDataSourceIDsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourcesCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetSchemaDataSourcesCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetSchemaDataSourcesCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetSchemaDataSourcesCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthSchemaName(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthSchemaNameAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaDataSourceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaDataSourceID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaDataSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.Connection GetNthSchemaDataSource(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthSchemaDataSource", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetNthSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetResolveAssets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetResolveAssets(string inUsername, string inPassword, string inTicketID, bool inResolved);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetResolveAssets", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inResolved);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetResolveAssets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetResolveAssets(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetResolveAssets", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetConnectivityAssets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetConnectivityAssets(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetConnectivityAssets", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetConnectivityAssets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetConnectivityAssets(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetConnectivityAssets", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetsPrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAssetsPrefix(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetsPrefix", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAssetsPrefixAsync(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetsPrefixType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAssetsPrefixType(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetsPrefixType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAssetsPrefixTypeAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetsFixedPrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAssetsFixedPrefix(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetsFixedPrefix", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAssetsFixedPrefixAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAssetSource(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct inAssetSourceInfo, int inPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct inAssetSourceInfo, int inPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourceEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo inAssetSourceInfo, int inPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourceEx", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo inAssetSourceInfo, int inPriority);
        
        // CODEGEN: Parameter 'inAssetSources' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse SetAssetSources(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSources", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse> SetAssetSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest request);
        
        // CODEGEN: Parameter 'inAssetSources' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourcesEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse SetAssetSourcesEx(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourcesEx", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse> SetAssetSourcesExAsync(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourceByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAssetSourceByID(string inUsername, string inPassword, string inTicketID, string inAssetSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourceByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAssetSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inAssetSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourcesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAssetSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetAssetSourcesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAssetSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultAssetSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDefaultAssetSources(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultAssetSources", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDefaultAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllAssetSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllAssetSources(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllAssetSources", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllAssetSourcesAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAssetSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAssetSource(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAssetSource", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct GetAssetSource(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSource", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct> GetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourceEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo GetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourceEx", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo> GetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAssetSourceID(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourceID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcePriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetAssetSourcePriority(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcePriority", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, string inName);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAssetSourcesNames(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesNames", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAssetSourcesNamesAsync(string inUsername, string inPassword, string inTicketID);
        
        // CODEGEN: Parameter 'GetAssetSourcesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse GetAssetSources(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSources", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse> GetAssetSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest request);
        
        // CODEGEN: Parameter 'GetAssetSourcesExResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse GetAssetSourcesEx(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesEx", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse> GetAssetSourcesExAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAssetSourcesIDs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesIDs", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAssetSourcesIDsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetAssetSourcesCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetAssetSourcesCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetAssetSourcesCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthAssetSourceName(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthAssetSourceNameAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct GetNthAssetSource(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSource", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct> GetNthAssetSourceAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo GetNthAssetSourceEx(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceEx", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo> GetNthAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthAssetSourceID(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourceID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourcePriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetNthAssetSourcePriority(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthAssetSourcePriority", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetNthAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPopulationGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPopulationGUID(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetPopulationGUID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIRange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRIRange(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIRange", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRIRangeAsync(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRI(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRI", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRIAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection);
        
        // CODEGEN: Parameter 'inRIInfos' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse SetRIs(ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIs", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse> SetRIsAsync(ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRIByID(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIByID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRIByIDAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIByPopulationGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRIByPopulationGUID(string inUsername, string inPassword, string inTicketID, string inPopulationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIByPopulationGUID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRIByPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID, string inPopulationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetInfoByRunGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetInfoByRunGUID(string inUsername, string inPassword, string inTicketID, string inRunGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetInfoByRunGUID", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetInfoByRunGUIDAsync(string inUsername, string inPassword, string inTicketID, string inRunGUID);
        
        // CODEGEN: Parameter 'inRIInfos' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIsByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse SetRIsByID(ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetRIsByID", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse> SetRIsByIDAsync(ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultRI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/SetDefaultRI", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllRIs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RemoveAllRIs(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/RemoveAllRIs", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveAllRIsAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetRIsCount(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIsCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetRIsCountAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIFrom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetRIFrom(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRIFrom", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetRIFromAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRITo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetRITo(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetRITo", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetRIToAsync(string inUsername, string inPassword, string inTicketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIRecipientIDListFileName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNthRIRecipientIDListFileName(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIRecipientIDListFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNthRIRecipientIDListFileNameAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIRecipientIDListMergeType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ArtFactory.Proofer.XmPie.JobTicket.ERecipientIDListMergeType GetNthRIRecipientIDListMergeType(string inUsername, string inPassword, string inTicketID, int inRIIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="XMPieWSAPI/GetNthRIRecipientIDListMergeType", ReplyAction="*")]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.ERecipientIDListMergeType> GetNthRIRecipientIDListMergeTypeAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Parameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
                this.RaisePropertyChanged("m_Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
                this.RaisePropertyChanged("m_Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
                this.RaisePropertyChanged("m_Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
                this.RaisePropertyChanged("m_Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_TypeField;
        
        private string m_AssemblyPathField;
        
        private string m_ClassNameField;
        
        private string m_ControlNameField;
        
        private string m_AssetSourceIDField;
        
        private AssetSourceParameter[] m_ParamsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
                this.RaisePropertyChanged("m_Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_AssemblyPath {
            get {
                return this.m_AssemblyPathField;
            }
            set {
                this.m_AssemblyPathField = value;
                this.RaisePropertyChanged("m_AssemblyPath");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_ClassName {
            get {
                return this.m_ClassNameField;
            }
            set {
                this.m_ClassNameField = value;
                this.RaisePropertyChanged("m_ClassName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_ControlName {
            get {
                return this.m_ControlNameField;
            }
            set {
                this.m_ControlNameField = value;
                this.RaisePropertyChanged("m_ControlName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string m_AssetSourceID {
            get {
                return this.m_AssetSourceIDField;
            }
            set {
                this.m_AssetSourceIDField = value;
                this.RaisePropertyChanged("m_AssetSourceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public AssetSourceParameter[] m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
                this.RaisePropertyChanged("m_Params");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceStruct : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_ParamsField;
        
        private string m_ObjectNameField;
        
        private string m_ProdObjectNameField;
        
        private string m_DllNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
                this.RaisePropertyChanged("m_Params");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_ObjectName {
            get {
                return this.m_ObjectNameField;
            }
            set {
                this.m_ObjectNameField = value;
                this.RaisePropertyChanged("m_ObjectName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_ProdObjectName {
            get {
                return this.m_ProdObjectNameField;
            }
            set {
                this.m_ProdObjectNameField = value;
                this.RaisePropertyChanged("m_ProdObjectName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_DllName {
            get {
                return this.m_DllNameField;
            }
            set {
                this.m_DllNameField = value;
                this.RaisePropertyChanged("m_DllName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Customization : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_NameField;
        
        private string m_TypeField;
        
        private string m_IOTypeField;
        
        private string m_ExpressionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
                this.RaisePropertyChanged("m_Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
                this.RaisePropertyChanged("m_Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_IOType {
            get {
                return this.m_IOTypeField;
            }
            set {
                this.m_IOTypeField = value;
                this.RaisePropertyChanged("m_IOType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_Expression {
            get {
                return this.m_ExpressionField;
            }
            set {
                this.m_ExpressionField = value;
                this.RaisePropertyChanged("m_Expression");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class SubJobInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ulong m_IndexField;
        
        private int m_SplitNumField;
        
        private int m_SplitTypeField;
        
        private int m_OrigFromField;
        
        private int m_OrigToField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ulong m_Index {
            get {
                return this.m_IndexField;
            }
            set {
                this.m_IndexField = value;
                this.RaisePropertyChanged("m_Index");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int m_SplitNum {
            get {
                return this.m_SplitNumField;
            }
            set {
                this.m_SplitNumField = value;
                this.RaisePropertyChanged("m_SplitNum");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int m_SplitType {
            get {
                return this.m_SplitTypeField;
            }
            set {
                this.m_SplitTypeField = value;
                this.RaisePropertyChanged("m_SplitType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int m_OrigFrom {
            get {
                return this.m_OrigFromField;
            }
            set {
                this.m_OrigFromField = value;
                this.RaisePropertyChanged("m_OrigFrom");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int m_OrigTo {
            get {
                return this.m_OrigToField;
            }
            set {
                this.m_OrigToField = value;
                this.RaisePropertyChanged("m_OrigTo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Connection : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_TypeField;
        
        private string m_ConnectionStringField;
        
        private string m_AdditionalInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
                this.RaisePropertyChanged("m_Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_ConnectionString {
            get {
                return this.m_ConnectionStringField;
            }
            set {
                this.m_ConnectionStringField = value;
                this.RaisePropertyChanged("m_ConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_AdditionalInfo {
            get {
                return this.m_AdditionalInfoField;
            }
            set {
                this.m_AdditionalInfoField = value;
                this.RaisePropertyChanged("m_AdditionalInfo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class RecipientsInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int m_FromField;
        
        private int m_ToField;
        
        private int m_FilterTypeField;
        
        private string m_FilterField;
        
        private string m_SubFilterField;
        
        private string m_SelectOneQueryField;
        
        private string m_InsertQueryField;
        
        private string m_UpdateQueryField;
        
        private string m_DeleteQueryField;
        
        private string m_recipientIDListFileNameField;
        
        private int m_recipientIDListMergeTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int m_From {
            get {
                return this.m_FromField;
            }
            set {
                this.m_FromField = value;
                this.RaisePropertyChanged("m_From");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int m_To {
            get {
                return this.m_ToField;
            }
            set {
                this.m_ToField = value;
                this.RaisePropertyChanged("m_To");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int m_FilterType {
            get {
                return this.m_FilterTypeField;
            }
            set {
                this.m_FilterTypeField = value;
                this.RaisePropertyChanged("m_FilterType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_Filter {
            get {
                return this.m_FilterField;
            }
            set {
                this.m_FilterField = value;
                this.RaisePropertyChanged("m_Filter");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string m_SubFilter {
            get {
                return this.m_SubFilterField;
            }
            set {
                this.m_SubFilterField = value;
                this.RaisePropertyChanged("m_SubFilter");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string m_SelectOneQuery {
            get {
                return this.m_SelectOneQueryField;
            }
            set {
                this.m_SelectOneQueryField = value;
                this.RaisePropertyChanged("m_SelectOneQuery");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string m_InsertQuery {
            get {
                return this.m_InsertQueryField;
            }
            set {
                this.m_InsertQueryField = value;
                this.RaisePropertyChanged("m_InsertQuery");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string m_UpdateQuery {
            get {
                return this.m_UpdateQueryField;
            }
            set {
                this.m_UpdateQueryField = value;
                this.RaisePropertyChanged("m_UpdateQuery");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string m_DeleteQuery {
            get {
                return this.m_DeleteQueryField;
            }
            set {
                this.m_DeleteQueryField = value;
                this.RaisePropertyChanged("m_DeleteQuery");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string m_recipientIDListFileName {
            get {
                return this.m_recipientIDListFileNameField;
            }
            set {
                this.m_recipientIDListFileNameField = value;
                this.RaisePropertyChanged("m_recipientIDListFileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int m_recipientIDListMergeType {
            get {
                return this.m_recipientIDListMergeTypeField;
            }
            set {
                this.m_recipientIDListMergeTypeField = value;
                this.RaisePropertyChanged("m_recipientIDListMergeType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class FieldMappingInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_PlanFieldNameField;
        
        private EFieldMappingTypes m_MappingTypeField;
        
        private string m_MappingValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_PlanFieldName {
            get {
                return this.m_PlanFieldNameField;
            }
            set {
                this.m_PlanFieldNameField = value;
                this.RaisePropertyChanged("m_PlanFieldName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public EFieldMappingTypes m_MappingType {
            get {
                return this.m_MappingTypeField;
            }
            set {
                this.m_MappingTypeField = value;
                this.RaisePropertyChanged("m_MappingType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_MappingValue {
            get {
                return this.m_MappingValueField;
            }
            set {
                this.m_MappingValueField = value;
                this.RaisePropertyChanged("m_MappingValue");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public enum EFieldMappingTypes {
        
        /// <remarks/>
        eDSField,
        
        /// <remarks/>
        eConstant,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class FieldMappings : object, System.ComponentModel.INotifyPropertyChanged {
        
        private FieldMappingInfo[] m_mappingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public FieldMappingInfo[] m_mappings {
            get {
                return this.m_mappingsField;
            }
            set {
                this.m_mappingsField = value;
                this.RaisePropertyChanged("m_mappings");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Property : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
                this.RaisePropertyChanged("m_Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
                this.RaisePropertyChanged("m_Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class URLInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_ProxyServerField;
        
        private int m_ProxyPortField;
        
        private string m_BaseURLField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_ProxyServer {
            get {
                return this.m_ProxyServerField;
            }
            set {
                this.m_ProxyServerField = value;
                this.RaisePropertyChanged("m_ProxyServer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int m_ProxyPort {
            get {
                return this.m_ProxyPortField;
            }
            set {
                this.m_ProxyPortField = value;
                this.RaisePropertyChanged("m_ProxyPort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_BaseURL {
            get {
                return this.m_BaseURLField;
            }
            set {
                this.m_BaseURLField = value;
                this.RaisePropertyChanged("m_BaseURL");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
                this.RaisePropertyChanged("m_Charset");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailBodyOptions : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool m_EmbedResourcesField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool m_EmbedResources {
            get {
                return this.m_EmbedResourcesField;
            }
            set {
                this.m_EmbedResourcesField = value;
                this.RaisePropertyChanged("m_EmbedResources");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
                this.RaisePropertyChanged("m_Charset");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailBodyInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_ContentField;
        
        private string m_ContentTypeField;
        
        private string m_FormatField;
        
        private EmailBodyOptions m_BodyOptionsField;
        
        private URLInfo m_URLInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Content {
            get {
                return this.m_ContentField;
            }
            set {
                this.m_ContentField = value;
                this.RaisePropertyChanged("m_Content");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_ContentType {
            get {
                return this.m_ContentTypeField;
            }
            set {
                this.m_ContentTypeField = value;
                this.RaisePropertyChanged("m_ContentType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_Format {
            get {
                return this.m_FormatField;
            }
            set {
                this.m_FormatField = value;
                this.RaisePropertyChanged("m_Format");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public EmailBodyOptions m_BodyOptions {
            get {
                return this.m_BodyOptionsField;
            }
            set {
                this.m_BodyOptionsField = value;
                this.RaisePropertyChanged("m_BodyOptions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public URLInfo m_URLInfo {
            get {
                return this.m_URLInfoField;
            }
            set {
                this.m_URLInfoField = value;
                this.RaisePropertyChanged("m_URLInfo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailAddress : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_AddressField;
        
        private string m_DisplayField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Address {
            get {
                return this.m_AddressField;
            }
            set {
                this.m_AddressField = value;
                this.RaisePropertyChanged("m_Address");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Display {
            get {
                return this.m_DisplayField;
            }
            set {
                this.m_DisplayField = value;
                this.RaisePropertyChanged("m_Display");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailHeaderInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_SubjectField;
        
        private EmailAddress[] m_ToField;
        
        private EmailAddress[] m_CCField;
        
        private EmailAddress[] m_BCCField;
        
        private EmailAddress[] m_FromField;
        
        private EmailAddress[] m_ReplyToField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Subject {
            get {
                return this.m_SubjectField;
            }
            set {
                this.m_SubjectField = value;
                this.RaisePropertyChanged("m_Subject");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public EmailAddress[] m_To {
            get {
                return this.m_ToField;
            }
            set {
                this.m_ToField = value;
                this.RaisePropertyChanged("m_To");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public EmailAddress[] m_CC {
            get {
                return this.m_CCField;
            }
            set {
                this.m_CCField = value;
                this.RaisePropertyChanged("m_CC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public EmailAddress[] m_BCC {
            get {
                return this.m_BCCField;
            }
            set {
                this.m_BCCField = value;
                this.RaisePropertyChanged("m_BCC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public EmailAddress[] m_From {
            get {
                return this.m_FromField;
            }
            set {
                this.m_FromField = value;
                this.RaisePropertyChanged("m_From");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public EmailAddress[] m_ReplyTo {
            get {
                return this.m_ReplyToField;
            }
            set {
                this.m_ReplyToField = value;
                this.RaisePropertyChanged("m_ReplyTo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
                this.RaisePropertyChanged("m_Charset");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailProviderParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
                this.RaisePropertyChanged("m_Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
                this.RaisePropertyChanged("m_Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailProviderInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string m_TypeField;
        
        private string m_AssemblyPathField;
        
        private string m_ClassNameField;
        
        private string m_ControlNameField;
        
        private EmailProviderParameter[] m_ParamsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
                this.RaisePropertyChanged("m_Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string m_AssemblyPath {
            get {
                return this.m_AssemblyPathField;
            }
            set {
                this.m_AssemblyPathField = value;
                this.RaisePropertyChanged("m_AssemblyPath");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string m_ClassName {
            get {
                return this.m_ClassNameField;
            }
            set {
                this.m_ClassNameField = value;
                this.RaisePropertyChanged("m_ClassName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string m_ControlName {
            get {
                return this.m_ControlNameField;
            }
            set {
                this.m_ControlNameField = value;
                this.RaisePropertyChanged("m_ControlName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public EmailProviderParameter[] m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
                this.RaisePropertyChanged("m_Params");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddTracking", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddTrackingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public bool inTrackADORValues;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public AddTrackingRequest() {
        }
        
        public AddTrackingRequest(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inTrackADORValues = inTrackADORValues;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddTrackingResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddTrackingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool AddTrackingResult;
        
        public AddTrackingResponse() {
        }
        
        public AddTrackingResponse(bool AddTrackingResult) {
            this.AddTrackingResult = AddTrackingResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetTrackingParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetTrackingParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetTrackingParametersRequest() {
        }
        
        public SetTrackingParametersRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetTrackingParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetTrackingParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetTrackingParametersResult;
        
        public SetTrackingParametersResponse() {
        }
        
        public SetTrackingParametersResponse(bool SetTrackingParametersResult) {
            this.SetTrackingParametersResult = SetTrackingParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTrackingParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetTrackingParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inParameterNames;
        
        public GetTrackingParametersRequest() {
        }
        
        public GetTrackingParametersRequest(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParameterNames = inParameterNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTrackingParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetTrackingParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetTrackingParametersResult;
        
        public GetTrackingParametersResponse() {
        }
        
        public GetTrackingParametersResponse(ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetTrackingParametersResult) {
            this.GetTrackingParametersResult = GetTrackingParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetMetaData", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetMetaDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inGroupName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Property[] inProperties;
        
        public SetMetaDataRequest() {
        }
        
        public SetMetaDataRequest(string inUsername, string inPassword, string inTicketID, string[] inGroupName, ArtFactory.Proofer.XmPie.JobTicket.Property[] inProperties) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inGroupName = inGroupName;
            this.inProperties = inProperties;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetMetaDataResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetMetaDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetMetaDataResult;
        
        public SetMetaDataResponse() {
        }
        
        public SetMetaDataResponse(bool SetMetaDataResult) {
            this.SetMetaDataResult = SetMetaDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMetaData", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetMetaDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inGroupName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        public string[] inPropertyNames;
        
        public GetMetaDataRequest() {
        }
        
        public GetMetaDataRequest(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inGroupName = inGroupName;
            this.inPropertyNames = inPropertyNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMetaDataResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetMetaDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Property[] GetMetaDataResult;
        
        public GetMetaDataResponse() {
        }
        
        public GetMetaDataResponse(ArtFactory.Proofer.XmPie.JobTicket.Property[] GetMetaDataResult) {
            this.GetMetaDataResult = GetMetaDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllMetaData", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAllMetaDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inGroupName;
        
        public GetAllMetaDataRequest() {
        }
        
        public GetAllMetaDataRequest(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inGroupName = inGroupName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllMetaDataResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAllMetaDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Property[] GetAllMetaDataResult;
        
        public GetAllMetaDataResponse() {
        }
        
        public GetAllMetaDataResponse(ArtFactory.Proofer.XmPie.JobTicket.Property[] GetAllMetaDataResult) {
            this.GetAllMetaDataResult = GetAllMetaDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetJobParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetJobParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetJobParametersRequest() {
        }
        
        public SetJobParametersRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetJobParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetJobParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetJobParametersResult;
        
        public SetJobParametersResponse() {
        }
        
        public SetJobParametersResponse(bool SetJobParametersResult) {
            this.SetJobParametersResult = SetJobParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJobParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetJobParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inParameterNames;
        
        public GetJobParametersRequest() {
        }
        
        public GetJobParametersRequest(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParameterNames = inParameterNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJobParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetJobParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJobParametersResult;
        
        public GetJobParametersResponse() {
        }
        
        public GetJobParametersResponse(ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJobParametersResult) {
            this.GetJobParametersResult = GetJobParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetOutputInfo", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetOutputInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string inType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        public int inMedia;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=5)]
        public string inFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=6)]
        public string inFileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=7)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetOutputInfoRequest() {
        }
        
        public SetOutputInfoRequest(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inType = inType;
            this.inMedia = inMedia;
            this.inFolder = inFolder;
            this.inFileName = inFileName;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetOutputInfoResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetOutputInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetOutputInfoResult;
        
        public SetOutputInfoResponse() {
        }
        
        public SetOutputInfoResponse(bool SetOutputInfoResult) {
            this.SetOutputInfoResult = SetOutputInfoResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetOutputParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetOutputParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetOutputParametersRequest() {
        }
        
        public SetOutputParametersRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetOutputParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetOutputParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetOutputParametersResult;
        
        public SetOutputParametersResponse() {
        }
        
        public SetOutputParametersResponse(bool SetOutputParametersResult) {
            this.SetOutputParametersResult = SetOutputParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOutputParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetOutputParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inParameterNames;
        
        public GetOutputParametersRequest() {
        }
        
        public GetOutputParametersRequest(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParameterNames = inParameterNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOutputParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetOutputParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetOutputParametersResult;
        
        public GetOutputParametersResponse() {
        }
        
        public GetOutputParametersResponse(ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetOutputParametersResult) {
            this.GetOutputParametersResult = GetOutputParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddImposition", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddImpositionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public AddImpositionRequest() {
        }
        
        public AddImpositionRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddImpositionResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddImpositionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool AddImpositionResult;
        
        public AddImpositionResponse() {
        }
        
        public AddImpositionResponse(bool AddImpositionResult) {
            this.AddImpositionResult = AddImpositionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetImpositionParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetImpositionParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetImpositionParametersRequest() {
        }
        
        public SetImpositionParametersRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetImpositionParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetImpositionParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetImpositionParametersResult;
        
        public SetImpositionParametersResponse() {
        }
        
        public SetImpositionParametersResponse(bool SetImpositionParametersResult) {
            this.SetImpositionParametersResult = SetImpositionParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImpositionParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetImpositionParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inParameterNames;
        
        public GetImpositionParametersRequest() {
        }
        
        public GetImpositionParametersRequest(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParameterNames = inParameterNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetImpositionParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetImpositionParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetImpositionParametersResult;
        
        public GetImpositionParametersResponse() {
        }
        
        public GetImpositionParametersResponse(ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetImpositionParametersResult) {
            this.GetImpositionParametersResult = GetImpositionParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddJDF", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddJDFRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public AddJDFRequest() {
        }
        
        public AddJDFRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddJDFResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class AddJDFResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool AddJDFResult;
        
        public AddJDFResponse() {
        }
        
        public AddJDFResponse(bool AddJDFResult) {
            this.AddJDFResult = AddJDFResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetJDFParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetJDFParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams;
        
        public SetJDFParametersRequest() {
        }
        
        public SetJDFParametersRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParams = inParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetJDFParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetJDFParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetJDFParametersResult;
        
        public SetJDFParametersResponse() {
        }
        
        public SetJDFParametersResponse(bool SetJDFParametersResult) {
            this.SetJDFParametersResult = SetJDFParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJDFParameters", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetJDFParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inParameterNames;
        
        public GetJDFParametersRequest() {
        }
        
        public GetJDFParametersRequest(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inParameterNames = inParameterNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJDFParametersResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetJDFParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJDFParametersResult;
        
        public GetJDFParametersResponse() {
        }
        
        public GetJDFParametersResponse(ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJDFParametersResult) {
            this.GetJDFParametersResult = GetJDFParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCustomizations", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetCustomizationsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Customization[] inCustomizations;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        public bool expressionAsValue;
        
        public SetCustomizationsRequest() {
        }
        
        public SetCustomizationsRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization[] inCustomizations, bool expressionAsValue) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inCustomizations = inCustomizations;
            this.expressionAsValue = expressionAsValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCustomizationsResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetCustomizationsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetCustomizationsResult;
        
        public SetCustomizationsResponse() {
        }
        
        public SetCustomizationsResponse(bool SetCustomizationsResult) {
            this.SetCustomizationsResult = SetCustomizationsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomizations", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetCustomizationsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        public GetCustomizationsRequest() {
        }
        
        public GetCustomizationsRequest(string inUsername, string inPassword, string inTicketID) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomizationsResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetCustomizationsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Customization[] GetCustomizationsResult;
        
        public GetCustomizationsResponse() {
        }
        
        public GetCustomizationsResponse(ArtFactory.Proofer.XmPie.JobTicket.Customization[] GetCustomizationsResult) {
            this.GetCustomizationsResult = GetCustomizationsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDataSources", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetDataSourcesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inSchemaNameArray;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections;
        
        public SetDataSourcesRequest() {
        }
        
        public SetDataSourcesRequest(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inSchemaNameArray = inSchemaNameArray;
            this.inConnections = inConnections;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDataSourcesResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetDataSourcesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetDataSourcesResult;
        
        public SetDataSourcesResponse() {
        }
        
        public SetDataSourcesResponse(bool SetDataSourcesResult) {
            this.SetDataSourcesResult = SetDataSourcesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSchemasDataSources", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetSchemasDataSourcesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        public GetSchemasDataSourcesRequest() {
        }
        
        public GetSchemasDataSourcesRequest(string inUsername, string inPassword, string inTicketID) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSchemasDataSourcesResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetSchemasDataSourcesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Connection[] GetSchemasDataSourcesResult;
        
        public GetSchemasDataSourcesResponse() {
        }
        
        public GetSchemasDataSourcesResponse(ArtFactory.Proofer.XmPie.JobTicket.Connection[] GetSchemasDataSourcesResult) {
            this.GetSchemasDataSourcesResult = GetSchemasDataSourcesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetAssetSources", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetAssetSourcesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] inAssetSources;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=5)]
        public int[] inPriorities;
        
        public SetAssetSourcesRequest() {
        }
        
        public SetAssetSourcesRequest(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] inAssetSources, int[] inPriorities) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inNames = inNames;
            this.inAssetSources = inAssetSources;
            this.inPriorities = inPriorities;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetAssetSourcesResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetAssetSourcesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetAssetSourcesResult;
        
        public SetAssetSourcesResponse() {
        }
        
        public SetAssetSourcesResponse(bool SetAssetSourcesResult) {
            this.SetAssetSourcesResult = SetAssetSourcesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetAssetSourcesEx", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetAssetSourcesExRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        public string[] inNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] inAssetSources;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=5)]
        public int[] inPriorities;
        
        public SetAssetSourcesExRequest() {
        }
        
        public SetAssetSourcesExRequest(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] inAssetSources, int[] inPriorities) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inNames = inNames;
            this.inAssetSources = inAssetSources;
            this.inPriorities = inPriorities;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetAssetSourcesExResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetAssetSourcesExResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetAssetSourcesExResult;
        
        public SetAssetSourcesExResponse() {
        }
        
        public SetAssetSourcesExResponse(bool SetAssetSourcesExResult) {
            this.SetAssetSourcesExResult = SetAssetSourcesExResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAssetSources", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAssetSourcesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        public GetAssetSourcesRequest() {
        }
        
        public GetAssetSourcesRequest(string inUsername, string inPassword, string inTicketID) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAssetSourcesResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAssetSourcesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] GetAssetSourcesResult;
        
        public GetAssetSourcesResponse() {
        }
        
        public GetAssetSourcesResponse(ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] GetAssetSourcesResult) {
            this.GetAssetSourcesResult = GetAssetSourcesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAssetSourcesEx", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAssetSourcesExRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        public GetAssetSourcesExRequest() {
        }
        
        public GetAssetSourcesExRequest(string inUsername, string inPassword, string inTicketID) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAssetSourcesExResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class GetAssetSourcesExResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] GetAssetSourcesExResult;
        
        public GetAssetSourcesExResponse() {
        }
        
        public GetAssetSourcesExResponse(ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] GetAssetSourcesExResult) {
            this.GetAssetSourcesExResult = GetAssetSourcesExResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRIs", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetRIsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections;
        
        public SetRIsRequest() {
        }
        
        public SetRIsRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inRIInfos = inRIInfos;
            this.inConnections = inConnections;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRIsResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetRIsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetRIsResult;
        
        public SetRIsResponse() {
        }
        
        public SetRIsResponse(bool SetRIsResult) {
            this.SetRIsResult = SetRIsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRIsByID", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetRIsByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public string inUsername;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=1)]
        public string inPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=2)]
        public string inTicketID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=4)]
        public string[] inDataSourceIDArray;
        
        public SetRIsByIDRequest() {
        }
        
        public SetRIsByIDRequest(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray) {
            this.inUsername = inUsername;
            this.inPassword = inPassword;
            this.inTicketID = inTicketID;
            this.inRIInfos = inRIInfos;
            this.inDataSourceIDArray = inDataSourceIDArray;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetRIsByIDResponse", WrapperNamespace="XMPieWSAPI", IsWrapped=true)]
    public partial class SetRIsByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="XMPieWSAPI", Order=0)]
        public bool SetRIsByIDResult;
        
        public SetRIsByIDResponse() {
        }
        
        public SetRIsByIDResponse(bool SetRIsByIDResult) {
            this.SetRIsByIDResult = SetRIsByIDResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public enum ERecipientIDListMergeType {
        
        /// <remarks/>
        eNoMerge,
        
        /// <remarks/>
        eIntersectWithCSVList,
        
        /// <remarks/>
        eSkipRecipientsCSVList,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface JobTicket_SSPSoapChannel : ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JobTicket_SSPSoapClient : System.ServiceModel.ClientBase<ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap>, ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap {
        
        public JobTicket_SSPSoapClient() {
        }
        
        public JobTicket_SSPSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JobTicket_SSPSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobTicket_SSPSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobTicket_SSPSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetFFPMExecutablePath(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMExecutablePath(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFFPMExecutablePathAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMExecutablePathAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFFPMQueueSpecs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMQueueSpecs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFFPMQueueSpecsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMQueueSpecsAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddRemoteCopy(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddRemoteCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public bool AddRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddRemoteCopyByID(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddRemoteCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public bool RemoveRemoteCopy(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveRemoteCopy(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveRemoteCopyAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveRemoteCopyAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsRemoteCopyExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsRemoteCopyExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsRemoteCopyExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetRemoteCopyID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRemoteCopyID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRemoteCopyIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetRemoteCopyDestination(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRemoteCopyDestination(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRemoteCopyDestinationAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsRemoteCopyDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsRemoteCopyDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddSecondaryRemoteCopy(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddSecondaryRemoteCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public bool AddSecondaryRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddSecondaryRemoteCopyByID(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddSecondaryRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddSecondaryRemoteCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public bool RemoveSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveSecondaryRemoteCopy(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveSecondaryRemoteCopyAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsSecondaryRemoteCopyExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSecondaryRemoteCopyExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSecondaryRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSecondaryRemoteCopyExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetSecondaryRemoteCopyID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSecondaryRemoteCopyID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetSecondaryRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSecondaryRemoteCopyIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetSecondaryRemoteCopyDestination(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSecondaryRemoteCopyDestination(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetSecondaryRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSecondaryRemoteCopyDestinationAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsSecondaryRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSecondaryRemoteCopyDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSecondaryRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSecondaryRemoteCopyDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddJDFCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddJDFCopy(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddJDFCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            return base.Channel.AddJDFCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource);
        }
        
        public bool AddJDFCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddJDFCopyByID(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddJDFCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddJDFCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public bool RemoveJDFCopy(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveJDFCopy(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJDFCopyAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveJDFCopyAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsJDFCopyExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFCopyExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsJDFCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFCopyExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetJDFCopyID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJDFCopyID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetJDFCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJDFCopyIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetJDFCopyDestination(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJDFCopyDestination(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetJDFCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJDFCopyDestinationAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsJDFCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFCopyDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsJDFCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFCopyDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetDistillJobOptionName(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.SetDistillJobOptionName(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<bool> SetDistillJobOptionNameAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.SetDistillJobOptionNameAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public bool IsJobTracked(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJobTracked(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsJobTrackedAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJobTrackedAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetTouchPointID(string inUsername, string inPassword, string inTicketID, string inTouchPointID) {
            return base.Channel.SetTouchPointID(inUsername, inPassword, inTicketID, inTouchPointID);
        }
        
        public System.Threading.Tasks.Task<bool> SetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID, string inTouchPointID) {
            return base.Channel.SetTouchPointIDAsync(inUsername, inPassword, inTicketID, inTouchPointID);
        }
        
        public string GetTouchPointID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTouchPointID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTouchPointIDAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddTracking(ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest request) {
            return base.Channel.AddTracking(request);
        }
        
        public bool AddTracking(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inTrackADORValues = inTrackADORValues;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddTracking(inValue);
            return retVal.AddTrackingResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddTrackingAsync(ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest request) {
            return base.Channel.AddTrackingAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddTrackingResponse> AddTrackingAsync(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddTrackingRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inTrackADORValues = inTrackADORValues;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddTrackingAsync(inValue);
        }
        
        public bool RemoveTracking(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveTracking(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTrackingAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveTrackingAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetTrackingParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetTrackingParameter(inUsername, inPassword, inTicketID, inParam);
        }
        
        public System.Threading.Tasks.Task<bool> SetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetTrackingParameterAsync(inUsername, inPassword, inTicketID, inParam);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetTrackingParameters(ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest request) {
            return base.Channel.SetTrackingParameters(request);
        }
        
        public bool SetTrackingParameters(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetTrackingParameters(inValue);
            return retVal.SetTrackingParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetTrackingParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest request) {
            return base.Channel.SetTrackingParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersResponse> SetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetTrackingParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetTrackingParametersAsync(inValue);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter GetTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetTrackingParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetTrackingParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetTrackingParameters(ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest request) {
            return base.Channel.GetTrackingParameters(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetTrackingParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetTrackingParameters(inValue);
            return retVal.GetTrackingParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetTrackingParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest request) {
            return base.Channel.GetTrackingParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersResponse> GetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetTrackingParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetTrackingParametersAsync(inValue);
        }
        
        public bool RemoveTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveTrackingParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveTrackingParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public bool RemoveTrackingParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveTrackingParameters(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveTrackingParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public bool RemoveAllTrackingParameters(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllTrackingParameters(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllTrackingParametersAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllTrackingParametersAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsTrackingADOR(string inUsername, string inPassword, string inTicketID, string inADORName) {
            return base.Channel.IsTrackingADOR(inUsername, inPassword, inTicketID, inADORName);
        }
        
        public System.Threading.Tasks.Task<bool> IsTrackingADORAsync(string inUsername, string inPassword, string inTicketID, string inADORName) {
            return base.Channel.IsTrackingADORAsync(inUsername, inPassword, inTicketID, inADORName);
        }
        
        public string[] GetTrackingADORs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTrackingADORs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTrackingADORsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTrackingADORsAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid) {
            return base.Channel.SetCircleTouchpointGuid(inUsername, inPassword, inTicketID, inCircleTouchpointGuid);
        }
        
        public System.Threading.Tasks.Task<bool> SetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid) {
            return base.Channel.SetCircleTouchpointGuidAsync(inUsername, inPassword, inTicketID, inCircleTouchpointGuid);
        }
        
        public string GetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCircleTouchpointGuid(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCircleTouchpointGuidAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetCircleRunGuid(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid) {
            return base.Channel.SetCircleRunGuid(inUsername, inPassword, inTicketID, inCircleRunGuid);
        }
        
        public System.Threading.Tasks.Task<bool> SetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid) {
            return base.Channel.SetCircleRunGuidAsync(inUsername, inPassword, inTicketID, inCircleRunGuid);
        }
        
        public string GetCircleRunGuid(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCircleRunGuid(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCircleRunGuidAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetDeliveryProvider(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo inDeliveryProviderInfo) {
            return base.Channel.SetDeliveryProvider(inUsername, inPassword, inTicketID, inDeliveryProviderInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo inDeliveryProviderInfo) {
            return base.Channel.SetDeliveryProviderAsync(inUsername, inPassword, inTicketID, inDeliveryProviderInfo);
        }
        
        public bool SetDeliveryProviderByID(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID) {
            return base.Channel.SetDeliveryProviderByID(inUsername, inPassword, inTicketID, inDeliveryProviderID);
        }
        
        public System.Threading.Tasks.Task<bool> SetDeliveryProviderByIDAsync(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID) {
            return base.Channel.SetDeliveryProviderByIDAsync(inUsername, inPassword, inTicketID, inDeliveryProviderID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo GetDeliveryProvider(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDeliveryProvider(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailProviderInfo> GetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDeliveryProviderAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetDeliveryProviderID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDeliveryProviderID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetDeliveryProviderIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDeliveryProviderIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetEmailHeader(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo inEmailHeaderInfo) {
            return base.Channel.SetEmailHeader(inUsername, inPassword, inTicketID, inEmailHeaderInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo inEmailHeaderInfo) {
            return base.Channel.SetEmailHeaderAsync(inUsername, inPassword, inTicketID, inEmailHeaderInfo);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo GetEmailHeader(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailHeader(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailHeaderInfo> GetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailHeaderAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetEmailBody(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo) {
            return base.Channel.SetEmailBody(inUsername, inPassword, inTicketID, inEmailBodyInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailBodyAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo) {
            return base.Channel.SetEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyInfo);
        }
        
        public bool SetEmailBodies(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] inEmailBodyInfoArray) {
            return base.Channel.SetEmailBodies(inUsername, inPassword, inTicketID, inEmailBodyInfoArray);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] inEmailBodyInfoArray) {
            return base.Channel.SetEmailBodiesAsync(inUsername, inPassword, inTicketID, inEmailBodyInfoArray);
        }
        
        public bool AddEmailBody(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo) {
            return base.Channel.AddEmailBody(inUsername, inPassword, inTicketID, inEmailBodyInfo);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmailBodyAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo inEmailBodyInfo) {
            return base.Channel.AddEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyInfo);
        }
        
        public bool SetEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions) {
            return base.Channel.SetEmailBodyByID(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions) {
            return base.Channel.SetEmailBodyByIDAsync(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions);
        }
        
        public bool SetEmailBodiesByIDs(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions[] inBodyOptionsArray) {
            return base.Channel.SetEmailBodiesByIDs(inUsername, inPassword, inTicketID, inDocumentIDs, inBodyOptionsArray);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailBodiesByIDsAsync(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions[] inBodyOptionsArray) {
            return base.Channel.SetEmailBodiesByIDsAsync(inUsername, inPassword, inTicketID, inDocumentIDs, inBodyOptionsArray);
        }
        
        public bool AddEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions) {
            return base.Channel.AddEmailBodyByID(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, ArtFactory.Proofer.XmPie.JobTicket.EmailBodyOptions inBodyOptions) {
            return base.Channel.AddEmailBodyByIDAsync(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions);
        }
        
        public bool RemoveAllEmailBodies(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllEmailBodies(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllEmailBodiesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllEmailBodiesAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[] GetEmailBodies(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodies(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo[]> GetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodiesAsync(inUsername, inPassword, inTicketID);
        }
        
        public string[] GetEmailBodiesIDs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodiesIDs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetEmailBodiesIDsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodiesIDsAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetEmailBodyCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodyCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetEmailBodyCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailBodyCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo GetNthEmailBody(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            return base.Channel.GetNthEmailBody(inUsername, inPassword, inTicketID, inEmailBodyIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.EmailBodyInfo> GetNthEmailBodyAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            return base.Channel.GetNthEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyIndex);
        }
        
        public string GetNthEmailBodyID(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            return base.Channel.GetNthEmailBodyID(inUsername, inPassword, inTicketID, inEmailBodyIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthEmailBodyIDAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            return base.Channel.GetNthEmailBodyIDAsync(inUsername, inPassword, inTicketID, inEmailBodyIndex);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetMetaData(ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest request) {
            return base.Channel.SetMetaData(request);
        }
        
        public bool SetMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, ArtFactory.Proofer.XmPie.JobTicket.Property[] inProperties) {
            ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            inValue.inProperties = inProperties;
            ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetMetaData(inValue);
            return retVal.SetMetaDataResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest request) {
            return base.Channel.SetMetaDataAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataResponse> SetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, ArtFactory.Proofer.XmPie.JobTicket.Property[] inProperties) {
            ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            inValue.inProperties = inProperties;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetMetaDataAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetMetaData(ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest request) {
            return base.Channel.GetMetaData(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Property[] GetMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            inValue.inPropertyNames = inPropertyNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetMetaData(inValue);
            return retVal.GetMetaDataResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest request) {
            return base.Channel.GetMetaDataAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataResponse> GetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            inValue.inPropertyNames = inPropertyNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetMetaDataAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAllMetaData(ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest request) {
            return base.Channel.GetAllMetaData(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Property[] GetAllMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAllMetaData(inValue);
            return retVal.GetAllMetaDataResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAllMetaDataAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest request) {
            return base.Channel.GetAllMetaDataAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataResponse> GetAllMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAllMetaDataRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inGroupName = inGroupName;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAllMetaDataAsync(inValue);
        }
        
        public string[] GetMetaDataSubGroups(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            return base.Channel.GetMetaDataSubGroups(inUsername, inPassword, inTicketID, inGroupName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetMetaDataSubGroupsAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            return base.Channel.GetMetaDataSubGroupsAsync(inUsername, inPassword, inTicketID, inGroupName);
        }
        
        public bool RemoveMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            return base.Channel.RemoveMetaData(inUsername, inPassword, inTicketID, inGroupName, inPropertyNames);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            return base.Channel.RemoveMetaDataAsync(inUsername, inPassword, inTicketID, inGroupName, inPropertyNames);
        }
        
        public bool RemoveMetaDataGroup(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            return base.Channel.RemoveMetaDataGroup(inUsername, inPassword, inTicketID, inGroupName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMetaDataGroupAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            return base.Channel.RemoveMetaDataGroupAsync(inUsername, inPassword, inTicketID, inGroupName);
        }
        
        public bool IsMappingExists(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsMappingExists(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsMappingExistsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsMappingExistsAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.FieldMappings GetFieldMappings(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFieldMappings(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.FieldMappings> GetFieldMappingsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFieldMappingsAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetFieldMapping(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.FieldMappings inFieldMapping) {
            return base.Channel.SetFieldMapping(inUsername, inPassword, inTicketID, inFieldMapping);
        }
        
        public System.Threading.Tasks.Task<bool> SetFieldMappingAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.FieldMappings inFieldMapping) {
            return base.Channel.SetFieldMappingAsync(inUsername, inPassword, inTicketID, inFieldMapping);
        }
        
        public bool SetFieldMappingByID(string inUsername, string inPassword, string inTicketID, string inRecipientTableID) {
            return base.Channel.SetFieldMappingByID(inUsername, inPassword, inTicketID, inRecipientTableID);
        }
        
        public System.Threading.Tasks.Task<bool> SetFieldMappingByIDAsync(string inUsername, string inPassword, string inTicketID, string inRecipientTableID) {
            return base.Channel.SetFieldMappingByIDAsync(inUsername, inPassword, inTicketID, inRecipientTableID);
        }
        
        public bool RemoveFieldMapping(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFieldMapping(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFieldMappingAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFieldMappingAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo GetNthRIInfo(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIInfo(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo> GetNthRIInfoAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIInfoAsync(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public string GetNthRIDataSourceID(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIDataSourceID(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthRIDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIDataSourceIDAsync(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Connection GetNthRIDataSource(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIDataSource(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetNthRIDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIDataSourceAsync(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public bool AddRI(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.AddRI(inUsername, inPassword, inTicketID, inRIInfo, inConnection);
        }
        
        public System.Threading.Tasks.Task<bool> AddRIAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.AddRIAsync(inUsername, inPassword, inTicketID, inRIInfo, inConnection);
        }
        
        public bool AddRIByID(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID) {
            return base.Channel.AddRIByID(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID);
        }
        
        public System.Threading.Tasks.Task<bool> AddRIByIDAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID) {
            return base.Channel.AddRIByIDAsync(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID);
        }
        
        public bool AddDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            return base.Channel.AddDefaultRI(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> AddDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            return base.Channel.AddDefaultRIAsync(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented);
        }
        
        public bool SetRIOnDemandInfo(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo) {
            return base.Channel.SetRIOnDemandInfo(inUsername, inPassword, inTicketID, inRecipientID, inRecipientInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SetRIOnDemandInfoAsync(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo) {
            return base.Channel.SetRIOnDemandInfoAsync(inUsername, inPassword, inTicketID, inRecipientID, inRecipientInfo);
        }
        
        public string GetRIOnDemandRecipientID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIOnDemandRecipientID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetRIOnDemandRecipientIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIOnDemandRecipientIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetRIOnDemandRecipientInfo(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIOnDemandRecipientInfo(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetRIOnDemandRecipientInfoAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIOnDemandRecipientInfoAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetJobType(string inUsername, string inPassword, string inTicketID, string inJobType) {
            return base.Channel.SetJobType(inUsername, inPassword, inTicketID, inJobType);
        }
        
        public System.Threading.Tasks.Task<bool> SetJobTypeAsync(string inUsername, string inPassword, string inTicketID, string inJobType) {
            return base.Channel.SetJobTypeAsync(inUsername, inPassword, inTicketID, inJobType);
        }
        
        public string GetJobType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetJobTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetJobPriority(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobPriority(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetJobPriorityAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobPriorityAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetJobPriority(string inUsername, string inPassword, string inTicketID, string inJobPriority) {
            return base.Channel.SetJobPriority(inUsername, inPassword, inTicketID, inJobPriority);
        }
        
        public System.Threading.Tasks.Task<bool> SetJobPriorityAsync(string inUsername, string inPassword, string inTicketID, string inJobPriority) {
            return base.Channel.SetJobPriorityAsync(inUsername, inPassword, inTicketID, inJobPriority);
        }
        
        public bool SetJobTrackingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            return base.Channel.SetJobTrackingWebService(inUsername, inPassword, inTicketID, inWebServiceURL);
        }
        
        public System.Threading.Tasks.Task<bool> SetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            return base.Channel.SetJobTrackingWebServiceAsync(inUsername, inPassword, inTicketID, inWebServiceURL);
        }
        
        public string GetJobTrackingWebService(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobTrackingWebService(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobTrackingWebServiceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetJobReportingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            return base.Channel.SetJobReportingWebService(inUsername, inPassword, inTicketID, inWebServiceURL);
        }
        
        public System.Threading.Tasks.Task<bool> SetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            return base.Channel.SetJobReportingWebServiceAsync(inUsername, inPassword, inTicketID, inWebServiceURL);
        }
        
        public string GetJobReportingWebService(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobReportingWebService(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetJobReportingWebServiceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetSplittedJobInfo(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput) {
            return base.Channel.SetSplittedJobInfo(inUsername, inPassword, inTicketID, inSplitNum, inSplitType, inOrigFrom, inOrigTo, inMergeOutput);
        }
        
        public System.Threading.Tasks.Task<bool> SetSplittedJobInfoAsync(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput) {
            return base.Channel.SetSplittedJobInfoAsync(inUsername, inPassword, inTicketID, inSplitNum, inSplitType, inOrigFrom, inOrigTo, inMergeOutput);
        }
        
        public bool IsSplittedJob(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSplittedJob(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSplittedJobAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSplittedJobAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsParallelProcessingJob(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsParallelProcessingJob(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsParallelProcessingJobAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsParallelProcessingJobAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetAutomaticSubSplitAndMerge(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge) {
            return base.Channel.SetAutomaticSubSplitAndMerge(inUsername, inPassword, inTicketID, inEnableAutomaticSubSplit, inEnableAutomaticMerge);
        }
        
        public System.Threading.Tasks.Task<bool> SetAutomaticSubSplitAndMergeAsync(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge) {
            return base.Channel.SetAutomaticSubSplitAndMergeAsync(inUsername, inPassword, inTicketID, inEnableAutomaticSubSplit, inEnableAutomaticMerge);
        }
        
        public bool IsAutomaticSubSplitEnabled(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsAutomaticSubSplitEnabled(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsAutomaticSubSplitEnabledAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsAutomaticSubSplitEnabledAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsAutomaticMergeEnabled(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsAutomaticMergeEnabled(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsAutomaticMergeEnabledAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsAutomaticMergeEnabledAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsSubJob(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSubJob(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSubJobAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsSubJobAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.SubJobInfo GetSubJobInfo(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobInfo(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SubJobInfo> GetSubJobInfoAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobInfoAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSubJobIndex(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobIndex(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSubJobIndexAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobIndexAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSubJobOrigFrom(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobOrigFrom(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSubJobOrigFromAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobOrigFromAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSubJobOrigTo(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobOrigTo(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSubJobOrigToAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobOrigToAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSubJobSplitCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobSplitCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSubJobSplitCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobSplitCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSubJobSplitType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobSplitType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSubJobSplitTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubJobSplitTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetJobParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetJobParameter(inUsername, inPassword, inTicketID, inParam);
        }
        
        public System.Threading.Tasks.Task<bool> SetJobParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetJobParameterAsync(inUsername, inPassword, inTicketID, inParam);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetJobParameters(ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest request) {
            return base.Channel.SetJobParameters(request);
        }
        
        public bool SetJobParameters(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetJobParameters(inValue);
            return retVal.SetJobParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetJobParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest request) {
            return base.Channel.SetJobParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersResponse> SetJobParametersAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetJobParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetJobParametersAsync(inValue);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter GetJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetJobParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetJobParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetJobParameters(ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest request) {
            return base.Channel.GetJobParameters(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJobParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetJobParameters(inValue);
            return retVal.GetJobParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetJobParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest request) {
            return base.Channel.GetJobParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersResponse> GetJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetJobParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetJobParametersAsync(inValue);
        }
        
        public bool RemoveJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveJobParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveJobParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public bool RemoveJobParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveJobParameters(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveJobParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public bool RemoveAllJobParameters(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllJobParameters(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllJobParametersAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllJobParametersAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetEmailInfo(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL) {
            return base.Channel.SetEmailInfo(inUsername, inPassword, inTicketID, inEmailADORName, inSenderADORName, inSubjectADORName, inEmbed, inOutputType, inBaseURL);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailInfoAsync(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL) {
            return base.Channel.SetEmailInfoAsync(inUsername, inPassword, inTicketID, inEmailADORName, inSenderADORName, inSubjectADORName, inEmbed, inOutputType, inBaseURL);
        }
        
        public bool SetEmailAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetEmailAdorName(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetEmailAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public bool SetSenderAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetSenderAdorName(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public System.Threading.Tasks.Task<bool> SetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetSenderAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public bool SetSubjectAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetSubjectAdorName(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public System.Threading.Tasks.Task<bool> SetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            return base.Channel.SetSubjectAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName);
        }
        
        public bool SetEmbedEmailBody(string inUsername, string inPassword, string inTicketID, bool inEmbed) {
            return base.Channel.SetEmbedEmailBody(inUsername, inPassword, inTicketID, inEmbed);
        }
        
        public System.Threading.Tasks.Task<bool> SetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID, bool inEmbed) {
            return base.Channel.SetEmbedEmailBodyAsync(inUsername, inPassword, inTicketID, inEmbed);
        }
        
        public bool SetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID, string inType) {
            return base.Channel.SetProcessEmailOutputType(inUsername, inPassword, inTicketID, inType);
        }
        
        public System.Threading.Tasks.Task<bool> SetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType) {
            return base.Channel.SetProcessEmailOutputTypeAsync(inUsername, inPassword, inTicketID, inType);
        }
        
        public bool SetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID, string inBaseURL) {
            return base.Channel.SetOnDemandBaseURL(inUsername, inPassword, inTicketID, inBaseURL);
        }
        
        public System.Threading.Tasks.Task<bool> SetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID, string inBaseURL) {
            return base.Channel.SetOnDemandBaseURLAsync(inUsername, inPassword, inTicketID, inBaseURL);
        }
        
        public string GetEmailAdorName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailAdorName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmailAdorNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetSenderAdorName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSenderAdorName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSenderAdorNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetSubjectAdorName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubjectAdorName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSubjectAdorNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool GetEmbedEmailBody(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmbedEmailBody(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEmbedEmailBodyAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetProcessEmailOutputType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetProcessEmailOutputTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOnDemandBaseURL(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOnDemandBaseURLAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetOutputFileNameOption(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFileNameOption(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetOutputFileNameOptionAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFileNameOptionAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetOutputInfo(ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest request) {
            return base.Channel.SetOutputInfo(request);
        }
        
        public bool SetOutputInfo(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inType = inType;
            inValue.inMedia = inMedia;
            inValue.inFolder = inFolder;
            inValue.inFileName = inFileName;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetOutputInfo(inValue);
            return retVal.SetOutputInfoResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetOutputInfoAsync(ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest request) {
            return base.Channel.SetOutputInfoAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoResponse> SetOutputInfoAsync(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetOutputInfoRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inType = inType;
            inValue.inMedia = inMedia;
            inValue.inFolder = inFolder;
            inValue.inFileName = inFileName;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetOutputInfoAsync(inValue);
        }
        
        public bool SetOutputParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetOutputParameter(inUsername, inPassword, inTicketID, inParam);
        }
        
        public System.Threading.Tasks.Task<bool> SetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetOutputParameterAsync(inUsername, inPassword, inTicketID, inParam);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetOutputParameters(ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest request) {
            return base.Channel.SetOutputParameters(request);
        }
        
        public bool SetOutputParameters(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetOutputParameters(inValue);
            return retVal.SetOutputParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetOutputParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest request) {
            return base.Channel.SetOutputParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersResponse> SetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetOutputParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetOutputParametersAsync(inValue);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter GetOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetOutputParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetOutputParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetOutputParameters(ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest request) {
            return base.Channel.GetOutputParameters(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetOutputParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetOutputParameters(inValue);
            return retVal.GetOutputParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetOutputParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest request) {
            return base.Channel.GetOutputParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersResponse> GetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetOutputParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetOutputParametersAsync(inValue);
        }
        
        public bool RemoveOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveOutputParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveOutputParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public bool RemoveOutputParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveOutputParameters(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveOutputParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public bool RemoveAllOutputParameters(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllOutputParameters(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllOutputParametersAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllOutputParametersAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetAppendJobID(string inUsername, string inPassword, string inTicketID, bool inAppendJobID) {
            return base.Channel.SetAppendJobID(inUsername, inPassword, inTicketID, inAppendJobID);
        }
        
        public System.Threading.Tasks.Task<bool> SetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID, bool inAppendJobID) {
            return base.Channel.SetAppendJobIDAsync(inUsername, inPassword, inTicketID, inAppendJobID);
        }
        
        public bool SetEnvJobName(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv) {
            return base.Channel.SetEnvJobName(inUsername, inPassword, inTicketID, inEnvJobName, inIsDefaultCacheEnv);
        }
        
        public System.Threading.Tasks.Task<bool> SetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv) {
            return base.Channel.SetEnvJobNameAsync(inUsername, inPassword, inTicketID, inEnvJobName, inIsDefaultCacheEnv);
        }
        
        public bool SetOutputMedia(string inUsername, string inPassword, string inTicketID, int inMedia) {
            return base.Channel.SetOutputMedia(inUsername, inPassword, inTicketID, inMedia);
        }
        
        public System.Threading.Tasks.Task<bool> SetOutputMediaAsync(string inUsername, string inPassword, string inTicketID, int inMedia) {
            return base.Channel.SetOutputMediaAsync(inUsername, inPassword, inTicketID, inMedia);
        }
        
        public bool SetOutputType(string inUsername, string inPassword, string inTicketID, string inType) {
            return base.Channel.SetOutputType(inUsername, inPassword, inTicketID, inType);
        }
        
        public System.Threading.Tasks.Task<bool> SetOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType) {
            return base.Channel.SetOutputTypeAsync(inUsername, inPassword, inTicketID, inType);
        }
        
        public bool SetOutputFolder(string inUsername, string inPassword, string inTicketID, string inFolder) {
            return base.Channel.SetOutputFolder(inUsername, inPassword, inTicketID, inFolder);
        }
        
        public System.Threading.Tasks.Task<bool> SetOutputFolderAsync(string inUsername, string inPassword, string inTicketID, string inFolder) {
            return base.Channel.SetOutputFolderAsync(inUsername, inPassword, inTicketID, inFolder);
        }
        
        public bool SetOutputFileName(string inUsername, string inPassword, string inTicketID, string inFileName) {
            return base.Channel.SetOutputFileName(inUsername, inPassword, inTicketID, inFileName);
        }
        
        public System.Threading.Tasks.Task<bool> SetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID, string inFileName) {
            return base.Channel.SetOutputFileNameAsync(inUsername, inPassword, inTicketID, inFileName);
        }
        
        public bool GetAppendJobID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAppendJobID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAppendJobIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool GetDefaultCacheEnv(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDefaultCacheEnv(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetDefaultCacheEnvAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDefaultCacheEnvAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetEnvJobName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEnvJobName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetEnvJobNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetOutputMedia(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputMedia(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetOutputMediaAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputMediaAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetOutputType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetOutputTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetOutputFolder(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFolder(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetOutputFolderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFolderAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetOutputFileName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFileName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetOutputFileNameAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddImposition(ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest request) {
            return base.Channel.AddImposition(request);
        }
        
        public bool AddImposition(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddImposition(inValue);
            return retVal.AddImpositionResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddImpositionAsync(ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest request) {
            return base.Channel.AddImpositionAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddImpositionResponse> AddImpositionAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddImpositionRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddImpositionAsync(inValue);
        }
        
        public bool RemoveImposition(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveImposition(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveImpositionAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveImpositionAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsImpositionExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsImpositionExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsImpositionExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsImpositionExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetImpositionParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetImpositionParameter(inUsername, inPassword, inTicketID, inParam);
        }
        
        public System.Threading.Tasks.Task<bool> SetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetImpositionParameterAsync(inUsername, inPassword, inTicketID, inParam);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetImpositionParameters(ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest request) {
            return base.Channel.SetImpositionParameters(request);
        }
        
        public bool SetImpositionParameters(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetImpositionParameters(inValue);
            return retVal.SetImpositionParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetImpositionParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest request) {
            return base.Channel.SetImpositionParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersResponse> SetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetImpositionParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetImpositionParametersAsync(inValue);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter GetImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetImpositionParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetImpositionParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetImpositionParameters(ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest request) {
            return base.Channel.GetImpositionParameters(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetImpositionParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetImpositionParameters(inValue);
            return retVal.GetImpositionParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetImpositionParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest request) {
            return base.Channel.GetImpositionParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersResponse> GetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetImpositionParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetImpositionParametersAsync(inValue);
        }
        
        public bool RemoveImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveImpositionParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveImpositionParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public bool RemoveImpositionParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveImpositionParameters(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveImpositionParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public bool RemoveAllImpositionParameters(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllImpositionParameters(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllImpositionParametersAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllImpositionParametersAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddJDF(ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest request) {
            return base.Channel.AddJDF(request);
        }
        
        public bool AddJDF(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddJDF(inValue);
            return retVal.AddJDFResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.AddJDFAsync(ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest request) {
            return base.Channel.AddJDFAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AddJDFResponse> AddJDFAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.AddJDFRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).AddJDFAsync(inValue);
        }
        
        public bool RemoveJDF(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveJDF(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJDFAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveJDFAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsJDFExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsJDFExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsJDFExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetJDFParameter(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetJDFParameter(inUsername, inPassword, inTicketID, inParam);
        }
        
        public System.Threading.Tasks.Task<bool> SetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter inParam) {
            return base.Channel.SetJDFParameterAsync(inUsername, inPassword, inTicketID, inParam);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetJDFParameters(ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest request) {
            return base.Channel.SetJDFParameters(request);
        }
        
        public bool SetJDFParameters(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetJDFParameters(inValue);
            return retVal.SetJDFParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetJDFParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest request) {
            return base.Channel.SetJDFParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersResponse> SetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Parameter[] inParams) {
            ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetJDFParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParams = inParams;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetJDFParametersAsync(inValue);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter GetJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetJDFParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Parameter> GetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.GetJDFParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetJDFParameters(ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest request) {
            return base.Channel.GetJDFParameters(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Parameter[] GetJDFParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetJDFParameters(inValue);
            return retVal.GetJDFParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetJDFParametersAsync(ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest request) {
            return base.Channel.GetJDFParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersResponse> GetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetJDFParametersRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inParameterNames = inParameterNames;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetJDFParametersAsync(inValue);
        }
        
        public bool RemoveJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveJDFParameter(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            return base.Channel.RemoveJDFParameterAsync(inUsername, inPassword, inTicketID, inParameterName);
        }
        
        public bool RemoveJDFParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveJDFParameters(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            return base.Channel.RemoveJDFParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray);
        }
        
        public bool RemoveAllJDFParameters(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllJDFParameters(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllJDFParametersAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllJDFParametersAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddCompression(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC) {
            return base.Channel.AddCompression(inUsername, inPassword, inTicketID, inFileName, inIsVPC);
        }
        
        public System.Threading.Tasks.Task<bool> AddCompressionAsync(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC) {
            return base.Channel.AddCompressionAsync(inUsername, inPassword, inTicketID, inFileName, inIsVPC);
        }
        
        public bool RemoveCompression(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveCompression(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCompressionAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveCompressionAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsCompressionExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsCompressionExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsCompressionExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsCompressionExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsVPCCompression(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsVPCCompression(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsVPCCompressionAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsVPCCompressionAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddDestinationByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource) {
            return base.Channel.AddDestinationByID(inUsername, inPassword, inTicketID, inDestinationID, inDestinationParam, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddDestinationByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource) {
            return base.Channel.AddDestinationByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDestinationParam, inDeleteSource);
        }
        
        public bool AddFTP(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, string inPassWord1, bool inPassive, bool inDeleteSource) {
            return base.Channel.AddFTP(inUsername, inPassword, inTicketID, inAddress, inPort, inUser, inPassWord1, inPassive, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddFTPAsync(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, string inPassWord1, bool inPassive, bool inDeleteSource) {
            return base.Channel.AddFTPAsync(inUsername, inPassword, inTicketID, inAddress, inPort, inUser, inPassWord1, inPassive, inDeleteSource);
        }
        
        public bool AddFTPByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddFTPByID(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddFTPByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddFTPByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public bool RemoveFTP(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFTP(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFTPAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFTPAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFTPExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFTPExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFTPExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFTPExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFTPID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFTPIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFTPAddress(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPAddress(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFTPAddressAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPAddressAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetFTPPort(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPort(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetFTPPortAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPortAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFTPUser(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPUser(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFTPUserAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPUserAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFTPPassword(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPassword(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFTPPasswordAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPasswordAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool GetFTPPassive(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPassive(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetFTPPassiveAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFTPPassiveAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFTPDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFTPDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFTPDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFTPDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddUMail(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource) {
            return base.Channel.AddUMail(inUsername, inPassword, inTicketID, inTemplate, inPCWT, inPCThick, inOrigZip, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddUMailAsync(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource) {
            return base.Channel.AddUMailAsync(inUsername, inPassword, inTicketID, inTemplate, inPCWT, inPCThick, inOrigZip, inDeleteSource);
        }
        
        public bool RemoveUMail(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveUMail(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUMailAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveUMailAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsUMailExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsUMailExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsUMailExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsUMailExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetUMailTemplate(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetUMailTemplate(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetUMailTemplateAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetUMailTemplateAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetUMailOrigZip(string inUsername, string inPassword, string inOrigZip) {
            return base.Channel.GetUMailOrigZip(inUsername, inPassword, inOrigZip);
        }
        
        public System.Threading.Tasks.Task<string> GetUMailOrigZipAsync(string inUsername, string inPassword, string inOrigZip) {
            return base.Channel.GetUMailOrigZipAsync(inUsername, inPassword, inOrigZip);
        }
        
        public string GetUMailPCWT(string inUsername, string inPassword, string inPCWT) {
            return base.Channel.GetUMailPCWT(inUsername, inPassword, inPCWT);
        }
        
        public System.Threading.Tasks.Task<string> GetUMailPCWTAsync(string inUsername, string inPassword, string inPCWT) {
            return base.Channel.GetUMailPCWTAsync(inUsername, inPassword, inPCWT);
        }
        
        public string GetUMailPCThick(string inUsername, string inPassword, string inPCWT) {
            return base.Channel.GetUMailPCThick(inUsername, inPassword, inPCWT);
        }
        
        public System.Threading.Tasks.Task<string> GetUMailPCThickAsync(string inUsername, string inPassword, string inPCWT) {
            return base.Channel.GetUMailPCThickAsync(inUsername, inPassword, inPCWT);
        }
        
        public bool AddPrint(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource) {
            return base.Channel.AddPrint(inUsername, inPassword, inTicketID, inPrinter, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddPrintAsync(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource) {
            return base.Channel.AddPrintAsync(inUsername, inPassword, inTicketID, inPrinter, inDeleteSource);
        }
        
        public bool AddPrintByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddPrintByID(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddPrintByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            return base.Channel.AddPrintByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource);
        }
        
        public bool RemovePrint(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemovePrint(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePrintAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemovePrintAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsPrintExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPrintExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsPrintExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPrintExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPrintID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPrintID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPrintIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPrintIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPrinter(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPrinter(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPrinterAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPrinterAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsPrinterDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPrinterDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsPrinterDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPrinterDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool AddFFPM(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource) {
            return base.Channel.AddFFPM(inUsername, inPassword, inTicketID, inExecutionPath, inQueueSpecs, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddFFPMAsync(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource) {
            return base.Channel.AddFFPMAsync(inUsername, inPassword, inTicketID, inExecutionPath, inQueueSpecs, inDeleteSource);
        }
        
        public bool AddFFPMByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource) {
            return base.Channel.AddFFPMByID(inUsername, inPassword, inTicketID, inDestinationID, inQueueSpecs, inDeleteSource);
        }
        
        public System.Threading.Tasks.Task<bool> AddFFPMByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource) {
            return base.Channel.AddFFPMByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inQueueSpecs, inDeleteSource);
        }
        
        public bool RemoveFFPM(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFFPM(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFFPMAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveFFPMAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFFPMExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFFPMExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFFPMExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFFPMExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFFPMID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFFPMIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFFPMIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFFPMDeleteSource(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFFPMDeleteSource(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFFPMDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFFPMDeleteSourceAsync(inUsername, inPassword, inTicketID);
        }
        
        public string CreateNewTicket(string inUsername, string inPassword) {
            return base.Channel.CreateNewTicket(inUsername, inPassword);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewTicketAsync(string inUsername, string inPassword) {
            return base.Channel.CreateNewTicketAsync(inUsername, inPassword);
        }
        
        public string CreateNewTicketForDocument(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForDocument(inUsername, inPassword, inDocumentID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewTicketForDocumentAsync(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForDocumentAsync(inUsername, inPassword, inDocumentID, inRITableName, inFlatOriented);
        }
        
        public string CreateNewTicketForPlan(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForPlan(inUsername, inPassword, inPlanID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewTicketForPlanAsync(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForPlanAsync(inUsername, inPassword, inPlanID, inRITableName, inFlatOriented);
        }
        
        public string CreateNewTicketForCampaign(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForCampaign(inUsername, inPassword, inCampaignID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewTicketForCampaignAsync(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented) {
            return base.Channel.CreateNewTicketForCampaignAsync(inUsername, inPassword, inCampaignID, inRITableName, inFlatOriented);
        }
        
        public bool RecycleTicketID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RecycleTicketID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RecycleTicketIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RecycleTicketIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string LoadTicketFromFile(string inUsername, string inPassword, string inFilePath) {
            return base.Channel.LoadTicketFromFile(inUsername, inPassword, inFilePath);
        }
        
        public System.Threading.Tasks.Task<string> LoadTicketFromFileAsync(string inUsername, string inPassword, string inFilePath) {
            return base.Channel.LoadTicketFromFileAsync(inUsername, inPassword, inFilePath);
        }
        
        public string LoadJobTicket(string inUsername, string inPassword, string inJobID) {
            return base.Channel.LoadJobTicket(inUsername, inPassword, inJobID);
        }
        
        public System.Threading.Tasks.Task<string> LoadJobTicketAsync(string inUsername, string inPassword, string inJobID) {
            return base.Channel.LoadJobTicketAsync(inUsername, inPassword, inJobID);
        }
        
        public string LoadLastJobTicketOfDocument(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType) {
            return base.Channel.LoadLastJobTicketOfDocument(inUsername, inPassword, inDocumentID, inIncludeDeleted, inIncludeFailed, inJobType);
        }
        
        public System.Threading.Tasks.Task<string> LoadLastJobTicketOfDocumentAsync(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType) {
            return base.Channel.LoadLastJobTicketOfDocumentAsync(inUsername, inPassword, inDocumentID, inIncludeDeleted, inIncludeFailed, inJobType);
        }
        
        public string LoadLastJobTicketOfPlan(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed) {
            return base.Channel.LoadLastJobTicketOfPlan(inUsername, inPassword, inPlanID, inIncludeDeleted, inIncludeFailed);
        }
        
        public System.Threading.Tasks.Task<string> LoadLastJobTicketOfPlanAsync(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed) {
            return base.Channel.LoadLastJobTicketOfPlanAsync(inUsername, inPassword, inPlanID, inIncludeDeleted, inIncludeFailed);
        }
        
        public string LoadTicketFromTicket(string inUsername, string inPassword, string inTicket) {
            return base.Channel.LoadTicketFromTicket(inUsername, inPassword, inTicket);
        }
        
        public System.Threading.Tasks.Task<string> LoadTicketFromTicketAsync(string inUsername, string inPassword, string inTicket) {
            return base.Channel.LoadTicketFromTicketAsync(inUsername, inPassword, inTicket);
        }
        
        public string GetTicketPropertyFromDB(string inUsername, string inPassword, string inTicketGuid, string inProperty) {
            return base.Channel.GetTicketPropertyFromDB(inUsername, inPassword, inTicketGuid, inProperty);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketPropertyFromDBAsync(string inUsername, string inPassword, string inTicketGuid, string inProperty) {
            return base.Channel.GetTicketPropertyFromDBAsync(inUsername, inPassword, inTicketGuid, inProperty);
        }
        
        public string LoadTicketFromDB(string inUsername, string inPassword, string inTicketGuid) {
            return base.Channel.LoadTicketFromDB(inUsername, inPassword, inTicketGuid);
        }
        
        public System.Threading.Tasks.Task<string> LoadTicketFromDBAsync(string inUsername, string inPassword, string inTicketGuid) {
            return base.Channel.LoadTicketFromDBAsync(inUsername, inPassword, inTicketGuid);
        }
        
        public bool SaveTicketToFile(string inUsername, string inPassword, string inTicketID, string inFilePath) {
            return base.Channel.SaveTicketToFile(inUsername, inPassword, inTicketID, inFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> SaveTicketToFileAsync(string inUsername, string inPassword, string inTicketID, string inFilePath) {
            return base.Channel.SaveTicketToFileAsync(inUsername, inPassword, inTicketID, inFilePath);
        }
        
        public string SaveNewTicketToDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate) {
            return base.Channel.SaveNewTicketToDB(inUsername, inPassword, inTicketID, inTicketName, inAccountID, inIsTemplate);
        }
        
        public System.Threading.Tasks.Task<string> SaveNewTicketToDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate) {
            return base.Channel.SaveNewTicketToDBAsync(inUsername, inPassword, inTicketID, inTicketName, inAccountID, inIsTemplate);
        }
        
        public bool OverwriteTicketInDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid) {
            return base.Channel.OverwriteTicketInDB(inUsername, inPassword, inTicketID, inTicketName, inTicketGuid);
        }
        
        public System.Threading.Tasks.Task<bool> OverwriteTicketInDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid) {
            return base.Channel.OverwriteTicketInDBAsync(inUsername, inPassword, inTicketID, inTicketName, inTicketGuid);
        }
        
        public bool DeleteTicketFromDB(string inUsername, string inPassword, string inTicketGUID) {
            return base.Channel.DeleteTicketFromDB(inUsername, inPassword, inTicketGUID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTicketFromDBAsync(string inUsername, string inPassword, string inTicketGUID) {
            return base.Channel.DeleteTicketFromDBAsync(inUsername, inPassword, inTicketGUID);
        }
        
        public System.Data.DataSet GetTicketsFromDB(string inUsername, string inPassword, string inJobType) {
            return base.Channel.GetTicketsFromDB(inUsername, inPassword, inJobType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTicketsFromDBAsync(string inUsername, string inPassword, string inJobType) {
            return base.Channel.GetTicketsFromDBAsync(inUsername, inPassword, inJobType);
        }
        
        public System.Data.DataSet GetTemplatesFromDB(string inUsername, string inPassword, string inJobType, string inAccountID) {
            return base.Channel.GetTemplatesFromDB(inUsername, inPassword, inJobType, inAccountID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTemplatesFromDBAsync(string inUsername, string inPassword, string inJobType, string inAccountID) {
            return base.Channel.GetTemplatesFromDBAsync(inUsername, inPassword, inJobType, inAccountID);
        }
        
        public string GetTicket(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTicket(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTicketAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetTicketAndRecycleID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTicketAndRecycleID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketAndRecycleIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetTicketAndRecycleIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetTicketDefaultsForDocument(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForDocument(inUsername, inPassword, inTicketID, inDocumentID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> SetTicketDefaultsForDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForDocumentAsync(inUsername, inPassword, inTicketID, inDocumentID, inRITableName, inFlatOriented);
        }
        
        public bool SetTicketDefaultsForPlan(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForPlan(inUsername, inPassword, inTicketID, inPlanID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> SetTicketDefaultsForPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForPlanAsync(inUsername, inPassword, inTicketID, inPlanID, inRITableName, inFlatOriented);
        }
        
        public bool SetTicketDefaultsForCampaign(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForCampaign(inUsername, inPassword, inTicketID, inCampaignID, inRITableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> SetTicketDefaultsForCampaignAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented) {
            return base.Channel.SetTicketDefaultsForCampaignAsync(inUsername, inPassword, inTicketID, inCampaignID, inRITableName, inFlatOriented);
        }
        
        public bool SetPlan(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial) {
            return base.Channel.SetPlan(inUsername, inPassword, inTicketID, inPlanFilePath, inUseTrivial);
        }
        
        public System.Threading.Tasks.Task<bool> SetPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial) {
            return base.Channel.SetPlanAsync(inUsername, inPassword, inTicketID, inPlanFilePath, inUseTrivial);
        }
        
        public bool SetPlanByID(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial) {
            return base.Channel.SetPlanByID(inUsername, inPassword, inTicketID, inPlanID, inUseTrivial);
        }
        
        public System.Threading.Tasks.Task<bool> SetPlanByIDAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial) {
            return base.Channel.SetPlanByIDAsync(inUsername, inPassword, inTicketID, inPlanID, inUseTrivial);
        }
        
        public bool GetUseTrivialPlan(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetUseTrivialPlan(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetUseTrivialPlanAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetUseTrivialPlan(string inUsername, string inPassword, string inTicketID, bool inUseTrivial) {
            return base.Channel.SetUseTrivialPlan(inUsername, inPassword, inTicketID, inUseTrivial);
        }
        
        public System.Threading.Tasks.Task<bool> SetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID, bool inUseTrivial) {
            return base.Channel.SetUseTrivialPlanAsync(inUsername, inPassword, inTicketID, inUseTrivial);
        }
        
        public string GetPlanPath(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPlanPath(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanPathAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPlanPathAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPlanID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPlanID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPlanIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetCustomization(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization inCustomization, bool expressionAsValue) {
            return base.Channel.SetCustomization(inUsername, inPassword, inTicketID, inCustomization, expressionAsValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetCustomizationAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization inCustomization, bool expressionAsValue) {
            return base.Channel.SetCustomizationAsync(inUsername, inPassword, inTicketID, inCustomization, expressionAsValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetCustomizations(ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest request) {
            return base.Channel.SetCustomizations(request);
        }
        
        public bool SetCustomizations(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization[] inCustomizations, bool expressionAsValue) {
            ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inCustomizations = inCustomizations;
            inValue.expressionAsValue = expressionAsValue;
            ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetCustomizations(inValue);
            return retVal.SetCustomizationsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetCustomizationsAsync(ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest request) {
            return base.Channel.SetCustomizationsAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsResponse> SetCustomizationsAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.Customization[] inCustomizations, bool expressionAsValue) {
            ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetCustomizationsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inCustomizations = inCustomizations;
            inValue.expressionAsValue = expressionAsValue;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetCustomizationsAsync(inValue);
        }
        
        public bool RemoveCustomization(string inUsername, string inPassword, string inTicketID, string inName, string inType) {
            return base.Channel.RemoveCustomization(inUsername, inPassword, inTicketID, inName, inType);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCustomizationAsync(string inUsername, string inPassword, string inTicketID, string inName, string inType) {
            return base.Channel.RemoveCustomizationAsync(inUsername, inPassword, inTicketID, inName, inType);
        }
        
        public bool RemoveAllCustomizations(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllCustomizations(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllCustomizationsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllCustomizationsAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetCustomizationsCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCustomizationsCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetCustomizationsCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCustomizationsCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Customization GetNthCustomization(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex) {
            return base.Channel.GetNthCustomization(inUsername, inPassword, inTicketID, inCustomizationIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Customization> GetNthCustomizationAsync(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex) {
            return base.Channel.GetNthCustomizationAsync(inUsername, inPassword, inTicketID, inCustomizationIndex);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetCustomizations(ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest request) {
            return base.Channel.GetCustomizations(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Customization[] GetCustomizations(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetCustomizations(inValue);
            return retVal.GetCustomizationsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetCustomizationsAsync(ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest request) {
            return base.Channel.GetCustomizationsAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsResponse> GetCustomizationsAsync(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetCustomizationsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetCustomizationsAsync(inValue);
        }
        
        public bool SetDocumentByID(string inUsername, string inPassword, string inTicketID, string inDocumentID) {
            return base.Channel.SetDocumentByID(inUsername, inPassword, inTicketID, inDocumentID);
        }
        
        public System.Threading.Tasks.Task<bool> SetDocumentByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID) {
            return base.Channel.SetDocumentByIDAsync(inUsername, inPassword, inTicketID, inDocumentID);
        }
        
        public bool SetDocument(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType) {
            return base.Channel.SetDocument(inUsername, inPassword, inTicketID, inDocumentFolder, inDocumentName, inDocumentType);
        }
        
        public System.Threading.Tasks.Task<bool> SetDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType) {
            return base.Channel.SetDocumentAsync(inUsername, inPassword, inTicketID, inDocumentFolder, inDocumentName, inDocumentType);
        }
        
        public string GetDocumentID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetDocumentFolder(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentFolder(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentFolderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentFolderAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetDocumentName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetDocumentType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetDocumentTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath) {
            return base.Channel.SetWebResourcesBasePath(inUsername, inPassword, inTicketID, inWebResourcesBasePath);
        }
        
        public System.Threading.Tasks.Task<bool> SetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath) {
            return base.Channel.SetWebResourcesBasePathAsync(inUsername, inPassword, inTicketID, inWebResourcesBasePath);
        }
        
        public string GetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetWebResourcesBasePath(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetWebResourcesBasePathAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetAllowFriendly(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly) {
            return base.Channel.SetAllowFriendly(inUsername, inPassword, inTicketID, inAllowFriendly);
        }
        
        public System.Threading.Tasks.Task<bool> SetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly) {
            return base.Channel.SetAllowFriendlyAsync(inUsername, inPassword, inTicketID, inAllowFriendly);
        }
        
        public bool GetAllowFriendly(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAllowFriendly(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAllowFriendlyAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetFriendliness(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix) {
            return base.Channel.SetFriendliness(inUsername, inPassword, inTicketID, inFriendlyDomain, inFriendlyFolder, inFriendlyLandingPage, inFriendlyRedirectMode, inFriendlyRIDPrefix);
        }
        
        public System.Threading.Tasks.Task<bool> SetFriendlinessAsync(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix) {
            return base.Channel.SetFriendlinessAsync(inUsername, inPassword, inTicketID, inFriendlyDomain, inFriendlyFolder, inFriendlyLandingPage, inFriendlyRedirectMode, inFriendlyRIDPrefix);
        }
        
        public string GetFriendlyDomain(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyDomain(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFriendlyDomainAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyDomainAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFriendlyFolder(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyFolder(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFriendlyFolderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyFolderAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetFriendlyLandingPage(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyLandingPage(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFriendlyLandingPageAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFriendlyLandingPageAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFriendlyUrlRedirectMode(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFriendlyUrlRedirectMode(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFriendlyUrlRedirectModeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFriendlyUrlRedirectModeAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsFriendlyUrlUseRIDPrefixMode(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFriendlyUrlUseRIDPrefixMode(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFriendlyUrlUseRIDPrefixModeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsFriendlyUrlUseRIDPrefixModeAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetCampaignID(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetCampaignID(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public System.Threading.Tasks.Task<bool> SetCampaignIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetCampaignIDAsync(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public string GetCampaignID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCampaignID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetCampaignIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetCampaignIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetFonts(string inUsername, string inPassword, string inTicketID, string inFontsFolder) {
            return base.Channel.SetFonts(inUsername, inPassword, inTicketID, inFontsFolder);
        }
        
        public System.Threading.Tasks.Task<bool> SetFontsAsync(string inUsername, string inPassword, string inTicketID, string inFontsFolder) {
            return base.Channel.SetFontsAsync(inUsername, inPassword, inTicketID, inFontsFolder);
        }
        
        public bool SetFontsByID(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetFontsByID(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public System.Threading.Tasks.Task<bool> SetFontsByIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetFontsByIDAsync(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public string GetFontsFolder(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFontsFolder(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetFontsFolderAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetFontsFolderAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetPortLink(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName) {
            return base.Channel.SetPortLink(inUsername, inPassword, inTicketID, inAccountName, inCampaignName, inPortName);
        }
        
        public System.Threading.Tasks.Task<bool> SetPortLinkAsync(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName) {
            return base.Channel.SetPortLinkAsync(inUsername, inPassword, inTicketID, inAccountName, inCampaignName, inPortName);
        }
        
        public bool RefreshPortLink(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RefreshPortLink(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RefreshPortLinkAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RefreshPortLinkAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool RemovePortLink(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemovePortLink(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePortLinkAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemovePortLinkAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool IsPortLinkExist(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPortLinkExist(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> IsPortLinkExistAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.IsPortLinkExistAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPortLinkAccount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkAccount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPortLinkAccountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkAccountAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPortLinkCampaign(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkCampaign(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPortLinkCampaignAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkCampaignAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetPortLinkPortName(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkPortName(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPortLinkPortNameAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPortLinkPortNameAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.SetDataSource(inUsername, inPassword, inTicketID, inSchemaName, inConnection);
        }
        
        public System.Threading.Tasks.Task<bool> SetDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.SetDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName, inConnection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetDataSources(ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest request) {
            return base.Channel.SetDataSources(request);
        }
        
        public bool SetDataSources(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inSchemaNameArray = inSchemaNameArray;
            inValue.inConnections = inConnections;
            ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetDataSources(inValue);
            return retVal.SetDataSourcesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetDataSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest request) {
            return base.Channel.SetDataSourcesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesResponse> SetDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetDataSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inSchemaNameArray = inSchemaNameArray;
            inValue.inConnections = inConnections;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetDataSourcesAsync(inValue);
        }
        
        public bool SetDataSourceByID(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID) {
            return base.Channel.SetDataSourceByID(inUsername, inPassword, inTicketID, inSchemaName, inDataSourceID);
        }
        
        public System.Threading.Tasks.Task<bool> SetDataSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID) {
            return base.Channel.SetDataSourceByIDAsync(inUsername, inPassword, inTicketID, inSchemaName, inDataSourceID);
        }
        
        public bool SetDataSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray) {
            return base.Channel.SetDataSourcesByID(inUsername, inPassword, inTicketID, inSchemaNameArray, inDataSourceIDArray);
        }
        
        public System.Threading.Tasks.Task<bool> SetDataSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray) {
            return base.Channel.SetDataSourcesByIDAsync(inUsername, inPassword, inTicketID, inSchemaNameArray, inDataSourceIDArray);
        }
        
        public bool SetDefaultDataSources(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented) {
            return base.Channel.SetDefaultDataSources(inUsername, inPassword, inTicketID, inCampaignID, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> SetDefaultDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented) {
            return base.Channel.SetDefaultDataSourcesAsync(inUsername, inPassword, inTicketID, inCampaignID, inFlatOriented);
        }
        
        public bool RemoveAllSchemaDataSources(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllSchemaDataSources(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllSchemaDataSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllSchemaDataSourcesAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool RemoveSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.RemoveSchemaDataSource(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.RemoveSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Connection GetSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.GetSchemaDataSource(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.GetSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public string GetSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.GetSchemaDataSourceID(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public System.Threading.Tasks.Task<string> GetSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            return base.Channel.GetSchemaDataSourceIDAsync(inUsername, inPassword, inTicketID, inSchemaName);
        }
        
        public string[] GetSchemasNames(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemasNames(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSchemasNamesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemasNamesAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetSchemasDataSources(ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest request) {
            return base.Channel.GetSchemasDataSources(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Connection[] GetSchemasDataSources(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetSchemasDataSources(inValue);
            return retVal.GetSchemasDataSourcesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetSchemasDataSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest request) {
            return base.Channel.GetSchemasDataSourcesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesResponse> GetSchemasDataSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetSchemasDataSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetSchemasDataSourcesAsync(inValue);
        }
        
        public string[] GetSchemaDataSourceIDs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemaDataSourceIDs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSchemaDataSourceIDsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemaDataSourceIDsAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetSchemaDataSourcesCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemaDataSourcesCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetSchemaDataSourcesCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetSchemaDataSourcesCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetNthSchemaName(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaName(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthSchemaNameAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaNameAsync(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public string GetNthSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaDataSourceID(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaDataSourceIDAsync(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.Connection GetNthSchemaDataSource(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaDataSource(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.Connection> GetNthSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            return base.Channel.GetNthSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaIndex);
        }
        
        public bool SetResolveAssets(string inUsername, string inPassword, string inTicketID, bool inResolved) {
            return base.Channel.SetResolveAssets(inUsername, inPassword, inTicketID, inResolved);
        }
        
        public System.Threading.Tasks.Task<bool> SetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inResolved) {
            return base.Channel.SetResolveAssetsAsync(inUsername, inPassword, inTicketID, inResolved);
        }
        
        public bool GetResolveAssets(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetResolveAssets(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetResolveAssetsAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetConnectivityAssets(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity) {
            return base.Channel.SetConnectivityAssets(inUsername, inPassword, inTicketID, inUseConnectivity);
        }
        
        public System.Threading.Tasks.Task<bool> SetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity) {
            return base.Channel.SetConnectivityAssetsAsync(inUsername, inPassword, inTicketID, inUseConnectivity);
        }
        
        public bool GetConnectivityAssets(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetConnectivityAssets(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> GetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetConnectivityAssetsAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetAssetsPrefix(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix) {
            return base.Channel.SetAssetsPrefix(inUsername, inPassword, inTicketID, inPrefixType, inFiexedPrefix);
        }
        
        public System.Threading.Tasks.Task<bool> SetAssetsPrefixAsync(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix) {
            return base.Channel.SetAssetsPrefixAsync(inUsername, inPassword, inTicketID, inPrefixType, inFiexedPrefix);
        }
        
        public string GetAssetsPrefixType(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetsPrefixType(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetAssetsPrefixTypeAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetsPrefixTypeAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetAssetsFixedPrefix(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetsFixedPrefix(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetAssetsFixedPrefixAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetsFixedPrefixAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetAssetSource(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct inAssetSourceInfo, int inPriority) {
            return base.Channel.SetAssetSource(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority);
        }
        
        public System.Threading.Tasks.Task<bool> SetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct inAssetSourceInfo, int inPriority) {
            return base.Channel.SetAssetSourceAsync(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority);
        }
        
        public bool SetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo inAssetSourceInfo, int inPriority) {
            return base.Channel.SetAssetSourceEx(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority);
        }
        
        public System.Threading.Tasks.Task<bool> SetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo inAssetSourceInfo, int inPriority) {
            return base.Channel.SetAssetSourceExAsync(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetAssetSources(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest request) {
            return base.Channel.SetAssetSources(request);
        }
        
        public bool SetAssetSources(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] inAssetSources, int[] inPriorities) {
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inNames = inNames;
            inValue.inAssetSources = inAssetSources;
            inValue.inPriorities = inPriorities;
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetAssetSources(inValue);
            return retVal.SetAssetSourcesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetAssetSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest request) {
            return base.Channel.SetAssetSourcesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesResponse> SetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] inAssetSources, int[] inPriorities) {
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inNames = inNames;
            inValue.inAssetSources = inAssetSources;
            inValue.inPriorities = inPriorities;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetAssetSourcesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetAssetSourcesEx(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest request) {
            return base.Channel.SetAssetSourcesEx(request);
        }
        
        public bool SetAssetSourcesEx(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] inAssetSources, int[] inPriorities) {
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inNames = inNames;
            inValue.inAssetSources = inAssetSources;
            inValue.inPriorities = inPriorities;
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetAssetSourcesEx(inValue);
            return retVal.SetAssetSourcesExResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetAssetSourcesExAsync(ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest request) {
            return base.Channel.SetAssetSourcesExAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExResponse> SetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] inAssetSources, int[] inPriorities) {
            ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetAssetSourcesExRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inNames = inNames;
            inValue.inAssetSources = inAssetSources;
            inValue.inPriorities = inPriorities;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetAssetSourcesExAsync(inValue);
        }
        
        public bool SetAssetSourceByID(string inUsername, string inPassword, string inTicketID, string inAssetSourceID) {
            return base.Channel.SetAssetSourceByID(inUsername, inPassword, inTicketID, inAssetSourceID);
        }
        
        public System.Threading.Tasks.Task<bool> SetAssetSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inAssetSourceID) {
            return base.Channel.SetAssetSourceByIDAsync(inUsername, inPassword, inTicketID, inAssetSourceID);
        }
        
        public bool SetAssetSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray) {
            return base.Channel.SetAssetSourcesByID(inUsername, inPassword, inTicketID, inAssetSourceIDArray);
        }
        
        public System.Threading.Tasks.Task<bool> SetAssetSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray) {
            return base.Channel.SetAssetSourcesByIDAsync(inUsername, inPassword, inTicketID, inAssetSourceIDArray);
        }
        
        public bool SetDefaultAssetSources(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetDefaultAssetSources(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public System.Threading.Tasks.Task<bool> SetDefaultAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            return base.Channel.SetDefaultAssetSourcesAsync(inUsername, inPassword, inTicketID, inCampaignID);
        }
        
        public bool RemoveAllAssetSources(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllAssetSources(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllAssetSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllAssetSourcesAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool RemoveAssetSource(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.RemoveAssetSource(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.RemoveAssetSourceAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct GetAssetSource(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSource(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct> GetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourceAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo GetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourceEx(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo> GetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourceExAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public string GetAssetSourceID(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourceID(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<string> GetAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourceIDAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public int GetAssetSourcePriority(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourcePriority(inUsername, inPassword, inTicketID, inName);
        }
        
        public System.Threading.Tasks.Task<int> GetAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            return base.Channel.GetAssetSourcePriorityAsync(inUsername, inPassword, inTicketID, inName);
        }
        
        public string[] GetAssetSourcesNames(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesNames(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAssetSourcesNamesAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesNamesAsync(inUsername, inPassword, inTicketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAssetSources(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest request) {
            return base.Channel.GetAssetSources(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct[] GetAssetSources(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAssetSources(inValue);
            return retVal.GetAssetSourcesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAssetSourcesAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest request) {
            return base.Channel.GetAssetSourcesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesResponse> GetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAssetSourcesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAssetSourcesEx(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest request) {
            return base.Channel.GetAssetSourcesEx(request);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo[] GetAssetSourcesEx(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAssetSourcesEx(inValue);
            return retVal.GetAssetSourcesExResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.GetAssetSourcesExAsync(ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest request) {
            return base.Channel.GetAssetSourcesExAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExResponse> GetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID) {
            ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.GetAssetSourcesExRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).GetAssetSourcesExAsync(inValue);
        }
        
        public string[] GetAssetSourcesIDs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesIDs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAssetSourcesIDsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesIDsAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetAssetSourcesCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetAssetSourcesCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetAssetSourcesCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetNthAssetSourceName(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceName(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthAssetSourceNameAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceNameAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct GetNthAssetSource(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSource(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceStruct> GetNthAssetSourceAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo GetNthAssetSourceEx(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceEx(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.AssetSourceInfo> GetNthAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceExAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public string GetNthAssetSourceID(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceID(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourceIDAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public int GetNthAssetSourcePriority(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourcePriority(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public System.Threading.Tasks.Task<int> GetNthAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            return base.Channel.GetNthAssetSourcePriorityAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex);
        }
        
        public string GetPopulationGUID(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPopulationGUID(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<string> GetPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetPopulationGUIDAsync(inUsername, inPassword, inTicketID);
        }
        
        public bool SetRIRange(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo) {
            return base.Channel.SetRIRange(inUsername, inPassword, inTicketID, inRangeFrom, inRangeTo);
        }
        
        public System.Threading.Tasks.Task<bool> SetRIRangeAsync(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo) {
            return base.Channel.SetRIRangeAsync(inUsername, inPassword, inTicketID, inRangeFrom, inRangeTo);
        }
        
        public bool SetRI(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.SetRI(inUsername, inPassword, inTicketID, inRIInfo, inConnection);
        }
        
        public System.Threading.Tasks.Task<bool> SetRIAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, ArtFactory.Proofer.XmPie.JobTicket.Connection inConnection) {
            return base.Channel.SetRIAsync(inUsername, inPassword, inTicketID, inRIInfo, inConnection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetRIs(ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest request) {
            return base.Channel.SetRIs(request);
        }
        
        public bool SetRIs(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inRIInfos = inRIInfos;
            inValue.inConnections = inConnections;
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetRIs(inValue);
            return retVal.SetRIsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetRIsAsync(ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest request) {
            return base.Channel.SetRIsAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsResponse> SetRIsAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, ArtFactory.Proofer.XmPie.JobTicket.Connection[] inConnections) {
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetRIsRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inRIInfos = inRIInfos;
            inValue.inConnections = inConnections;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetRIsAsync(inValue);
        }
        
        public bool SetRIByID(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID) {
            return base.Channel.SetRIByID(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID);
        }
        
        public System.Threading.Tasks.Task<bool> SetRIByIDAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo inRIInfo, string inDataSourceID) {
            return base.Channel.SetRIByIDAsync(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID);
        }
        
        public bool SetRIByPopulationGUID(string inUsername, string inPassword, string inTicketID, string inPopulationGuid) {
            return base.Channel.SetRIByPopulationGUID(inUsername, inPassword, inTicketID, inPopulationGuid);
        }
        
        public System.Threading.Tasks.Task<bool> SetRIByPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID, string inPopulationGuid) {
            return base.Channel.SetRIByPopulationGUIDAsync(inUsername, inPassword, inTicketID, inPopulationGuid);
        }
        
        public bool SetInfoByRunGUID(string inUsername, string inPassword, string inTicketID, string inRunGUID) {
            return base.Channel.SetInfoByRunGUID(inUsername, inPassword, inTicketID, inRunGUID);
        }
        
        public System.Threading.Tasks.Task<bool> SetInfoByRunGUIDAsync(string inUsername, string inPassword, string inTicketID, string inRunGUID) {
            return base.Channel.SetInfoByRunGUIDAsync(inUsername, inPassword, inTicketID, inRunGUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetRIsByID(ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest request) {
            return base.Channel.SetRIsByID(request);
        }
        
        public bool SetRIsByID(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray) {
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inRIInfos = inRIInfos;
            inValue.inDataSourceIDArray = inDataSourceIDArray;
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse retVal = ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetRIsByID(inValue);
            return retVal.SetRIsByIDResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse> ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap.SetRIsByIDAsync(ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest request) {
            return base.Channel.SetRIsByIDAsync(request);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDResponse> SetRIsByIDAsync(string inUsername, string inPassword, string inTicketID, ArtFactory.Proofer.XmPie.JobTicket.RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray) {
            ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest inValue = new ArtFactory.Proofer.XmPie.JobTicket.SetRIsByIDRequest();
            inValue.inUsername = inUsername;
            inValue.inPassword = inPassword;
            inValue.inTicketID = inTicketID;
            inValue.inRIInfos = inRIInfos;
            inValue.inDataSourceIDArray = inDataSourceIDArray;
            return ((ArtFactory.Proofer.XmPie.JobTicket.JobTicket_SSPSoap)(this)).SetRIsByIDAsync(inValue);
        }
        
        public bool SetDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            return base.Channel.SetDefaultRI(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented);
        }
        
        public System.Threading.Tasks.Task<bool> SetDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            return base.Channel.SetDefaultRIAsync(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented);
        }
        
        public bool RemoveAllRIs(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllRIs(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAllRIsAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.RemoveAllRIsAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetRIsCount(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIsCount(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetRIsCountAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIsCountAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetRIFrom(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIFrom(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetRIFromAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIFromAsync(inUsername, inPassword, inTicketID);
        }
        
        public int GetRITo(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRITo(inUsername, inPassword, inTicketID);
        }
        
        public System.Threading.Tasks.Task<int> GetRIToAsync(string inUsername, string inPassword, string inTicketID) {
            return base.Channel.GetRIToAsync(inUsername, inPassword, inTicketID);
        }
        
        public string GetNthRIRecipientIDListFileName(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIRecipientIDListFileName(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public System.Threading.Tasks.Task<string> GetNthRIRecipientIDListFileNameAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIRecipientIDListFileNameAsync(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public ArtFactory.Proofer.XmPie.JobTicket.ERecipientIDListMergeType GetNthRIRecipientIDListMergeType(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIRecipientIDListMergeType(inUsername, inPassword, inTicketID, inRIIndex);
        }
        
        public System.Threading.Tasks.Task<ArtFactory.Proofer.XmPie.JobTicket.ERecipientIDListMergeType> GetNthRIRecipientIDListMergeTypeAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            return base.Channel.GetNthRIRecipientIDListMergeTypeAsync(inUsername, inPassword, inTicketID, inRIIndex);
        }
    }
}
