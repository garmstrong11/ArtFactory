//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ArtFactory.Experimental.JobTicket {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="JobTicket_SSPSoap", Namespace="XMPieWSAPI")]
    public partial class JobTicket_SSP : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFFPMExecutablePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFFPMQueueSpecsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteCopyByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRemoteCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRemoteCopyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteCopyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteCopyDestinationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRemoteCopyDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSecondaryRemoteCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSecondaryRemoteCopyByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSecondaryRemoteCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSecondaryRemoteCopyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecondaryRemoteCopyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecondaryRemoteCopyDestinationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSecondaryRemoteCopyDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddJDFCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddJDFCopyByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJDFCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsJDFCopyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJDFCopyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJDFCopyDestinationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsJDFCopyDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDistillJobOptionNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsJobTrackedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTouchPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTouchPointIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTrackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTrackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTrackingParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTrackingParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackingParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackingParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTrackingParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTrackingParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllTrackingParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTrackingADOROperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackingADORsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCircleTouchpointGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCircleTouchpointGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCircleRunGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCircleRunGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDeliveryProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDeliveryProviderByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeliveryProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeliveryProviderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailBodiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailBodyByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailBodiesByIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailBodyByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllEmailBodiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailBodiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailBodiesIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailBodyCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthEmailBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthEmailBodyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetaDataSubGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMetaDataGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMappingExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldMappingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFieldMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFieldMappingByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFieldMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthRIInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthRIDataSourceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthRIDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRIOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRIByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDefaultRIOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIOnDemandInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIOnDemandRecipientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIOnDemandRecipientInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobTrackingWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobTrackingWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobReportingWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobReportingWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSplittedJobInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSplittedJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsParallelProcessingJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAutomaticSubSplitAndMergeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAutomaticSubSplitEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAutomaticMergeEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSubJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobOrigFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobOrigToOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobSplitCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubJobSplitTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJobParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJobParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJobParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllJobParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmailAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSenderAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSubjectAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmbedEmailBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetProcessEmailOutputTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOnDemandBaseURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSenderAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubjectAdorNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmbedEmailBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessEmailOutputTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnDemandBaseURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputFileNameOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveOutputParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveOutputParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllOutputParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAppendJobIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnvJobNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputMediaOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOutputFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppendJobIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultCacheEnvOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnvJobNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputMediaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutputFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddImpositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveImpositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsImpositionExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetImpositionParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetImpositionParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImpositionParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImpositionParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveImpositionParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveImpositionParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllImpositionParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddJDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsJDFExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJDFParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetJDFParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJDFParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJDFParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJDFParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveJDFParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllJDFParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCompressionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCompressionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCompressionExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsVPCCompressionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDestinationByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFTPByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFTPExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPPassiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFTPDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUMailExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUMailTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUMailOrigZipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUMailPCWTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUMailPCThickOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrintByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPrintExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrintIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrinterOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPrinterDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFFPMOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFFPMByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFFPMOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFFPMExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFFPMIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFFPMDeleteSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTicketForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTicketForPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTicketForCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecycleTicketIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTicketFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadJobTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadLastJobTicketOfDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadLastJobTicketOfPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTicketFromTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketPropertyFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTicketFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTicketToFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewTicketToDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback OverwriteTicketInDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTicketFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplatesFromDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketAndRecycleIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTicketDefaultsForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTicketDefaultsForPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTicketDefaultsForCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPlanByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUseTrivialPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUseTrivialPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlanPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlanIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomizationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCustomizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllCustomizationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomizationsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthCustomizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomizationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDocumentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebResourcesBasePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebResourcesBasePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAllowFriendlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllowFriendlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFriendlinessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendlyDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendlyFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFriendlyLandingPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFriendlyUrlRedirectModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFriendlyUrlUseRIDPrefixModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCampaignIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCampaignIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFontsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFontsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFontsFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPortLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshPortLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePortLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPortLinkExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortLinkAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortLinkCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortLinkPortNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataSourceByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataSourcesByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultDataSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllSchemaDataSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSchemaDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaDataSourceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemasNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemasDataSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaDataSourceIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaDataSourcesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthSchemaNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthSchemaDataSourceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthSchemaDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetResolveAssetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResolveAssetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetConnectivityAssetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConnectivityAssetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetsPrefixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetsPrefixTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetsFixedPrefixOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourcesExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourceByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssetSourcesByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultAssetSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllAssetSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAssetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcePriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcesNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcesExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcesIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssetSourcesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthAssetSourceNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthAssetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthAssetSourceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthAssetSourceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthAssetSourcePriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPopulationGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIByPopulationGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetInfoByRunGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRIsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultRIOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAllRIsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRIToOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthRIRecipientIDListFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNthRIRecipientIDListMergeTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public JobTicket_SSP() {
            this.Url = global::ArtFactory.Experimental.Properties.Settings.Default.ArtFactory_Experimental_JobTicket_JobTicket_SSP;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFFPMExecutablePathCompletedEventHandler GetFFPMExecutablePathCompleted;
        
        /// <remarks/>
        public event GetFFPMQueueSpecsCompletedEventHandler GetFFPMQueueSpecsCompleted;
        
        /// <remarks/>
        public event AddRemoteCopyCompletedEventHandler AddRemoteCopyCompleted;
        
        /// <remarks/>
        public event AddRemoteCopyByIDCompletedEventHandler AddRemoteCopyByIDCompleted;
        
        /// <remarks/>
        public event RemoveRemoteCopyCompletedEventHandler RemoveRemoteCopyCompleted;
        
        /// <remarks/>
        public event IsRemoteCopyExistCompletedEventHandler IsRemoteCopyExistCompleted;
        
        /// <remarks/>
        public event GetRemoteCopyIDCompletedEventHandler GetRemoteCopyIDCompleted;
        
        /// <remarks/>
        public event GetRemoteCopyDestinationCompletedEventHandler GetRemoteCopyDestinationCompleted;
        
        /// <remarks/>
        public event IsRemoteCopyDeleteSourceCompletedEventHandler IsRemoteCopyDeleteSourceCompleted;
        
        /// <remarks/>
        public event AddSecondaryRemoteCopyCompletedEventHandler AddSecondaryRemoteCopyCompleted;
        
        /// <remarks/>
        public event AddSecondaryRemoteCopyByIDCompletedEventHandler AddSecondaryRemoteCopyByIDCompleted;
        
        /// <remarks/>
        public event RemoveSecondaryRemoteCopyCompletedEventHandler RemoveSecondaryRemoteCopyCompleted;
        
        /// <remarks/>
        public event IsSecondaryRemoteCopyExistCompletedEventHandler IsSecondaryRemoteCopyExistCompleted;
        
        /// <remarks/>
        public event GetSecondaryRemoteCopyIDCompletedEventHandler GetSecondaryRemoteCopyIDCompleted;
        
        /// <remarks/>
        public event GetSecondaryRemoteCopyDestinationCompletedEventHandler GetSecondaryRemoteCopyDestinationCompleted;
        
        /// <remarks/>
        public event IsSecondaryRemoteCopyDeleteSourceCompletedEventHandler IsSecondaryRemoteCopyDeleteSourceCompleted;
        
        /// <remarks/>
        public event AddJDFCopyCompletedEventHandler AddJDFCopyCompleted;
        
        /// <remarks/>
        public event AddJDFCopyByIDCompletedEventHandler AddJDFCopyByIDCompleted;
        
        /// <remarks/>
        public event RemoveJDFCopyCompletedEventHandler RemoveJDFCopyCompleted;
        
        /// <remarks/>
        public event IsJDFCopyExistCompletedEventHandler IsJDFCopyExistCompleted;
        
        /// <remarks/>
        public event GetJDFCopyIDCompletedEventHandler GetJDFCopyIDCompleted;
        
        /// <remarks/>
        public event GetJDFCopyDestinationCompletedEventHandler GetJDFCopyDestinationCompleted;
        
        /// <remarks/>
        public event IsJDFCopyDeleteSourceCompletedEventHandler IsJDFCopyDeleteSourceCompleted;
        
        /// <remarks/>
        public event SetDistillJobOptionNameCompletedEventHandler SetDistillJobOptionNameCompleted;
        
        /// <remarks/>
        public event IsJobTrackedCompletedEventHandler IsJobTrackedCompleted;
        
        /// <remarks/>
        public event SetTouchPointIDCompletedEventHandler SetTouchPointIDCompleted;
        
        /// <remarks/>
        public event GetTouchPointIDCompletedEventHandler GetTouchPointIDCompleted;
        
        /// <remarks/>
        public event AddTrackingCompletedEventHandler AddTrackingCompleted;
        
        /// <remarks/>
        public event RemoveTrackingCompletedEventHandler RemoveTrackingCompleted;
        
        /// <remarks/>
        public event SetTrackingParameterCompletedEventHandler SetTrackingParameterCompleted;
        
        /// <remarks/>
        public event SetTrackingParametersCompletedEventHandler SetTrackingParametersCompleted;
        
        /// <remarks/>
        public event GetTrackingParameterCompletedEventHandler GetTrackingParameterCompleted;
        
        /// <remarks/>
        public event GetTrackingParametersCompletedEventHandler GetTrackingParametersCompleted;
        
        /// <remarks/>
        public event RemoveTrackingParameterCompletedEventHandler RemoveTrackingParameterCompleted;
        
        /// <remarks/>
        public event RemoveTrackingParametersCompletedEventHandler RemoveTrackingParametersCompleted;
        
        /// <remarks/>
        public event RemoveAllTrackingParametersCompletedEventHandler RemoveAllTrackingParametersCompleted;
        
        /// <remarks/>
        public event IsTrackingADORCompletedEventHandler IsTrackingADORCompleted;
        
        /// <remarks/>
        public event GetTrackingADORsCompletedEventHandler GetTrackingADORsCompleted;
        
        /// <remarks/>
        public event SetCircleTouchpointGuidCompletedEventHandler SetCircleTouchpointGuidCompleted;
        
        /// <remarks/>
        public event GetCircleTouchpointGuidCompletedEventHandler GetCircleTouchpointGuidCompleted;
        
        /// <remarks/>
        public event SetCircleRunGuidCompletedEventHandler SetCircleRunGuidCompleted;
        
        /// <remarks/>
        public event GetCircleRunGuidCompletedEventHandler GetCircleRunGuidCompleted;
        
        /// <remarks/>
        public event SetDeliveryProviderCompletedEventHandler SetDeliveryProviderCompleted;
        
        /// <remarks/>
        public event SetDeliveryProviderByIDCompletedEventHandler SetDeliveryProviderByIDCompleted;
        
        /// <remarks/>
        public event GetDeliveryProviderCompletedEventHandler GetDeliveryProviderCompleted;
        
        /// <remarks/>
        public event GetDeliveryProviderIDCompletedEventHandler GetDeliveryProviderIDCompleted;
        
        /// <remarks/>
        public event SetEmailHeaderCompletedEventHandler SetEmailHeaderCompleted;
        
        /// <remarks/>
        public event GetEmailHeaderCompletedEventHandler GetEmailHeaderCompleted;
        
        /// <remarks/>
        public event SetEmailBodyCompletedEventHandler SetEmailBodyCompleted;
        
        /// <remarks/>
        public event SetEmailBodiesCompletedEventHandler SetEmailBodiesCompleted;
        
        /// <remarks/>
        public event AddEmailBodyCompletedEventHandler AddEmailBodyCompleted;
        
        /// <remarks/>
        public event SetEmailBodyByIDCompletedEventHandler SetEmailBodyByIDCompleted;
        
        /// <remarks/>
        public event SetEmailBodiesByIDsCompletedEventHandler SetEmailBodiesByIDsCompleted;
        
        /// <remarks/>
        public event AddEmailBodyByIDCompletedEventHandler AddEmailBodyByIDCompleted;
        
        /// <remarks/>
        public event RemoveAllEmailBodiesCompletedEventHandler RemoveAllEmailBodiesCompleted;
        
        /// <remarks/>
        public event GetEmailBodiesCompletedEventHandler GetEmailBodiesCompleted;
        
        /// <remarks/>
        public event GetEmailBodiesIDsCompletedEventHandler GetEmailBodiesIDsCompleted;
        
        /// <remarks/>
        public event GetEmailBodyCountCompletedEventHandler GetEmailBodyCountCompleted;
        
        /// <remarks/>
        public event GetNthEmailBodyCompletedEventHandler GetNthEmailBodyCompleted;
        
        /// <remarks/>
        public event GetNthEmailBodyIDCompletedEventHandler GetNthEmailBodyIDCompleted;
        
        /// <remarks/>
        public event SetMetaDataCompletedEventHandler SetMetaDataCompleted;
        
        /// <remarks/>
        public event GetMetaDataCompletedEventHandler GetMetaDataCompleted;
        
        /// <remarks/>
        public event GetAllMetaDataCompletedEventHandler GetAllMetaDataCompleted;
        
        /// <remarks/>
        public event GetMetaDataSubGroupsCompletedEventHandler GetMetaDataSubGroupsCompleted;
        
        /// <remarks/>
        public event RemoveMetaDataCompletedEventHandler RemoveMetaDataCompleted;
        
        /// <remarks/>
        public event RemoveMetaDataGroupCompletedEventHandler RemoveMetaDataGroupCompleted;
        
        /// <remarks/>
        public event IsMappingExistsCompletedEventHandler IsMappingExistsCompleted;
        
        /// <remarks/>
        public event GetFieldMappingsCompletedEventHandler GetFieldMappingsCompleted;
        
        /// <remarks/>
        public event SetFieldMappingCompletedEventHandler SetFieldMappingCompleted;
        
        /// <remarks/>
        public event SetFieldMappingByIDCompletedEventHandler SetFieldMappingByIDCompleted;
        
        /// <remarks/>
        public event RemoveFieldMappingCompletedEventHandler RemoveFieldMappingCompleted;
        
        /// <remarks/>
        public event GetNthRIInfoCompletedEventHandler GetNthRIInfoCompleted;
        
        /// <remarks/>
        public event GetNthRIDataSourceIDCompletedEventHandler GetNthRIDataSourceIDCompleted;
        
        /// <remarks/>
        public event GetNthRIDataSourceCompletedEventHandler GetNthRIDataSourceCompleted;
        
        /// <remarks/>
        public event AddRICompletedEventHandler AddRICompleted;
        
        /// <remarks/>
        public event AddRIByIDCompletedEventHandler AddRIByIDCompleted;
        
        /// <remarks/>
        public event AddDefaultRICompletedEventHandler AddDefaultRICompleted;
        
        /// <remarks/>
        public event SetRIOnDemandInfoCompletedEventHandler SetRIOnDemandInfoCompleted;
        
        /// <remarks/>
        public event GetRIOnDemandRecipientIDCompletedEventHandler GetRIOnDemandRecipientIDCompleted;
        
        /// <remarks/>
        public event GetRIOnDemandRecipientInfoCompletedEventHandler GetRIOnDemandRecipientInfoCompleted;
        
        /// <remarks/>
        public event SetJobTypeCompletedEventHandler SetJobTypeCompleted;
        
        /// <remarks/>
        public event GetJobTypeCompletedEventHandler GetJobTypeCompleted;
        
        /// <remarks/>
        public event GetJobPriorityCompletedEventHandler GetJobPriorityCompleted;
        
        /// <remarks/>
        public event SetJobPriorityCompletedEventHandler SetJobPriorityCompleted;
        
        /// <remarks/>
        public event SetJobTrackingWebServiceCompletedEventHandler SetJobTrackingWebServiceCompleted;
        
        /// <remarks/>
        public event GetJobTrackingWebServiceCompletedEventHandler GetJobTrackingWebServiceCompleted;
        
        /// <remarks/>
        public event SetJobReportingWebServiceCompletedEventHandler SetJobReportingWebServiceCompleted;
        
        /// <remarks/>
        public event GetJobReportingWebServiceCompletedEventHandler GetJobReportingWebServiceCompleted;
        
        /// <remarks/>
        public event SetSplittedJobInfoCompletedEventHandler SetSplittedJobInfoCompleted;
        
        /// <remarks/>
        public event IsSplittedJobCompletedEventHandler IsSplittedJobCompleted;
        
        /// <remarks/>
        public event IsParallelProcessingJobCompletedEventHandler IsParallelProcessingJobCompleted;
        
        /// <remarks/>
        public event SetAutomaticSubSplitAndMergeCompletedEventHandler SetAutomaticSubSplitAndMergeCompleted;
        
        /// <remarks/>
        public event IsAutomaticSubSplitEnabledCompletedEventHandler IsAutomaticSubSplitEnabledCompleted;
        
        /// <remarks/>
        public event IsAutomaticMergeEnabledCompletedEventHandler IsAutomaticMergeEnabledCompleted;
        
        /// <remarks/>
        public event IsSubJobCompletedEventHandler IsSubJobCompleted;
        
        /// <remarks/>
        public event GetSubJobInfoCompletedEventHandler GetSubJobInfoCompleted;
        
        /// <remarks/>
        public event GetSubJobIndexCompletedEventHandler GetSubJobIndexCompleted;
        
        /// <remarks/>
        public event GetSubJobOrigFromCompletedEventHandler GetSubJobOrigFromCompleted;
        
        /// <remarks/>
        public event GetSubJobOrigToCompletedEventHandler GetSubJobOrigToCompleted;
        
        /// <remarks/>
        public event GetSubJobSplitCountCompletedEventHandler GetSubJobSplitCountCompleted;
        
        /// <remarks/>
        public event GetSubJobSplitTypeCompletedEventHandler GetSubJobSplitTypeCompleted;
        
        /// <remarks/>
        public event SetJobParameterCompletedEventHandler SetJobParameterCompleted;
        
        /// <remarks/>
        public event SetJobParametersCompletedEventHandler SetJobParametersCompleted;
        
        /// <remarks/>
        public event GetJobParameterCompletedEventHandler GetJobParameterCompleted;
        
        /// <remarks/>
        public event GetJobParametersCompletedEventHandler GetJobParametersCompleted;
        
        /// <remarks/>
        public event RemoveJobParameterCompletedEventHandler RemoveJobParameterCompleted;
        
        /// <remarks/>
        public event RemoveJobParametersCompletedEventHandler RemoveJobParametersCompleted;
        
        /// <remarks/>
        public event RemoveAllJobParametersCompletedEventHandler RemoveAllJobParametersCompleted;
        
        /// <remarks/>
        public event SetEmailInfoCompletedEventHandler SetEmailInfoCompleted;
        
        /// <remarks/>
        public event SetEmailAdorNameCompletedEventHandler SetEmailAdorNameCompleted;
        
        /// <remarks/>
        public event SetSenderAdorNameCompletedEventHandler SetSenderAdorNameCompleted;
        
        /// <remarks/>
        public event SetSubjectAdorNameCompletedEventHandler SetSubjectAdorNameCompleted;
        
        /// <remarks/>
        public event SetEmbedEmailBodyCompletedEventHandler SetEmbedEmailBodyCompleted;
        
        /// <remarks/>
        public event SetProcessEmailOutputTypeCompletedEventHandler SetProcessEmailOutputTypeCompleted;
        
        /// <remarks/>
        public event SetOnDemandBaseURLCompletedEventHandler SetOnDemandBaseURLCompleted;
        
        /// <remarks/>
        public event GetEmailAdorNameCompletedEventHandler GetEmailAdorNameCompleted;
        
        /// <remarks/>
        public event GetSenderAdorNameCompletedEventHandler GetSenderAdorNameCompleted;
        
        /// <remarks/>
        public event GetSubjectAdorNameCompletedEventHandler GetSubjectAdorNameCompleted;
        
        /// <remarks/>
        public event GetEmbedEmailBodyCompletedEventHandler GetEmbedEmailBodyCompleted;
        
        /// <remarks/>
        public event GetProcessEmailOutputTypeCompletedEventHandler GetProcessEmailOutputTypeCompleted;
        
        /// <remarks/>
        public event GetOnDemandBaseURLCompletedEventHandler GetOnDemandBaseURLCompleted;
        
        /// <remarks/>
        public event GetOutputFileNameOptionCompletedEventHandler GetOutputFileNameOptionCompleted;
        
        /// <remarks/>
        public event SetOutputInfoCompletedEventHandler SetOutputInfoCompleted;
        
        /// <remarks/>
        public event SetOutputParameterCompletedEventHandler SetOutputParameterCompleted;
        
        /// <remarks/>
        public event SetOutputParametersCompletedEventHandler SetOutputParametersCompleted;
        
        /// <remarks/>
        public event GetOutputParameterCompletedEventHandler GetOutputParameterCompleted;
        
        /// <remarks/>
        public event GetOutputParametersCompletedEventHandler GetOutputParametersCompleted;
        
        /// <remarks/>
        public event RemoveOutputParameterCompletedEventHandler RemoveOutputParameterCompleted;
        
        /// <remarks/>
        public event RemoveOutputParametersCompletedEventHandler RemoveOutputParametersCompleted;
        
        /// <remarks/>
        public event RemoveAllOutputParametersCompletedEventHandler RemoveAllOutputParametersCompleted;
        
        /// <remarks/>
        public event SetAppendJobIDCompletedEventHandler SetAppendJobIDCompleted;
        
        /// <remarks/>
        public event SetEnvJobNameCompletedEventHandler SetEnvJobNameCompleted;
        
        /// <remarks/>
        public event SetOutputMediaCompletedEventHandler SetOutputMediaCompleted;
        
        /// <remarks/>
        public event SetOutputTypeCompletedEventHandler SetOutputTypeCompleted;
        
        /// <remarks/>
        public event SetOutputFolderCompletedEventHandler SetOutputFolderCompleted;
        
        /// <remarks/>
        public event SetOutputFileNameCompletedEventHandler SetOutputFileNameCompleted;
        
        /// <remarks/>
        public event GetAppendJobIDCompletedEventHandler GetAppendJobIDCompleted;
        
        /// <remarks/>
        public event GetDefaultCacheEnvCompletedEventHandler GetDefaultCacheEnvCompleted;
        
        /// <remarks/>
        public event GetEnvJobNameCompletedEventHandler GetEnvJobNameCompleted;
        
        /// <remarks/>
        public event GetOutputMediaCompletedEventHandler GetOutputMediaCompleted;
        
        /// <remarks/>
        public event GetOutputTypeCompletedEventHandler GetOutputTypeCompleted;
        
        /// <remarks/>
        public event GetOutputFolderCompletedEventHandler GetOutputFolderCompleted;
        
        /// <remarks/>
        public event GetOutputFileNameCompletedEventHandler GetOutputFileNameCompleted;
        
        /// <remarks/>
        public event AddImpositionCompletedEventHandler AddImpositionCompleted;
        
        /// <remarks/>
        public event RemoveImpositionCompletedEventHandler RemoveImpositionCompleted;
        
        /// <remarks/>
        public event IsImpositionExistCompletedEventHandler IsImpositionExistCompleted;
        
        /// <remarks/>
        public event SetImpositionParameterCompletedEventHandler SetImpositionParameterCompleted;
        
        /// <remarks/>
        public event SetImpositionParametersCompletedEventHandler SetImpositionParametersCompleted;
        
        /// <remarks/>
        public event GetImpositionParameterCompletedEventHandler GetImpositionParameterCompleted;
        
        /// <remarks/>
        public event GetImpositionParametersCompletedEventHandler GetImpositionParametersCompleted;
        
        /// <remarks/>
        public event RemoveImpositionParameterCompletedEventHandler RemoveImpositionParameterCompleted;
        
        /// <remarks/>
        public event RemoveImpositionParametersCompletedEventHandler RemoveImpositionParametersCompleted;
        
        /// <remarks/>
        public event RemoveAllImpositionParametersCompletedEventHandler RemoveAllImpositionParametersCompleted;
        
        /// <remarks/>
        public event AddJDFCompletedEventHandler AddJDFCompleted;
        
        /// <remarks/>
        public event RemoveJDFCompletedEventHandler RemoveJDFCompleted;
        
        /// <remarks/>
        public event IsJDFExistCompletedEventHandler IsJDFExistCompleted;
        
        /// <remarks/>
        public event SetJDFParameterCompletedEventHandler SetJDFParameterCompleted;
        
        /// <remarks/>
        public event SetJDFParametersCompletedEventHandler SetJDFParametersCompleted;
        
        /// <remarks/>
        public event GetJDFParameterCompletedEventHandler GetJDFParameterCompleted;
        
        /// <remarks/>
        public event GetJDFParametersCompletedEventHandler GetJDFParametersCompleted;
        
        /// <remarks/>
        public event RemoveJDFParameterCompletedEventHandler RemoveJDFParameterCompleted;
        
        /// <remarks/>
        public event RemoveJDFParametersCompletedEventHandler RemoveJDFParametersCompleted;
        
        /// <remarks/>
        public event RemoveAllJDFParametersCompletedEventHandler RemoveAllJDFParametersCompleted;
        
        /// <remarks/>
        public event AddCompressionCompletedEventHandler AddCompressionCompleted;
        
        /// <remarks/>
        public event RemoveCompressionCompletedEventHandler RemoveCompressionCompleted;
        
        /// <remarks/>
        public event IsCompressionExistCompletedEventHandler IsCompressionExistCompleted;
        
        /// <remarks/>
        public event IsVPCCompressionCompletedEventHandler IsVPCCompressionCompleted;
        
        /// <remarks/>
        public event AddDestinationByIDCompletedEventHandler AddDestinationByIDCompleted;
        
        /// <remarks/>
        public event AddFTPCompletedEventHandler AddFTPCompleted;
        
        /// <remarks/>
        public event AddFTPByIDCompletedEventHandler AddFTPByIDCompleted;
        
        /// <remarks/>
        public event RemoveFTPCompletedEventHandler RemoveFTPCompleted;
        
        /// <remarks/>
        public event IsFTPExistCompletedEventHandler IsFTPExistCompleted;
        
        /// <remarks/>
        public event GetFTPIDCompletedEventHandler GetFTPIDCompleted;
        
        /// <remarks/>
        public event GetFTPAddressCompletedEventHandler GetFTPAddressCompleted;
        
        /// <remarks/>
        public event GetFTPPortCompletedEventHandler GetFTPPortCompleted;
        
        /// <remarks/>
        public event GetFTPUserCompletedEventHandler GetFTPUserCompleted;
        
        /// <remarks/>
        public event GetFTPPasswordCompletedEventHandler GetFTPPasswordCompleted;
        
        /// <remarks/>
        public event GetFTPPassiveCompletedEventHandler GetFTPPassiveCompleted;
        
        /// <remarks/>
        public event IsFTPDeleteSourceCompletedEventHandler IsFTPDeleteSourceCompleted;
        
        /// <remarks/>
        public event AddUMailCompletedEventHandler AddUMailCompleted;
        
        /// <remarks/>
        public event RemoveUMailCompletedEventHandler RemoveUMailCompleted;
        
        /// <remarks/>
        public event IsUMailExistCompletedEventHandler IsUMailExistCompleted;
        
        /// <remarks/>
        public event GetUMailTemplateCompletedEventHandler GetUMailTemplateCompleted;
        
        /// <remarks/>
        public event GetUMailOrigZipCompletedEventHandler GetUMailOrigZipCompleted;
        
        /// <remarks/>
        public event GetUMailPCWTCompletedEventHandler GetUMailPCWTCompleted;
        
        /// <remarks/>
        public event GetUMailPCThickCompletedEventHandler GetUMailPCThickCompleted;
        
        /// <remarks/>
        public event AddPrintCompletedEventHandler AddPrintCompleted;
        
        /// <remarks/>
        public event AddPrintByIDCompletedEventHandler AddPrintByIDCompleted;
        
        /// <remarks/>
        public event RemovePrintCompletedEventHandler RemovePrintCompleted;
        
        /// <remarks/>
        public event IsPrintExistCompletedEventHandler IsPrintExistCompleted;
        
        /// <remarks/>
        public event GetPrintIDCompletedEventHandler GetPrintIDCompleted;
        
        /// <remarks/>
        public event GetPrinterCompletedEventHandler GetPrinterCompleted;
        
        /// <remarks/>
        public event IsPrinterDeleteSourceCompletedEventHandler IsPrinterDeleteSourceCompleted;
        
        /// <remarks/>
        public event AddFFPMCompletedEventHandler AddFFPMCompleted;
        
        /// <remarks/>
        public event AddFFPMByIDCompletedEventHandler AddFFPMByIDCompleted;
        
        /// <remarks/>
        public event RemoveFFPMCompletedEventHandler RemoveFFPMCompleted;
        
        /// <remarks/>
        public event IsFFPMExistCompletedEventHandler IsFFPMExistCompleted;
        
        /// <remarks/>
        public event GetFFPMIDCompletedEventHandler GetFFPMIDCompleted;
        
        /// <remarks/>
        public event IsFFPMDeleteSourceCompletedEventHandler IsFFPMDeleteSourceCompleted;
        
        /// <remarks/>
        public event CreateNewTicketCompletedEventHandler CreateNewTicketCompleted;
        
        /// <remarks/>
        public event CreateNewTicketForDocumentCompletedEventHandler CreateNewTicketForDocumentCompleted;
        
        /// <remarks/>
        public event CreateNewTicketForPlanCompletedEventHandler CreateNewTicketForPlanCompleted;
        
        /// <remarks/>
        public event CreateNewTicketForCampaignCompletedEventHandler CreateNewTicketForCampaignCompleted;
        
        /// <remarks/>
        public event RecycleTicketIDCompletedEventHandler RecycleTicketIDCompleted;
        
        /// <remarks/>
        public event LoadTicketFromFileCompletedEventHandler LoadTicketFromFileCompleted;
        
        /// <remarks/>
        public event LoadJobTicketCompletedEventHandler LoadJobTicketCompleted;
        
        /// <remarks/>
        public event LoadLastJobTicketOfDocumentCompletedEventHandler LoadLastJobTicketOfDocumentCompleted;
        
        /// <remarks/>
        public event LoadLastJobTicketOfPlanCompletedEventHandler LoadLastJobTicketOfPlanCompleted;
        
        /// <remarks/>
        public event LoadTicketFromTicketCompletedEventHandler LoadTicketFromTicketCompleted;
        
        /// <remarks/>
        public event GetTicketPropertyFromDBCompletedEventHandler GetTicketPropertyFromDBCompleted;
        
        /// <remarks/>
        public event LoadTicketFromDBCompletedEventHandler LoadTicketFromDBCompleted;
        
        /// <remarks/>
        public event SaveTicketToFileCompletedEventHandler SaveTicketToFileCompleted;
        
        /// <remarks/>
        public event SaveNewTicketToDBCompletedEventHandler SaveNewTicketToDBCompleted;
        
        /// <remarks/>
        public event OverwriteTicketInDBCompletedEventHandler OverwriteTicketInDBCompleted;
        
        /// <remarks/>
        public event DeleteTicketFromDBCompletedEventHandler DeleteTicketFromDBCompleted;
        
        /// <remarks/>
        public event GetTicketsFromDBCompletedEventHandler GetTicketsFromDBCompleted;
        
        /// <remarks/>
        public event GetTemplatesFromDBCompletedEventHandler GetTemplatesFromDBCompleted;
        
        /// <remarks/>
        public event GetTicketCompletedEventHandler GetTicketCompleted;
        
        /// <remarks/>
        public event GetTicketAndRecycleIDCompletedEventHandler GetTicketAndRecycleIDCompleted;
        
        /// <remarks/>
        public event SetTicketDefaultsForDocumentCompletedEventHandler SetTicketDefaultsForDocumentCompleted;
        
        /// <remarks/>
        public event SetTicketDefaultsForPlanCompletedEventHandler SetTicketDefaultsForPlanCompleted;
        
        /// <remarks/>
        public event SetTicketDefaultsForCampaignCompletedEventHandler SetTicketDefaultsForCampaignCompleted;
        
        /// <remarks/>
        public event SetPlanCompletedEventHandler SetPlanCompleted;
        
        /// <remarks/>
        public event SetPlanByIDCompletedEventHandler SetPlanByIDCompleted;
        
        /// <remarks/>
        public event GetUseTrivialPlanCompletedEventHandler GetUseTrivialPlanCompleted;
        
        /// <remarks/>
        public event SetUseTrivialPlanCompletedEventHandler SetUseTrivialPlanCompleted;
        
        /// <remarks/>
        public event GetPlanPathCompletedEventHandler GetPlanPathCompleted;
        
        /// <remarks/>
        public event GetPlanIDCompletedEventHandler GetPlanIDCompleted;
        
        /// <remarks/>
        public event SetCustomizationCompletedEventHandler SetCustomizationCompleted;
        
        /// <remarks/>
        public event SetCustomizationsCompletedEventHandler SetCustomizationsCompleted;
        
        /// <remarks/>
        public event RemoveCustomizationCompletedEventHandler RemoveCustomizationCompleted;
        
        /// <remarks/>
        public event RemoveAllCustomizationsCompletedEventHandler RemoveAllCustomizationsCompleted;
        
        /// <remarks/>
        public event GetCustomizationsCountCompletedEventHandler GetCustomizationsCountCompleted;
        
        /// <remarks/>
        public event GetNthCustomizationCompletedEventHandler GetNthCustomizationCompleted;
        
        /// <remarks/>
        public event GetCustomizationsCompletedEventHandler GetCustomizationsCompleted;
        
        /// <remarks/>
        public event SetDocumentByIDCompletedEventHandler SetDocumentByIDCompleted;
        
        /// <remarks/>
        public event SetDocumentCompletedEventHandler SetDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentIDCompletedEventHandler GetDocumentIDCompleted;
        
        /// <remarks/>
        public event GetDocumentFolderCompletedEventHandler GetDocumentFolderCompleted;
        
        /// <remarks/>
        public event GetDocumentNameCompletedEventHandler GetDocumentNameCompleted;
        
        /// <remarks/>
        public event GetDocumentTypeCompletedEventHandler GetDocumentTypeCompleted;
        
        /// <remarks/>
        public event SetWebResourcesBasePathCompletedEventHandler SetWebResourcesBasePathCompleted;
        
        /// <remarks/>
        public event GetWebResourcesBasePathCompletedEventHandler GetWebResourcesBasePathCompleted;
        
        /// <remarks/>
        public event SetAllowFriendlyCompletedEventHandler SetAllowFriendlyCompleted;
        
        /// <remarks/>
        public event GetAllowFriendlyCompletedEventHandler GetAllowFriendlyCompleted;
        
        /// <remarks/>
        public event SetFriendlinessCompletedEventHandler SetFriendlinessCompleted;
        
        /// <remarks/>
        public event GetFriendlyDomainCompletedEventHandler GetFriendlyDomainCompleted;
        
        /// <remarks/>
        public event GetFriendlyFolderCompletedEventHandler GetFriendlyFolderCompleted;
        
        /// <remarks/>
        public event GetFriendlyLandingPageCompletedEventHandler GetFriendlyLandingPageCompleted;
        
        /// <remarks/>
        public event IsFriendlyUrlRedirectModeCompletedEventHandler IsFriendlyUrlRedirectModeCompleted;
        
        /// <remarks/>
        public event IsFriendlyUrlUseRIDPrefixModeCompletedEventHandler IsFriendlyUrlUseRIDPrefixModeCompleted;
        
        /// <remarks/>
        public event SetCampaignIDCompletedEventHandler SetCampaignIDCompleted;
        
        /// <remarks/>
        public event GetCampaignIDCompletedEventHandler GetCampaignIDCompleted;
        
        /// <remarks/>
        public event SetFontsCompletedEventHandler SetFontsCompleted;
        
        /// <remarks/>
        public event SetFontsByIDCompletedEventHandler SetFontsByIDCompleted;
        
        /// <remarks/>
        public event GetFontsFolderCompletedEventHandler GetFontsFolderCompleted;
        
        /// <remarks/>
        public event SetPortLinkCompletedEventHandler SetPortLinkCompleted;
        
        /// <remarks/>
        public event RefreshPortLinkCompletedEventHandler RefreshPortLinkCompleted;
        
        /// <remarks/>
        public event RemovePortLinkCompletedEventHandler RemovePortLinkCompleted;
        
        /// <remarks/>
        public event IsPortLinkExistCompletedEventHandler IsPortLinkExistCompleted;
        
        /// <remarks/>
        public event GetPortLinkAccountCompletedEventHandler GetPortLinkAccountCompleted;
        
        /// <remarks/>
        public event GetPortLinkCampaignCompletedEventHandler GetPortLinkCampaignCompleted;
        
        /// <remarks/>
        public event GetPortLinkPortNameCompletedEventHandler GetPortLinkPortNameCompleted;
        
        /// <remarks/>
        public event SetDataSourceCompletedEventHandler SetDataSourceCompleted;
        
        /// <remarks/>
        public event SetDataSourcesCompletedEventHandler SetDataSourcesCompleted;
        
        /// <remarks/>
        public event SetDataSourceByIDCompletedEventHandler SetDataSourceByIDCompleted;
        
        /// <remarks/>
        public event SetDataSourcesByIDCompletedEventHandler SetDataSourcesByIDCompleted;
        
        /// <remarks/>
        public event SetDefaultDataSourcesCompletedEventHandler SetDefaultDataSourcesCompleted;
        
        /// <remarks/>
        public event RemoveAllSchemaDataSourcesCompletedEventHandler RemoveAllSchemaDataSourcesCompleted;
        
        /// <remarks/>
        public event RemoveSchemaDataSourceCompletedEventHandler RemoveSchemaDataSourceCompleted;
        
        /// <remarks/>
        public event GetSchemaDataSourceCompletedEventHandler GetSchemaDataSourceCompleted;
        
        /// <remarks/>
        public event GetSchemaDataSourceIDCompletedEventHandler GetSchemaDataSourceIDCompleted;
        
        /// <remarks/>
        public event GetSchemasNamesCompletedEventHandler GetSchemasNamesCompleted;
        
        /// <remarks/>
        public event GetSchemasDataSourcesCompletedEventHandler GetSchemasDataSourcesCompleted;
        
        /// <remarks/>
        public event GetSchemaDataSourceIDsCompletedEventHandler GetSchemaDataSourceIDsCompleted;
        
        /// <remarks/>
        public event GetSchemaDataSourcesCountCompletedEventHandler GetSchemaDataSourcesCountCompleted;
        
        /// <remarks/>
        public event GetNthSchemaNameCompletedEventHandler GetNthSchemaNameCompleted;
        
        /// <remarks/>
        public event GetNthSchemaDataSourceIDCompletedEventHandler GetNthSchemaDataSourceIDCompleted;
        
        /// <remarks/>
        public event GetNthSchemaDataSourceCompletedEventHandler GetNthSchemaDataSourceCompleted;
        
        /// <remarks/>
        public event SetResolveAssetsCompletedEventHandler SetResolveAssetsCompleted;
        
        /// <remarks/>
        public event GetResolveAssetsCompletedEventHandler GetResolveAssetsCompleted;
        
        /// <remarks/>
        public event SetConnectivityAssetsCompletedEventHandler SetConnectivityAssetsCompleted;
        
        /// <remarks/>
        public event GetConnectivityAssetsCompletedEventHandler GetConnectivityAssetsCompleted;
        
        /// <remarks/>
        public event SetAssetsPrefixCompletedEventHandler SetAssetsPrefixCompleted;
        
        /// <remarks/>
        public event GetAssetsPrefixTypeCompletedEventHandler GetAssetsPrefixTypeCompleted;
        
        /// <remarks/>
        public event GetAssetsFixedPrefixCompletedEventHandler GetAssetsFixedPrefixCompleted;
        
        /// <remarks/>
        public event SetAssetSourceCompletedEventHandler SetAssetSourceCompleted;
        
        /// <remarks/>
        public event SetAssetSourceExCompletedEventHandler SetAssetSourceExCompleted;
        
        /// <remarks/>
        public event SetAssetSourcesCompletedEventHandler SetAssetSourcesCompleted;
        
        /// <remarks/>
        public event SetAssetSourcesExCompletedEventHandler SetAssetSourcesExCompleted;
        
        /// <remarks/>
        public event SetAssetSourceByIDCompletedEventHandler SetAssetSourceByIDCompleted;
        
        /// <remarks/>
        public event SetAssetSourcesByIDCompletedEventHandler SetAssetSourcesByIDCompleted;
        
        /// <remarks/>
        public event SetDefaultAssetSourcesCompletedEventHandler SetDefaultAssetSourcesCompleted;
        
        /// <remarks/>
        public event RemoveAllAssetSourcesCompletedEventHandler RemoveAllAssetSourcesCompleted;
        
        /// <remarks/>
        public event RemoveAssetSourceCompletedEventHandler RemoveAssetSourceCompleted;
        
        /// <remarks/>
        public event GetAssetSourceCompletedEventHandler GetAssetSourceCompleted;
        
        /// <remarks/>
        public event GetAssetSourceExCompletedEventHandler GetAssetSourceExCompleted;
        
        /// <remarks/>
        public event GetAssetSourceIDCompletedEventHandler GetAssetSourceIDCompleted;
        
        /// <remarks/>
        public event GetAssetSourcePriorityCompletedEventHandler GetAssetSourcePriorityCompleted;
        
        /// <remarks/>
        public event GetAssetSourcesNamesCompletedEventHandler GetAssetSourcesNamesCompleted;
        
        /// <remarks/>
        public event GetAssetSourcesCompletedEventHandler GetAssetSourcesCompleted;
        
        /// <remarks/>
        public event GetAssetSourcesExCompletedEventHandler GetAssetSourcesExCompleted;
        
        /// <remarks/>
        public event GetAssetSourcesIDsCompletedEventHandler GetAssetSourcesIDsCompleted;
        
        /// <remarks/>
        public event GetAssetSourcesCountCompletedEventHandler GetAssetSourcesCountCompleted;
        
        /// <remarks/>
        public event GetNthAssetSourceNameCompletedEventHandler GetNthAssetSourceNameCompleted;
        
        /// <remarks/>
        public event GetNthAssetSourceCompletedEventHandler GetNthAssetSourceCompleted;
        
        /// <remarks/>
        public event GetNthAssetSourceExCompletedEventHandler GetNthAssetSourceExCompleted;
        
        /// <remarks/>
        public event GetNthAssetSourceIDCompletedEventHandler GetNthAssetSourceIDCompleted;
        
        /// <remarks/>
        public event GetNthAssetSourcePriorityCompletedEventHandler GetNthAssetSourcePriorityCompleted;
        
        /// <remarks/>
        public event GetPopulationGUIDCompletedEventHandler GetPopulationGUIDCompleted;
        
        /// <remarks/>
        public event SetRIRangeCompletedEventHandler SetRIRangeCompleted;
        
        /// <remarks/>
        public event SetRICompletedEventHandler SetRICompleted;
        
        /// <remarks/>
        public event SetRIsCompletedEventHandler SetRIsCompleted;
        
        /// <remarks/>
        public event SetRIByIDCompletedEventHandler SetRIByIDCompleted;
        
        /// <remarks/>
        public event SetRIByPopulationGUIDCompletedEventHandler SetRIByPopulationGUIDCompleted;
        
        /// <remarks/>
        public event SetInfoByRunGUIDCompletedEventHandler SetInfoByRunGUIDCompleted;
        
        /// <remarks/>
        public event SetRIsByIDCompletedEventHandler SetRIsByIDCompleted;
        
        /// <remarks/>
        public event SetDefaultRICompletedEventHandler SetDefaultRICompleted;
        
        /// <remarks/>
        public event RemoveAllRIsCompletedEventHandler RemoveAllRIsCompleted;
        
        /// <remarks/>
        public event GetRIsCountCompletedEventHandler GetRIsCountCompleted;
        
        /// <remarks/>
        public event GetRIFromCompletedEventHandler GetRIFromCompleted;
        
        /// <remarks/>
        public event GetRIToCompletedEventHandler GetRIToCompleted;
        
        /// <remarks/>
        public event GetNthRIRecipientIDListFileNameCompletedEventHandler GetNthRIRecipientIDListFileNameCompleted;
        
        /// <remarks/>
        public event GetNthRIRecipientIDListMergeTypeCompletedEventHandler GetNthRIRecipientIDListMergeTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFFPMExecutablePath", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFFPMExecutablePath(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFFPMExecutablePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFFPMExecutablePathAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFFPMExecutablePathAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFFPMExecutablePathAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFFPMExecutablePathOperationCompleted == null)) {
                this.GetFFPMExecutablePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFFPMExecutablePathOperationCompleted);
            }
            this.InvokeAsync("GetFFPMExecutablePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFFPMExecutablePathOperationCompleted, userState);
        }
        
        private void OnGetFFPMExecutablePathOperationCompleted(object arg) {
            if ((this.GetFFPMExecutablePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFFPMExecutablePathCompleted(this, new GetFFPMExecutablePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFFPMQueueSpecs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFFPMQueueSpecs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFFPMQueueSpecs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFFPMQueueSpecsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFFPMQueueSpecsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFFPMQueueSpecsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFFPMQueueSpecsOperationCompleted == null)) {
                this.GetFFPMQueueSpecsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFFPMQueueSpecsOperationCompleted);
            }
            this.InvokeAsync("GetFFPMQueueSpecs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFFPMQueueSpecsOperationCompleted, userState);
        }
        
        private void OnGetFFPMQueueSpecsOperationCompleted(object arg) {
            if ((this.GetFFPMQueueSpecsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFFPMQueueSpecsCompleted(this, new GetFFPMQueueSpecsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddRemoteCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            object[] results = this.Invoke("AddRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            this.AddRemoteCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource, object userState) {
            if ((this.AddRemoteCopyOperationCompleted == null)) {
                this.AddRemoteCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteCopyOperationCompleted);
            }
            this.InvokeAsync("AddRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource}, this.AddRemoteCopyOperationCompleted, userState);
        }
        
        private void OnAddRemoteCopyOperationCompleted(object arg) {
            if ((this.AddRemoteCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteCopyCompleted(this, new AddRemoteCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddRemoteCopyByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            object[] results = this.Invoke("AddRemoteCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            this.AddRemoteCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource, object userState) {
            if ((this.AddRemoteCopyByIDOperationCompleted == null)) {
                this.AddRemoteCopyByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteCopyByIDOperationCompleted);
            }
            this.InvokeAsync("AddRemoteCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource}, this.AddRemoteCopyByIDOperationCompleted, userState);
        }
        
        private void OnAddRemoteCopyByIDOperationCompleted(object arg) {
            if ((this.AddRemoteCopyByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteCopyByIDCompleted(this, new AddRemoteCopyByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveRemoteCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveRemoteCopy(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRemoteCopyAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveRemoteCopyAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveRemoteCopyOperationCompleted == null)) {
                this.RemoveRemoteCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRemoteCopyOperationCompleted);
            }
            this.InvokeAsync("RemoveRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveRemoteCopyOperationCompleted, userState);
        }
        
        private void OnRemoveRemoteCopyOperationCompleted(object arg) {
            if ((this.RemoveRemoteCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRemoteCopyCompleted(this, new RemoveRemoteCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsRemoteCopyExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsRemoteCopyExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsRemoteCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsRemoteCopyExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsRemoteCopyExistOperationCompleted == null)) {
                this.IsRemoteCopyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRemoteCopyExistOperationCompleted);
            }
            this.InvokeAsync("IsRemoteCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsRemoteCopyExistOperationCompleted, userState);
        }
        
        private void OnIsRemoteCopyExistOperationCompleted(object arg) {
            if ((this.IsRemoteCopyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRemoteCopyExistCompleted(this, new IsRemoteCopyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRemoteCopyID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRemoteCopyID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRemoteCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRemoteCopyIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRemoteCopyIDOperationCompleted == null)) {
                this.GetRemoteCopyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteCopyIDOperationCompleted);
            }
            this.InvokeAsync("GetRemoteCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRemoteCopyIDOperationCompleted, userState);
        }
        
        private void OnGetRemoteCopyIDOperationCompleted(object arg) {
            if ((this.GetRemoteCopyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteCopyIDCompleted(this, new GetRemoteCopyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRemoteCopyDestination", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRemoteCopyDestination(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRemoteCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRemoteCopyDestinationAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRemoteCopyDestinationOperationCompleted == null)) {
                this.GetRemoteCopyDestinationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteCopyDestinationOperationCompleted);
            }
            this.InvokeAsync("GetRemoteCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRemoteCopyDestinationOperationCompleted, userState);
        }
        
        private void OnGetRemoteCopyDestinationOperationCompleted(object arg) {
            if ((this.GetRemoteCopyDestinationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteCopyDestinationCompleted(this, new GetRemoteCopyDestinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsRemoteCopyDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsRemoteCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsRemoteCopyDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsRemoteCopyDeleteSourceOperationCompleted == null)) {
                this.IsRemoteCopyDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRemoteCopyDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsRemoteCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsRemoteCopyDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsRemoteCopyDeleteSourceOperationCompleted(object arg) {
            if ((this.IsRemoteCopyDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRemoteCopyDeleteSourceCompleted(this, new IsRemoteCopyDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddSecondaryRemoteCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            object[] results = this.Invoke("AddSecondaryRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            this.AddSecondaryRemoteCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource, object userState) {
            if ((this.AddSecondaryRemoteCopyOperationCompleted == null)) {
                this.AddSecondaryRemoteCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSecondaryRemoteCopyOperationCompleted);
            }
            this.InvokeAsync("AddSecondaryRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource}, this.AddSecondaryRemoteCopyOperationCompleted, userState);
        }
        
        private void OnAddSecondaryRemoteCopyOperationCompleted(object arg) {
            if ((this.AddSecondaryRemoteCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSecondaryRemoteCopyCompleted(this, new AddSecondaryRemoteCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddSecondaryRemoteCopyByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddSecondaryRemoteCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            object[] results = this.Invoke("AddSecondaryRemoteCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddSecondaryRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            this.AddSecondaryRemoteCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddSecondaryRemoteCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource, object userState) {
            if ((this.AddSecondaryRemoteCopyByIDOperationCompleted == null)) {
                this.AddSecondaryRemoteCopyByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSecondaryRemoteCopyByIDOperationCompleted);
            }
            this.InvokeAsync("AddSecondaryRemoteCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource}, this.AddSecondaryRemoteCopyByIDOperationCompleted, userState);
        }
        
        private void OnAddSecondaryRemoteCopyByIDOperationCompleted(object arg) {
            if ((this.AddSecondaryRemoteCopyByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSecondaryRemoteCopyByIDCompleted(this, new AddSecondaryRemoteCopyByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveSecondaryRemoteCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveSecondaryRemoteCopy(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveSecondaryRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveSecondaryRemoteCopyAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveSecondaryRemoteCopyAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveSecondaryRemoteCopyOperationCompleted == null)) {
                this.RemoveSecondaryRemoteCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSecondaryRemoteCopyOperationCompleted);
            }
            this.InvokeAsync("RemoveSecondaryRemoteCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveSecondaryRemoteCopyOperationCompleted, userState);
        }
        
        private void OnRemoveSecondaryRemoteCopyOperationCompleted(object arg) {
            if ((this.RemoveSecondaryRemoteCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSecondaryRemoteCopyCompleted(this, new RemoveSecondaryRemoteCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsSecondaryRemoteCopyExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSecondaryRemoteCopyExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsSecondaryRemoteCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSecondaryRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsSecondaryRemoteCopyExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsSecondaryRemoteCopyExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsSecondaryRemoteCopyExistOperationCompleted == null)) {
                this.IsSecondaryRemoteCopyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSecondaryRemoteCopyExistOperationCompleted);
            }
            this.InvokeAsync("IsSecondaryRemoteCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsSecondaryRemoteCopyExistOperationCompleted, userState);
        }
        
        private void OnIsSecondaryRemoteCopyExistOperationCompleted(object arg) {
            if ((this.IsSecondaryRemoteCopyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSecondaryRemoteCopyExistCompleted(this, new IsSecondaryRemoteCopyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSecondaryRemoteCopyID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSecondaryRemoteCopyID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSecondaryRemoteCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecondaryRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSecondaryRemoteCopyIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSecondaryRemoteCopyIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSecondaryRemoteCopyIDOperationCompleted == null)) {
                this.GetSecondaryRemoteCopyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecondaryRemoteCopyIDOperationCompleted);
            }
            this.InvokeAsync("GetSecondaryRemoteCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSecondaryRemoteCopyIDOperationCompleted, userState);
        }
        
        private void OnGetSecondaryRemoteCopyIDOperationCompleted(object arg) {
            if ((this.GetSecondaryRemoteCopyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecondaryRemoteCopyIDCompleted(this, new GetSecondaryRemoteCopyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSecondaryRemoteCopyDestination", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSecondaryRemoteCopyDestination(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSecondaryRemoteCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecondaryRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSecondaryRemoteCopyDestinationAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSecondaryRemoteCopyDestinationAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSecondaryRemoteCopyDestinationOperationCompleted == null)) {
                this.GetSecondaryRemoteCopyDestinationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecondaryRemoteCopyDestinationOperationCompleted);
            }
            this.InvokeAsync("GetSecondaryRemoteCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSecondaryRemoteCopyDestinationOperationCompleted, userState);
        }
        
        private void OnGetSecondaryRemoteCopyDestinationOperationCompleted(object arg) {
            if ((this.GetSecondaryRemoteCopyDestinationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecondaryRemoteCopyDestinationCompleted(this, new GetSecondaryRemoteCopyDestinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsSecondaryRemoteCopyDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSecondaryRemoteCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsSecondaryRemoteCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSecondaryRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsSecondaryRemoteCopyDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsSecondaryRemoteCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsSecondaryRemoteCopyDeleteSourceOperationCompleted == null)) {
                this.IsSecondaryRemoteCopyDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSecondaryRemoteCopyDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsSecondaryRemoteCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsSecondaryRemoteCopyDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsSecondaryRemoteCopyDeleteSourceOperationCompleted(object arg) {
            if ((this.IsSecondaryRemoteCopyDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSecondaryRemoteCopyDeleteSourceCompleted(this, new IsSecondaryRemoteCopyDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddJDFCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddJDFCopy(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            object[] results = this.Invoke("AddJDFCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddJDFCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource) {
            this.AddJDFCopyAsync(inUsername, inPassword, inTicketID, inDestination, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddJDFCopyAsync(string inUsername, string inPassword, string inTicketID, string inDestination, bool inDeleteSource, object userState) {
            if ((this.AddJDFCopyOperationCompleted == null)) {
                this.AddJDFCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddJDFCopyOperationCompleted);
            }
            this.InvokeAsync("AddJDFCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestination,
                        inDeleteSource}, this.AddJDFCopyOperationCompleted, userState);
        }
        
        private void OnAddJDFCopyOperationCompleted(object arg) {
            if ((this.AddJDFCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddJDFCopyCompleted(this, new AddJDFCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddJDFCopyByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddJDFCopyByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            object[] results = this.Invoke("AddJDFCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddJDFCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            this.AddJDFCopyByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddJDFCopyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource, object userState) {
            if ((this.AddJDFCopyByIDOperationCompleted == null)) {
                this.AddJDFCopyByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddJDFCopyByIDOperationCompleted);
            }
            this.InvokeAsync("AddJDFCopyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource}, this.AddJDFCopyByIDOperationCompleted, userState);
        }
        
        private void OnAddJDFCopyByIDOperationCompleted(object arg) {
            if ((this.AddJDFCopyByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddJDFCopyByIDCompleted(this, new AddJDFCopyByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJDFCopy", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJDFCopy(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveJDFCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJDFCopyAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveJDFCopyAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveJDFCopyAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveJDFCopyOperationCompleted == null)) {
                this.RemoveJDFCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJDFCopyOperationCompleted);
            }
            this.InvokeAsync("RemoveJDFCopy", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveJDFCopyOperationCompleted, userState);
        }
        
        private void OnRemoveJDFCopyOperationCompleted(object arg) {
            if ((this.RemoveJDFCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJDFCopyCompleted(this, new RemoveJDFCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsJDFCopyExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsJDFCopyExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsJDFCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsJDFCopyExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsJDFCopyExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsJDFCopyExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsJDFCopyExistOperationCompleted == null)) {
                this.IsJDFCopyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsJDFCopyExistOperationCompleted);
            }
            this.InvokeAsync("IsJDFCopyExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsJDFCopyExistOperationCompleted, userState);
        }
        
        private void OnIsJDFCopyExistOperationCompleted(object arg) {
            if ((this.IsJDFCopyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsJDFCopyExistCompleted(this, new IsJDFCopyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJDFCopyID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJDFCopyID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJDFCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJDFCopyIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJDFCopyIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJDFCopyIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJDFCopyIDOperationCompleted == null)) {
                this.GetJDFCopyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJDFCopyIDOperationCompleted);
            }
            this.InvokeAsync("GetJDFCopyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJDFCopyIDOperationCompleted, userState);
        }
        
        private void OnGetJDFCopyIDOperationCompleted(object arg) {
            if ((this.GetJDFCopyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJDFCopyIDCompleted(this, new GetJDFCopyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJDFCopyDestination", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJDFCopyDestination(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJDFCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJDFCopyDestinationAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJDFCopyDestinationAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJDFCopyDestinationAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJDFCopyDestinationOperationCompleted == null)) {
                this.GetJDFCopyDestinationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJDFCopyDestinationOperationCompleted);
            }
            this.InvokeAsync("GetJDFCopyDestination", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJDFCopyDestinationOperationCompleted, userState);
        }
        
        private void OnGetJDFCopyDestinationOperationCompleted(object arg) {
            if ((this.GetJDFCopyDestinationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJDFCopyDestinationCompleted(this, new GetJDFCopyDestinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsJDFCopyDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsJDFCopyDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsJDFCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsJDFCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsJDFCopyDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsJDFCopyDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsJDFCopyDeleteSourceOperationCompleted == null)) {
                this.IsJDFCopyDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsJDFCopyDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsJDFCopyDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsJDFCopyDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsJDFCopyDeleteSourceOperationCompleted(object arg) {
            if ((this.IsJDFCopyDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsJDFCopyDeleteSourceCompleted(this, new IsJDFCopyDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDistillJobOptionName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDistillJobOptionName(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("SetDistillJobOptionName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDistillJobOptionNameAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.SetDistillJobOptionNameAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void SetDistillJobOptionNameAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.SetDistillJobOptionNameOperationCompleted == null)) {
                this.SetDistillJobOptionNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDistillJobOptionNameOperationCompleted);
            }
            this.InvokeAsync("SetDistillJobOptionName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.SetDistillJobOptionNameOperationCompleted, userState);
        }
        
        private void OnSetDistillJobOptionNameOperationCompleted(object arg) {
            if ((this.SetDistillJobOptionNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDistillJobOptionNameCompleted(this, new SetDistillJobOptionNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsJobTracked", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsJobTracked(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsJobTracked", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsJobTrackedAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsJobTrackedAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsJobTrackedAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsJobTrackedOperationCompleted == null)) {
                this.IsJobTrackedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsJobTrackedOperationCompleted);
            }
            this.InvokeAsync("IsJobTracked", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsJobTrackedOperationCompleted, userState);
        }
        
        private void OnIsJobTrackedOperationCompleted(object arg) {
            if ((this.IsJobTrackedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsJobTrackedCompleted(this, new IsJobTrackedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTouchPointID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTouchPointID(string inUsername, string inPassword, string inTicketID, string inTouchPointID) {
            object[] results = this.Invoke("SetTouchPointID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTouchPointID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID, string inTouchPointID) {
            this.SetTouchPointIDAsync(inUsername, inPassword, inTicketID, inTouchPointID, null);
        }
        
        /// <remarks/>
        public void SetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID, string inTouchPointID, object userState) {
            if ((this.SetTouchPointIDOperationCompleted == null)) {
                this.SetTouchPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTouchPointIDOperationCompleted);
            }
            this.InvokeAsync("SetTouchPointID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTouchPointID}, this.SetTouchPointIDOperationCompleted, userState);
        }
        
        private void OnSetTouchPointIDOperationCompleted(object arg) {
            if ((this.SetTouchPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTouchPointIDCompleted(this, new SetTouchPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTouchPointID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTouchPointID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetTouchPointID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetTouchPointIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetTouchPointIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetTouchPointIDOperationCompleted == null)) {
                this.GetTouchPointIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTouchPointIDOperationCompleted);
            }
            this.InvokeAsync("GetTouchPointID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetTouchPointIDOperationCompleted, userState);
        }
        
        private void OnGetTouchPointIDOperationCompleted(object arg) {
            if ((this.GetTouchPointIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTouchPointIDCompleted(this, new GetTouchPointIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddTracking", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddTracking(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("AddTracking", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTrackADORValues,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddTrackingAsync(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, Parameter[] inParams) {
            this.AddTrackingAsync(inUsername, inPassword, inTicketID, inTrackADORValues, inParams, null);
        }
        
        /// <remarks/>
        public void AddTrackingAsync(string inUsername, string inPassword, string inTicketID, bool inTrackADORValues, Parameter[] inParams, object userState) {
            if ((this.AddTrackingOperationCompleted == null)) {
                this.AddTrackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTrackingOperationCompleted);
            }
            this.InvokeAsync("AddTracking", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTrackADORValues,
                        inParams}, this.AddTrackingOperationCompleted, userState);
        }
        
        private void OnAddTrackingOperationCompleted(object arg) {
            if ((this.AddTrackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTrackingCompleted(this, new AddTrackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveTracking", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveTracking(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveTracking", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTrackingAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveTrackingAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveTrackingAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveTrackingOperationCompleted == null)) {
                this.RemoveTrackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTrackingOperationCompleted);
            }
            this.InvokeAsync("RemoveTracking", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveTrackingOperationCompleted, userState);
        }
        
        private void OnRemoveTrackingOperationCompleted(object arg) {
            if ((this.RemoveTrackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTrackingCompleted(this, new RemoveTrackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTrackingParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTrackingParameter(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            object[] results = this.Invoke("SetTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            this.SetTrackingParameterAsync(inUsername, inPassword, inTicketID, inParam, null);
        }
        
        /// <remarks/>
        public void SetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam, object userState) {
            if ((this.SetTrackingParameterOperationCompleted == null)) {
                this.SetTrackingParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTrackingParameterOperationCompleted);
            }
            this.InvokeAsync("SetTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam}, this.SetTrackingParameterOperationCompleted, userState);
        }
        
        private void OnSetTrackingParameterOperationCompleted(object arg) {
            if ((this.SetTrackingParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTrackingParameterCompleted(this, new SetTrackingParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTrackingParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTrackingParameters(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.SetTrackingParametersAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void SetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.SetTrackingParametersOperationCompleted == null)) {
                this.SetTrackingParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTrackingParametersOperationCompleted);
            }
            this.InvokeAsync("SetTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.SetTrackingParametersOperationCompleted, userState);
        }
        
        private void OnSetTrackingParametersOperationCompleted(object arg) {
            if ((this.SetTrackingParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTrackingParametersCompleted(this, new SetTrackingParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTrackingParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Parameter GetTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("GetTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((Parameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.GetTrackingParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void GetTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.GetTrackingParameterOperationCompleted == null)) {
                this.GetTrackingParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackingParameterOperationCompleted);
            }
            this.InvokeAsync("GetTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.GetTrackingParameterOperationCompleted, userState);
        }
        
        private void OnGetTrackingParameterOperationCompleted(object arg) {
            if ((this.GetTrackingParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackingParameterCompleted(this, new GetTrackingParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTrackingParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Parameter[] GetTrackingParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            object[] results = this.Invoke("GetTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames});
            return ((Parameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.GetTrackingParametersAsync(inUsername, inPassword, inTicketID, inParameterNames, null);
        }
        
        /// <remarks/>
        public void GetTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames, object userState) {
            if ((this.GetTrackingParametersOperationCompleted == null)) {
                this.GetTrackingParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackingParametersOperationCompleted);
            }
            this.InvokeAsync("GetTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames}, this.GetTrackingParametersOperationCompleted, userState);
        }
        
        private void OnGetTrackingParametersOperationCompleted(object arg) {
            if ((this.GetTrackingParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackingParametersCompleted(this, new GetTrackingParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveTrackingParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveTrackingParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("RemoveTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.RemoveTrackingParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void RemoveTrackingParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.RemoveTrackingParameterOperationCompleted == null)) {
                this.RemoveTrackingParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTrackingParameterOperationCompleted);
            }
            this.InvokeAsync("RemoveTrackingParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.RemoveTrackingParameterOperationCompleted, userState);
        }
        
        private void OnRemoveTrackingParameterOperationCompleted(object arg) {
            if ((this.RemoveTrackingParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTrackingParameterCompleted(this, new RemoveTrackingParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveTrackingParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveTrackingParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            object[] results = this.Invoke("RemoveTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            this.RemoveTrackingParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray, null);
        }
        
        /// <remarks/>
        public void RemoveTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray, object userState) {
            if ((this.RemoveTrackingParametersOperationCompleted == null)) {
                this.RemoveTrackingParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTrackingParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray}, this.RemoveTrackingParametersOperationCompleted, userState);
        }
        
        private void OnRemoveTrackingParametersOperationCompleted(object arg) {
            if ((this.RemoveTrackingParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTrackingParametersCompleted(this, new RemoveTrackingParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllTrackingParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllTrackingParameters(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllTrackingParametersAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllTrackingParametersAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllTrackingParametersAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllTrackingParametersOperationCompleted == null)) {
                this.RemoveAllTrackingParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllTrackingParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveAllTrackingParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllTrackingParametersOperationCompleted, userState);
        }
        
        private void OnRemoveAllTrackingParametersOperationCompleted(object arg) {
            if ((this.RemoveAllTrackingParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllTrackingParametersCompleted(this, new RemoveAllTrackingParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsTrackingADOR", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsTrackingADOR(string inUsername, string inPassword, string inTicketID, string inADORName) {
            object[] results = this.Invoke("IsTrackingADOR", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inADORName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsTrackingADORAsync(string inUsername, string inPassword, string inTicketID, string inADORName) {
            this.IsTrackingADORAsync(inUsername, inPassword, inTicketID, inADORName, null);
        }
        
        /// <remarks/>
        public void IsTrackingADORAsync(string inUsername, string inPassword, string inTicketID, string inADORName, object userState) {
            if ((this.IsTrackingADOROperationCompleted == null)) {
                this.IsTrackingADOROperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTrackingADOROperationCompleted);
            }
            this.InvokeAsync("IsTrackingADOR", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inADORName}, this.IsTrackingADOROperationCompleted, userState);
        }
        
        private void OnIsTrackingADOROperationCompleted(object arg) {
            if ((this.IsTrackingADORCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTrackingADORCompleted(this, new IsTrackingADORCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTrackingADORs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTrackingADORs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetTrackingADORs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackingADORsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetTrackingADORsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetTrackingADORsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetTrackingADORsOperationCompleted == null)) {
                this.GetTrackingADORsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackingADORsOperationCompleted);
            }
            this.InvokeAsync("GetTrackingADORs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetTrackingADORsOperationCompleted, userState);
        }
        
        private void OnGetTrackingADORsOperationCompleted(object arg) {
            if ((this.GetTrackingADORsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackingADORsCompleted(this, new GetTrackingADORsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetCircleTouchpointGuid", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid) {
            object[] results = this.Invoke("SetCircleTouchpointGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCircleTouchpointGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid) {
            this.SetCircleTouchpointGuidAsync(inUsername, inPassword, inTicketID, inCircleTouchpointGuid, null);
        }
        
        /// <remarks/>
        public void SetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleTouchpointGuid, object userState) {
            if ((this.SetCircleTouchpointGuidOperationCompleted == null)) {
                this.SetCircleTouchpointGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCircleTouchpointGuidOperationCompleted);
            }
            this.InvokeAsync("SetCircleTouchpointGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCircleTouchpointGuid}, this.SetCircleTouchpointGuidOperationCompleted, userState);
        }
        
        private void OnSetCircleTouchpointGuidOperationCompleted(object arg) {
            if ((this.SetCircleTouchpointGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCircleTouchpointGuidCompleted(this, new SetCircleTouchpointGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetCircleTouchpointGuid", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCircleTouchpointGuid(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetCircleTouchpointGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetCircleTouchpointGuidAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetCircleTouchpointGuidAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetCircleTouchpointGuidOperationCompleted == null)) {
                this.GetCircleTouchpointGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCircleTouchpointGuidOperationCompleted);
            }
            this.InvokeAsync("GetCircleTouchpointGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetCircleTouchpointGuidOperationCompleted, userState);
        }
        
        private void OnGetCircleTouchpointGuidOperationCompleted(object arg) {
            if ((this.GetCircleTouchpointGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCircleTouchpointGuidCompleted(this, new GetCircleTouchpointGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetCircleRunGuid", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCircleRunGuid(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid) {
            object[] results = this.Invoke("SetCircleRunGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCircleRunGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid) {
            this.SetCircleRunGuidAsync(inUsername, inPassword, inTicketID, inCircleRunGuid, null);
        }
        
        /// <remarks/>
        public void SetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID, string inCircleRunGuid, object userState) {
            if ((this.SetCircleRunGuidOperationCompleted == null)) {
                this.SetCircleRunGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCircleRunGuidOperationCompleted);
            }
            this.InvokeAsync("SetCircleRunGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCircleRunGuid}, this.SetCircleRunGuidOperationCompleted, userState);
        }
        
        private void OnSetCircleRunGuidOperationCompleted(object arg) {
            if ((this.SetCircleRunGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCircleRunGuidCompleted(this, new SetCircleRunGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetCircleRunGuid", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCircleRunGuid(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetCircleRunGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetCircleRunGuidAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetCircleRunGuidAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetCircleRunGuidOperationCompleted == null)) {
                this.GetCircleRunGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCircleRunGuidOperationCompleted);
            }
            this.InvokeAsync("GetCircleRunGuid", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetCircleRunGuidOperationCompleted, userState);
        }
        
        private void OnGetCircleRunGuidOperationCompleted(object arg) {
            if ((this.GetCircleRunGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCircleRunGuidCompleted(this, new GetCircleRunGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDeliveryProvider", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDeliveryProvider(string inUsername, string inPassword, string inTicketID, EmailProviderInfo inDeliveryProviderInfo) {
            object[] results = this.Invoke("SetDeliveryProvider", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDeliveryProviderInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID, EmailProviderInfo inDeliveryProviderInfo) {
            this.SetDeliveryProviderAsync(inUsername, inPassword, inTicketID, inDeliveryProviderInfo, null);
        }
        
        /// <remarks/>
        public void SetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID, EmailProviderInfo inDeliveryProviderInfo, object userState) {
            if ((this.SetDeliveryProviderOperationCompleted == null)) {
                this.SetDeliveryProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDeliveryProviderOperationCompleted);
            }
            this.InvokeAsync("SetDeliveryProvider", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDeliveryProviderInfo}, this.SetDeliveryProviderOperationCompleted, userState);
        }
        
        private void OnSetDeliveryProviderOperationCompleted(object arg) {
            if ((this.SetDeliveryProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDeliveryProviderCompleted(this, new SetDeliveryProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDeliveryProviderByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDeliveryProviderByID(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID) {
            object[] results = this.Invoke("SetDeliveryProviderByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDeliveryProviderID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDeliveryProviderByIDAsync(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID) {
            this.SetDeliveryProviderByIDAsync(inUsername, inPassword, inTicketID, inDeliveryProviderID, null);
        }
        
        /// <remarks/>
        public void SetDeliveryProviderByIDAsync(string inUsername, string inPassword, string inTicketID, string inDeliveryProviderID, object userState) {
            if ((this.SetDeliveryProviderByIDOperationCompleted == null)) {
                this.SetDeliveryProviderByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDeliveryProviderByIDOperationCompleted);
            }
            this.InvokeAsync("SetDeliveryProviderByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDeliveryProviderID}, this.SetDeliveryProviderByIDOperationCompleted, userState);
        }
        
        private void OnSetDeliveryProviderByIDOperationCompleted(object arg) {
            if ((this.SetDeliveryProviderByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDeliveryProviderByIDCompleted(this, new SetDeliveryProviderByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDeliveryProvider", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailProviderInfo GetDeliveryProvider(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDeliveryProvider", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((EmailProviderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDeliveryProviderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDeliveryProviderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDeliveryProviderOperationCompleted == null)) {
                this.GetDeliveryProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeliveryProviderOperationCompleted);
            }
            this.InvokeAsync("GetDeliveryProvider", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDeliveryProviderOperationCompleted, userState);
        }
        
        private void OnGetDeliveryProviderOperationCompleted(object arg) {
            if ((this.GetDeliveryProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeliveryProviderCompleted(this, new GetDeliveryProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDeliveryProviderID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeliveryProviderID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDeliveryProviderID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeliveryProviderIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDeliveryProviderIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDeliveryProviderIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDeliveryProviderIDOperationCompleted == null)) {
                this.GetDeliveryProviderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeliveryProviderIDOperationCompleted);
            }
            this.InvokeAsync("GetDeliveryProviderID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDeliveryProviderIDOperationCompleted, userState);
        }
        
        private void OnGetDeliveryProviderIDOperationCompleted(object arg) {
            if ((this.GetDeliveryProviderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeliveryProviderIDCompleted(this, new GetDeliveryProviderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailHeader", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailHeader(string inUsername, string inPassword, string inTicketID, EmailHeaderInfo inEmailHeaderInfo) {
            object[] results = this.Invoke("SetEmailHeader", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailHeaderInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID, EmailHeaderInfo inEmailHeaderInfo) {
            this.SetEmailHeaderAsync(inUsername, inPassword, inTicketID, inEmailHeaderInfo, null);
        }
        
        /// <remarks/>
        public void SetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID, EmailHeaderInfo inEmailHeaderInfo, object userState) {
            if ((this.SetEmailHeaderOperationCompleted == null)) {
                this.SetEmailHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailHeaderOperationCompleted);
            }
            this.InvokeAsync("SetEmailHeader", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailHeaderInfo}, this.SetEmailHeaderOperationCompleted, userState);
        }
        
        private void OnSetEmailHeaderOperationCompleted(object arg) {
            if ((this.SetEmailHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailHeaderCompleted(this, new SetEmailHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmailHeader", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailHeaderInfo GetEmailHeader(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmailHeader", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((EmailHeaderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmailHeaderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmailHeaderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmailHeaderOperationCompleted == null)) {
                this.GetEmailHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailHeaderOperationCompleted);
            }
            this.InvokeAsync("GetEmailHeader", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmailHeaderOperationCompleted, userState);
        }
        
        private void OnGetEmailHeaderOperationCompleted(object arg) {
            if ((this.GetEmailHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailHeaderCompleted(this, new GetEmailHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailBody", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailBody(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo) {
            object[] results = this.Invoke("SetEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailBodyAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo) {
            this.SetEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyInfo, null);
        }
        
        /// <remarks/>
        public void SetEmailBodyAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo, object userState) {
            if ((this.SetEmailBodyOperationCompleted == null)) {
                this.SetEmailBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailBodyOperationCompleted);
            }
            this.InvokeAsync("SetEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfo}, this.SetEmailBodyOperationCompleted, userState);
        }
        
        private void OnSetEmailBodyOperationCompleted(object arg) {
            if ((this.SetEmailBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailBodyCompleted(this, new SetEmailBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailBodies", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailBodies(string inUsername, string inPassword, string inTicketID, EmailBodyInfo[] inEmailBodyInfoArray) {
            object[] results = this.Invoke("SetEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfoArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo[] inEmailBodyInfoArray) {
            this.SetEmailBodiesAsync(inUsername, inPassword, inTicketID, inEmailBodyInfoArray, null);
        }
        
        /// <remarks/>
        public void SetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo[] inEmailBodyInfoArray, object userState) {
            if ((this.SetEmailBodiesOperationCompleted == null)) {
                this.SetEmailBodiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailBodiesOperationCompleted);
            }
            this.InvokeAsync("SetEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfoArray}, this.SetEmailBodiesOperationCompleted, userState);
        }
        
        private void OnSetEmailBodiesOperationCompleted(object arg) {
            if ((this.SetEmailBodiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailBodiesCompleted(this, new SetEmailBodiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddEmailBody", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEmailBody(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo) {
            object[] results = this.Invoke("AddEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailBodyAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo) {
            this.AddEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyInfo, null);
        }
        
        /// <remarks/>
        public void AddEmailBodyAsync(string inUsername, string inPassword, string inTicketID, EmailBodyInfo inEmailBodyInfo, object userState) {
            if ((this.AddEmailBodyOperationCompleted == null)) {
                this.AddEmailBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailBodyOperationCompleted);
            }
            this.InvokeAsync("AddEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyInfo}, this.AddEmailBodyOperationCompleted, userState);
        }
        
        private void OnAddEmailBodyOperationCompleted(object arg) {
            if ((this.AddEmailBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailBodyCompleted(this, new AddEmailBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailBodyByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions) {
            object[] results = this.Invoke("SetEmailBodyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inBodyOptions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions) {
            this.SetEmailBodyByIDAsync(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions, null);
        }
        
        /// <remarks/>
        public void SetEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions, object userState) {
            if ((this.SetEmailBodyByIDOperationCompleted == null)) {
                this.SetEmailBodyByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailBodyByIDOperationCompleted);
            }
            this.InvokeAsync("SetEmailBodyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inBodyOptions}, this.SetEmailBodyByIDOperationCompleted, userState);
        }
        
        private void OnSetEmailBodyByIDOperationCompleted(object arg) {
            if ((this.SetEmailBodyByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailBodyByIDCompleted(this, new SetEmailBodyByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailBodiesByIDs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailBodiesByIDs(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, EmailBodyOptions[] inBodyOptionsArray) {
            object[] results = this.Invoke("SetEmailBodiesByIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentIDs,
                        inBodyOptionsArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailBodiesByIDsAsync(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, EmailBodyOptions[] inBodyOptionsArray) {
            this.SetEmailBodiesByIDsAsync(inUsername, inPassword, inTicketID, inDocumentIDs, inBodyOptionsArray, null);
        }
        
        /// <remarks/>
        public void SetEmailBodiesByIDsAsync(string inUsername, string inPassword, string inTicketID, string[] inDocumentIDs, EmailBodyOptions[] inBodyOptionsArray, object userState) {
            if ((this.SetEmailBodiesByIDsOperationCompleted == null)) {
                this.SetEmailBodiesByIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailBodiesByIDsOperationCompleted);
            }
            this.InvokeAsync("SetEmailBodiesByIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentIDs,
                        inBodyOptionsArray}, this.SetEmailBodiesByIDsOperationCompleted, userState);
        }
        
        private void OnSetEmailBodiesByIDsOperationCompleted(object arg) {
            if ((this.SetEmailBodiesByIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailBodiesByIDsCompleted(this, new SetEmailBodiesByIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddEmailBodyByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEmailBodyByID(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions) {
            object[] results = this.Invoke("AddEmailBodyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inBodyOptions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions) {
            this.AddEmailBodyByIDAsync(inUsername, inPassword, inTicketID, inDocumentID, inBodyOptions, null);
        }
        
        /// <remarks/>
        public void AddEmailBodyByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, EmailBodyOptions inBodyOptions, object userState) {
            if ((this.AddEmailBodyByIDOperationCompleted == null)) {
                this.AddEmailBodyByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailBodyByIDOperationCompleted);
            }
            this.InvokeAsync("AddEmailBodyByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inBodyOptions}, this.AddEmailBodyByIDOperationCompleted, userState);
        }
        
        private void OnAddEmailBodyByIDOperationCompleted(object arg) {
            if ((this.AddEmailBodyByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailBodyByIDCompleted(this, new AddEmailBodyByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllEmailBodies", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllEmailBodies(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllEmailBodiesAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllEmailBodiesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllEmailBodiesOperationCompleted == null)) {
                this.RemoveAllEmailBodiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllEmailBodiesOperationCompleted);
            }
            this.InvokeAsync("RemoveAllEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllEmailBodiesOperationCompleted, userState);
        }
        
        private void OnRemoveAllEmailBodiesOperationCompleted(object arg) {
            if ((this.RemoveAllEmailBodiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllEmailBodiesCompleted(this, new RemoveAllEmailBodiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmailBodies", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailBodyInfo[] GetEmailBodies(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((EmailBodyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmailBodiesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmailBodiesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmailBodiesOperationCompleted == null)) {
                this.GetEmailBodiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailBodiesOperationCompleted);
            }
            this.InvokeAsync("GetEmailBodies", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmailBodiesOperationCompleted, userState);
        }
        
        private void OnGetEmailBodiesOperationCompleted(object arg) {
            if ((this.GetEmailBodiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailBodiesCompleted(this, new GetEmailBodiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmailBodiesIDs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetEmailBodiesIDs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmailBodiesIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailBodiesIDsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmailBodiesIDsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmailBodiesIDsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmailBodiesIDsOperationCompleted == null)) {
                this.GetEmailBodiesIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailBodiesIDsOperationCompleted);
            }
            this.InvokeAsync("GetEmailBodiesIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmailBodiesIDsOperationCompleted, userState);
        }
        
        private void OnGetEmailBodiesIDsOperationCompleted(object arg) {
            if ((this.GetEmailBodiesIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailBodiesIDsCompleted(this, new GetEmailBodiesIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmailBodyCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetEmailBodyCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmailBodyCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailBodyCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmailBodyCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmailBodyCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmailBodyCountOperationCompleted == null)) {
                this.GetEmailBodyCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailBodyCountOperationCompleted);
            }
            this.InvokeAsync("GetEmailBodyCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmailBodyCountOperationCompleted, userState);
        }
        
        private void OnGetEmailBodyCountOperationCompleted(object arg) {
            if ((this.GetEmailBodyCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailBodyCountCompleted(this, new GetEmailBodyCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthEmailBody", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailBodyInfo GetNthEmailBody(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            object[] results = this.Invoke("GetNthEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyIndex});
            return ((EmailBodyInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthEmailBodyAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            this.GetNthEmailBodyAsync(inUsername, inPassword, inTicketID, inEmailBodyIndex, null);
        }
        
        /// <remarks/>
        public void GetNthEmailBodyAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex, object userState) {
            if ((this.GetNthEmailBodyOperationCompleted == null)) {
                this.GetNthEmailBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthEmailBodyOperationCompleted);
            }
            this.InvokeAsync("GetNthEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyIndex}, this.GetNthEmailBodyOperationCompleted, userState);
        }
        
        private void OnGetNthEmailBodyOperationCompleted(object arg) {
            if ((this.GetNthEmailBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthEmailBodyCompleted(this, new GetNthEmailBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthEmailBodyID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthEmailBodyID(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            object[] results = this.Invoke("GetNthEmailBodyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthEmailBodyIDAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex) {
            this.GetNthEmailBodyIDAsync(inUsername, inPassword, inTicketID, inEmailBodyIndex, null);
        }
        
        /// <remarks/>
        public void GetNthEmailBodyIDAsync(string inUsername, string inPassword, string inTicketID, int inEmailBodyIndex, object userState) {
            if ((this.GetNthEmailBodyIDOperationCompleted == null)) {
                this.GetNthEmailBodyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthEmailBodyIDOperationCompleted);
            }
            this.InvokeAsync("GetNthEmailBodyID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailBodyIndex}, this.GetNthEmailBodyIDOperationCompleted, userState);
        }
        
        private void OnGetNthEmailBodyIDOperationCompleted(object arg) {
            if ((this.GetNthEmailBodyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthEmailBodyIDCompleted(this, new GetNthEmailBodyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetMetaData", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Property[] inProperties) {
            object[] results = this.Invoke("SetMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inProperties});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, Property[] inProperties) {
            this.SetMetaDataAsync(inUsername, inPassword, inTicketID, inGroupName, inProperties, null);
        }
        
        /// <remarks/>
        public void SetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, Property[] inProperties, object userState) {
            if ((this.SetMetaDataOperationCompleted == null)) {
                this.SetMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMetaDataOperationCompleted);
            }
            this.InvokeAsync("SetMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inProperties}, this.SetMetaDataOperationCompleted, userState);
        }
        
        private void OnSetMetaDataOperationCompleted(object arg) {
            if ((this.SetMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMetaDataCompleted(this, new SetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetMetaData", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Property[] GetMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            object[] results = this.Invoke("GetMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inPropertyNames});
            return ((Property[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            this.GetMetaDataAsync(inUsername, inPassword, inTicketID, inGroupName, inPropertyNames, null);
        }
        
        /// <remarks/>
        public void GetMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames, object userState) {
            if ((this.GetMetaDataOperationCompleted == null)) {
                this.GetMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetaDataOperationCompleted);
            }
            this.InvokeAsync("GetMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inPropertyNames}, this.GetMetaDataOperationCompleted, userState);
        }
        
        private void OnGetMetaDataOperationCompleted(object arg) {
            if ((this.GetMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetaDataCompleted(this, new GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAllMetaData", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Property[] GetAllMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            object[] results = this.Invoke("GetAllMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName});
            return ((Property[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            this.GetAllMetaDataAsync(inUsername, inPassword, inTicketID, inGroupName, null);
        }
        
        /// <remarks/>
        public void GetAllMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, object userState) {
            if ((this.GetAllMetaDataOperationCompleted == null)) {
                this.GetAllMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMetaDataOperationCompleted);
            }
            this.InvokeAsync("GetAllMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName}, this.GetAllMetaDataOperationCompleted, userState);
        }
        
        private void OnGetAllMetaDataOperationCompleted(object arg) {
            if ((this.GetAllMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMetaDataCompleted(this, new GetAllMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetMetaDataSubGroups", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMetaDataSubGroups(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            object[] results = this.Invoke("GetMetaDataSubGroups", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMetaDataSubGroupsAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            this.GetMetaDataSubGroupsAsync(inUsername, inPassword, inTicketID, inGroupName, null);
        }
        
        /// <remarks/>
        public void GetMetaDataSubGroupsAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, object userState) {
            if ((this.GetMetaDataSubGroupsOperationCompleted == null)) {
                this.GetMetaDataSubGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetaDataSubGroupsOperationCompleted);
            }
            this.InvokeAsync("GetMetaDataSubGroups", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName}, this.GetMetaDataSubGroupsOperationCompleted, userState);
        }
        
        private void OnGetMetaDataSubGroupsOperationCompleted(object arg) {
            if ((this.GetMetaDataSubGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetaDataSubGroupsCompleted(this, new GetMetaDataSubGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveMetaData", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveMetaData(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            object[] results = this.Invoke("RemoveMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inPropertyNames});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames) {
            this.RemoveMetaDataAsync(inUsername, inPassword, inTicketID, inGroupName, inPropertyNames, null);
        }
        
        /// <remarks/>
        public void RemoveMetaDataAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, string[] inPropertyNames, object userState) {
            if ((this.RemoveMetaDataOperationCompleted == null)) {
                this.RemoveMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMetaDataOperationCompleted);
            }
            this.InvokeAsync("RemoveMetaData", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName,
                        inPropertyNames}, this.RemoveMetaDataOperationCompleted, userState);
        }
        
        private void OnRemoveMetaDataOperationCompleted(object arg) {
            if ((this.RemoveMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMetaDataCompleted(this, new RemoveMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveMetaDataGroup", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveMetaDataGroup(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            object[] results = this.Invoke("RemoveMetaDataGroup", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveMetaDataGroupAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName) {
            this.RemoveMetaDataGroupAsync(inUsername, inPassword, inTicketID, inGroupName, null);
        }
        
        /// <remarks/>
        public void RemoveMetaDataGroupAsync(string inUsername, string inPassword, string inTicketID, string[] inGroupName, object userState) {
            if ((this.RemoveMetaDataGroupOperationCompleted == null)) {
                this.RemoveMetaDataGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMetaDataGroupOperationCompleted);
            }
            this.InvokeAsync("RemoveMetaDataGroup", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inGroupName}, this.RemoveMetaDataGroupOperationCompleted, userState);
        }
        
        private void OnRemoveMetaDataGroupOperationCompleted(object arg) {
            if ((this.RemoveMetaDataGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMetaDataGroupCompleted(this, new RemoveMetaDataGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsMappingExists", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMappingExists(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsMappingExists", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsMappingExistsAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsMappingExistsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsMappingExistsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsMappingExistsOperationCompleted == null)) {
                this.IsMappingExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMappingExistsOperationCompleted);
            }
            this.InvokeAsync("IsMappingExists", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsMappingExistsOperationCompleted, userState);
        }
        
        private void OnIsMappingExistsOperationCompleted(object arg) {
            if ((this.IsMappingExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMappingExistsCompleted(this, new IsMappingExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFieldMappings", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FieldMappings GetFieldMappings(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFieldMappings", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((FieldMappings)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldMappingsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFieldMappingsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFieldMappingsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFieldMappingsOperationCompleted == null)) {
                this.GetFieldMappingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldMappingsOperationCompleted);
            }
            this.InvokeAsync("GetFieldMappings", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFieldMappingsOperationCompleted, userState);
        }
        
        private void OnGetFieldMappingsOperationCompleted(object arg) {
            if ((this.GetFieldMappingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldMappingsCompleted(this, new GetFieldMappingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetFieldMapping", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFieldMapping(string inUsername, string inPassword, string inTicketID, FieldMappings inFieldMapping) {
            object[] results = this.Invoke("SetFieldMapping", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFieldMapping});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFieldMappingAsync(string inUsername, string inPassword, string inTicketID, FieldMappings inFieldMapping) {
            this.SetFieldMappingAsync(inUsername, inPassword, inTicketID, inFieldMapping, null);
        }
        
        /// <remarks/>
        public void SetFieldMappingAsync(string inUsername, string inPassword, string inTicketID, FieldMappings inFieldMapping, object userState) {
            if ((this.SetFieldMappingOperationCompleted == null)) {
                this.SetFieldMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFieldMappingOperationCompleted);
            }
            this.InvokeAsync("SetFieldMapping", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFieldMapping}, this.SetFieldMappingOperationCompleted, userState);
        }
        
        private void OnSetFieldMappingOperationCompleted(object arg) {
            if ((this.SetFieldMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFieldMappingCompleted(this, new SetFieldMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetFieldMappingByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFieldMappingByID(string inUsername, string inPassword, string inTicketID, string inRecipientTableID) {
            object[] results = this.Invoke("SetFieldMappingByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRecipientTableID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFieldMappingByIDAsync(string inUsername, string inPassword, string inTicketID, string inRecipientTableID) {
            this.SetFieldMappingByIDAsync(inUsername, inPassword, inTicketID, inRecipientTableID, null);
        }
        
        /// <remarks/>
        public void SetFieldMappingByIDAsync(string inUsername, string inPassword, string inTicketID, string inRecipientTableID, object userState) {
            if ((this.SetFieldMappingByIDOperationCompleted == null)) {
                this.SetFieldMappingByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFieldMappingByIDOperationCompleted);
            }
            this.InvokeAsync("SetFieldMappingByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRecipientTableID}, this.SetFieldMappingByIDOperationCompleted, userState);
        }
        
        private void OnSetFieldMappingByIDOperationCompleted(object arg) {
            if ((this.SetFieldMappingByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFieldMappingByIDCompleted(this, new SetFieldMappingByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveFieldMapping", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveFieldMapping(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveFieldMapping", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFieldMappingAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveFieldMappingAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveFieldMappingAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveFieldMappingOperationCompleted == null)) {
                this.RemoveFieldMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFieldMappingOperationCompleted);
            }
            this.InvokeAsync("RemoveFieldMapping", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveFieldMappingOperationCompleted, userState);
        }
        
        private void OnRemoveFieldMappingOperationCompleted(object arg) {
            if ((this.RemoveFieldMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFieldMappingCompleted(this, new RemoveFieldMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthRIInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecipientsInfo GetNthRIInfo(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            object[] results = this.Invoke("GetNthRIInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex});
            return ((RecipientsInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthRIInfoAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            this.GetNthRIInfoAsync(inUsername, inPassword, inTicketID, inRIIndex, null);
        }
        
        /// <remarks/>
        public void GetNthRIInfoAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex, object userState) {
            if ((this.GetNthRIInfoOperationCompleted == null)) {
                this.GetNthRIInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthRIInfoOperationCompleted);
            }
            this.InvokeAsync("GetNthRIInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex}, this.GetNthRIInfoOperationCompleted, userState);
        }
        
        private void OnGetNthRIInfoOperationCompleted(object arg) {
            if ((this.GetNthRIInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthRIInfoCompleted(this, new GetNthRIInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthRIDataSourceID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthRIDataSourceID(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            object[] results = this.Invoke("GetNthRIDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthRIDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            this.GetNthRIDataSourceIDAsync(inUsername, inPassword, inTicketID, inRIIndex, null);
        }
        
        /// <remarks/>
        public void GetNthRIDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex, object userState) {
            if ((this.GetNthRIDataSourceIDOperationCompleted == null)) {
                this.GetNthRIDataSourceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthRIDataSourceIDOperationCompleted);
            }
            this.InvokeAsync("GetNthRIDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex}, this.GetNthRIDataSourceIDOperationCompleted, userState);
        }
        
        private void OnGetNthRIDataSourceIDOperationCompleted(object arg) {
            if ((this.GetNthRIDataSourceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthRIDataSourceIDCompleted(this, new GetNthRIDataSourceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthRIDataSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Connection GetNthRIDataSource(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            object[] results = this.Invoke("GetNthRIDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex});
            return ((Connection)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthRIDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            this.GetNthRIDataSourceAsync(inUsername, inPassword, inTicketID, inRIIndex, null);
        }
        
        /// <remarks/>
        public void GetNthRIDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex, object userState) {
            if ((this.GetNthRIDataSourceOperationCompleted == null)) {
                this.GetNthRIDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthRIDataSourceOperationCompleted);
            }
            this.InvokeAsync("GetNthRIDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex}, this.GetNthRIDataSourceOperationCompleted, userState);
        }
        
        private void OnGetNthRIDataSourceOperationCompleted(object arg) {
            if ((this.GetNthRIDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthRIDataSourceCompleted(this, new GetNthRIDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddRI", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRI(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection) {
            object[] results = this.Invoke("AddRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inConnection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRIAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection) {
            this.AddRIAsync(inUsername, inPassword, inTicketID, inRIInfo, inConnection, null);
        }
        
        /// <remarks/>
        public void AddRIAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection, object userState) {
            if ((this.AddRIOperationCompleted == null)) {
                this.AddRIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRIOperationCompleted);
            }
            this.InvokeAsync("AddRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inConnection}, this.AddRIOperationCompleted, userState);
        }
        
        private void OnAddRIOperationCompleted(object arg) {
            if ((this.AddRICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRICompleted(this, new AddRICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddRIByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRIByID(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID) {
            object[] results = this.Invoke("AddRIByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inDataSourceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRIByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID) {
            this.AddRIByIDAsync(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID, null);
        }
        
        /// <remarks/>
        public void AddRIByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID, object userState) {
            if ((this.AddRIByIDOperationCompleted == null)) {
                this.AddRIByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRIByIDOperationCompleted);
            }
            this.InvokeAsync("AddRIByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inDataSourceID}, this.AddRIByIDOperationCompleted, userState);
        }
        
        private void OnAddRIByIDOperationCompleted(object arg) {
            if ((this.AddRIByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRIByIDCompleted(this, new AddRIByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddDefaultRI", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            object[] results = this.Invoke("AddDefaultRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inTableName,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            this.AddDefaultRIAsync(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void AddDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented, object userState) {
            if ((this.AddDefaultRIOperationCompleted == null)) {
                this.AddDefaultRIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDefaultRIOperationCompleted);
            }
            this.InvokeAsync("AddDefaultRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inTableName,
                        inFlatOriented}, this.AddDefaultRIOperationCompleted, userState);
        }
        
        private void OnAddDefaultRIOperationCompleted(object arg) {
            if ((this.AddDefaultRICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDefaultRICompleted(this, new AddDefaultRICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIOnDemandInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIOnDemandInfo(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo) {
            object[] results = this.Invoke("SetRIOnDemandInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRecipientID,
                        inRecipientInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIOnDemandInfoAsync(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo) {
            this.SetRIOnDemandInfoAsync(inUsername, inPassword, inTicketID, inRecipientID, inRecipientInfo, null);
        }
        
        /// <remarks/>
        public void SetRIOnDemandInfoAsync(string inUsername, string inPassword, string inTicketID, string inRecipientID, string inRecipientInfo, object userState) {
            if ((this.SetRIOnDemandInfoOperationCompleted == null)) {
                this.SetRIOnDemandInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIOnDemandInfoOperationCompleted);
            }
            this.InvokeAsync("SetRIOnDemandInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRecipientID,
                        inRecipientInfo}, this.SetRIOnDemandInfoOperationCompleted, userState);
        }
        
        private void OnSetRIOnDemandInfoOperationCompleted(object arg) {
            if ((this.SetRIOnDemandInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIOnDemandInfoCompleted(this, new SetRIOnDemandInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRIOnDemandRecipientID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRIOnDemandRecipientID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRIOnDemandRecipientID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIOnDemandRecipientIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRIOnDemandRecipientIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRIOnDemandRecipientIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRIOnDemandRecipientIDOperationCompleted == null)) {
                this.GetRIOnDemandRecipientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIOnDemandRecipientIDOperationCompleted);
            }
            this.InvokeAsync("GetRIOnDemandRecipientID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRIOnDemandRecipientIDOperationCompleted, userState);
        }
        
        private void OnGetRIOnDemandRecipientIDOperationCompleted(object arg) {
            if ((this.GetRIOnDemandRecipientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIOnDemandRecipientIDCompleted(this, new GetRIOnDemandRecipientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRIOnDemandRecipientInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRIOnDemandRecipientInfo(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRIOnDemandRecipientInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIOnDemandRecipientInfoAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRIOnDemandRecipientInfoAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRIOnDemandRecipientInfoAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRIOnDemandRecipientInfoOperationCompleted == null)) {
                this.GetRIOnDemandRecipientInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIOnDemandRecipientInfoOperationCompleted);
            }
            this.InvokeAsync("GetRIOnDemandRecipientInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRIOnDemandRecipientInfoOperationCompleted, userState);
        }
        
        private void OnGetRIOnDemandRecipientInfoOperationCompleted(object arg) {
            if ((this.GetRIOnDemandRecipientInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIOnDemandRecipientInfoCompleted(this, new GetRIOnDemandRecipientInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobType(string inUsername, string inPassword, string inTicketID, string inJobType) {
            object[] results = this.Invoke("SetJobType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inJobType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobTypeAsync(string inUsername, string inPassword, string inTicketID, string inJobType) {
            this.SetJobTypeAsync(inUsername, inPassword, inTicketID, inJobType, null);
        }
        
        /// <remarks/>
        public void SetJobTypeAsync(string inUsername, string inPassword, string inTicketID, string inJobType, object userState) {
            if ((this.SetJobTypeOperationCompleted == null)) {
                this.SetJobTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobTypeOperationCompleted);
            }
            this.InvokeAsync("SetJobType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inJobType}, this.SetJobTypeOperationCompleted, userState);
        }
        
        private void OnSetJobTypeOperationCompleted(object arg) {
            if ((this.SetJobTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobTypeCompleted(this, new SetJobTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJobType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJobTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJobTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJobTypeOperationCompleted == null)) {
                this.GetJobTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobTypeOperationCompleted);
            }
            this.InvokeAsync("GetJobType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJobTypeOperationCompleted, userState);
        }
        
        private void OnGetJobTypeOperationCompleted(object arg) {
            if ((this.GetJobTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobTypeCompleted(this, new GetJobTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobPriority", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJobPriority(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJobPriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobPriorityAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJobPriorityAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJobPriorityAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJobPriorityOperationCompleted == null)) {
                this.GetJobPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobPriorityOperationCompleted);
            }
            this.InvokeAsync("GetJobPriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJobPriorityOperationCompleted, userState);
        }
        
        private void OnGetJobPriorityOperationCompleted(object arg) {
            if ((this.GetJobPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobPriorityCompleted(this, new GetJobPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobPriority", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobPriority(string inUsername, string inPassword, string inTicketID, string inJobPriority) {
            object[] results = this.Invoke("SetJobPriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inJobPriority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobPriorityAsync(string inUsername, string inPassword, string inTicketID, string inJobPriority) {
            this.SetJobPriorityAsync(inUsername, inPassword, inTicketID, inJobPriority, null);
        }
        
        /// <remarks/>
        public void SetJobPriorityAsync(string inUsername, string inPassword, string inTicketID, string inJobPriority, object userState) {
            if ((this.SetJobPriorityOperationCompleted == null)) {
                this.SetJobPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobPriorityOperationCompleted);
            }
            this.InvokeAsync("SetJobPriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inJobPriority}, this.SetJobPriorityOperationCompleted, userState);
        }
        
        private void OnSetJobPriorityOperationCompleted(object arg) {
            if ((this.SetJobPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobPriorityCompleted(this, new SetJobPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobTrackingWebService", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobTrackingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            object[] results = this.Invoke("SetJobTrackingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebServiceURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            this.SetJobTrackingWebServiceAsync(inUsername, inPassword, inTicketID, inWebServiceURL, null);
        }
        
        /// <remarks/>
        public void SetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL, object userState) {
            if ((this.SetJobTrackingWebServiceOperationCompleted == null)) {
                this.SetJobTrackingWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobTrackingWebServiceOperationCompleted);
            }
            this.InvokeAsync("SetJobTrackingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebServiceURL}, this.SetJobTrackingWebServiceOperationCompleted, userState);
        }
        
        private void OnSetJobTrackingWebServiceOperationCompleted(object arg) {
            if ((this.SetJobTrackingWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobTrackingWebServiceCompleted(this, new SetJobTrackingWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobTrackingWebService", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobTrackingWebService(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJobTrackingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJobTrackingWebServiceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJobTrackingWebServiceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJobTrackingWebServiceOperationCompleted == null)) {
                this.GetJobTrackingWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobTrackingWebServiceOperationCompleted);
            }
            this.InvokeAsync("GetJobTrackingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJobTrackingWebServiceOperationCompleted, userState);
        }
        
        private void OnGetJobTrackingWebServiceOperationCompleted(object arg) {
            if ((this.GetJobTrackingWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobTrackingWebServiceCompleted(this, new GetJobTrackingWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobReportingWebService", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobReportingWebService(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            object[] results = this.Invoke("SetJobReportingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebServiceURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL) {
            this.SetJobReportingWebServiceAsync(inUsername, inPassword, inTicketID, inWebServiceURL, null);
        }
        
        /// <remarks/>
        public void SetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID, string inWebServiceURL, object userState) {
            if ((this.SetJobReportingWebServiceOperationCompleted == null)) {
                this.SetJobReportingWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobReportingWebServiceOperationCompleted);
            }
            this.InvokeAsync("SetJobReportingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebServiceURL}, this.SetJobReportingWebServiceOperationCompleted, userState);
        }
        
        private void OnSetJobReportingWebServiceOperationCompleted(object arg) {
            if ((this.SetJobReportingWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobReportingWebServiceCompleted(this, new SetJobReportingWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobReportingWebService", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobReportingWebService(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetJobReportingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetJobReportingWebServiceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetJobReportingWebServiceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetJobReportingWebServiceOperationCompleted == null)) {
                this.GetJobReportingWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobReportingWebServiceOperationCompleted);
            }
            this.InvokeAsync("GetJobReportingWebService", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetJobReportingWebServiceOperationCompleted, userState);
        }
        
        private void OnGetJobReportingWebServiceOperationCompleted(object arg) {
            if ((this.GetJobReportingWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobReportingWebServiceCompleted(this, new GetJobReportingWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetSplittedJobInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetSplittedJobInfo(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput) {
            object[] results = this.Invoke("SetSplittedJobInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSplitNum,
                        inSplitType,
                        inOrigFrom,
                        inOrigTo,
                        inMergeOutput});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSplittedJobInfoAsync(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput) {
            this.SetSplittedJobInfoAsync(inUsername, inPassword, inTicketID, inSplitNum, inSplitType, inOrigFrom, inOrigTo, inMergeOutput, null);
        }
        
        /// <remarks/>
        public void SetSplittedJobInfoAsync(string inUsername, string inPassword, string inTicketID, int inSplitNum, int inSplitType, int inOrigFrom, int inOrigTo, bool inMergeOutput, object userState) {
            if ((this.SetSplittedJobInfoOperationCompleted == null)) {
                this.SetSplittedJobInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSplittedJobInfoOperationCompleted);
            }
            this.InvokeAsync("SetSplittedJobInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSplitNum,
                        inSplitType,
                        inOrigFrom,
                        inOrigTo,
                        inMergeOutput}, this.SetSplittedJobInfoOperationCompleted, userState);
        }
        
        private void OnSetSplittedJobInfoOperationCompleted(object arg) {
            if ((this.SetSplittedJobInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSplittedJobInfoCompleted(this, new SetSplittedJobInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsSplittedJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSplittedJob(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsSplittedJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSplittedJobAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsSplittedJobAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsSplittedJobAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsSplittedJobOperationCompleted == null)) {
                this.IsSplittedJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSplittedJobOperationCompleted);
            }
            this.InvokeAsync("IsSplittedJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsSplittedJobOperationCompleted, userState);
        }
        
        private void OnIsSplittedJobOperationCompleted(object arg) {
            if ((this.IsSplittedJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSplittedJobCompleted(this, new IsSplittedJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsParallelProcessingJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsParallelProcessingJob(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsParallelProcessingJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsParallelProcessingJobAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsParallelProcessingJobAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsParallelProcessingJobAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsParallelProcessingJobOperationCompleted == null)) {
                this.IsParallelProcessingJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsParallelProcessingJobOperationCompleted);
            }
            this.InvokeAsync("IsParallelProcessingJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsParallelProcessingJobOperationCompleted, userState);
        }
        
        private void OnIsParallelProcessingJobOperationCompleted(object arg) {
            if ((this.IsParallelProcessingJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsParallelProcessingJobCompleted(this, new IsParallelProcessingJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAutomaticSubSplitAndMerge", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAutomaticSubSplitAndMerge(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge) {
            object[] results = this.Invoke("SetAutomaticSubSplitAndMerge", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEnableAutomaticSubSplit,
                        inEnableAutomaticMerge});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAutomaticSubSplitAndMergeAsync(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge) {
            this.SetAutomaticSubSplitAndMergeAsync(inUsername, inPassword, inTicketID, inEnableAutomaticSubSplit, inEnableAutomaticMerge, null);
        }
        
        /// <remarks/>
        public void SetAutomaticSubSplitAndMergeAsync(string inUsername, string inPassword, string inTicketID, bool inEnableAutomaticSubSplit, bool inEnableAutomaticMerge, object userState) {
            if ((this.SetAutomaticSubSplitAndMergeOperationCompleted == null)) {
                this.SetAutomaticSubSplitAndMergeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAutomaticSubSplitAndMergeOperationCompleted);
            }
            this.InvokeAsync("SetAutomaticSubSplitAndMerge", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEnableAutomaticSubSplit,
                        inEnableAutomaticMerge}, this.SetAutomaticSubSplitAndMergeOperationCompleted, userState);
        }
        
        private void OnSetAutomaticSubSplitAndMergeOperationCompleted(object arg) {
            if ((this.SetAutomaticSubSplitAndMergeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAutomaticSubSplitAndMergeCompleted(this, new SetAutomaticSubSplitAndMergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsAutomaticSubSplitEnabled", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAutomaticSubSplitEnabled(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsAutomaticSubSplitEnabled", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAutomaticSubSplitEnabledAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsAutomaticSubSplitEnabledAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsAutomaticSubSplitEnabledAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsAutomaticSubSplitEnabledOperationCompleted == null)) {
                this.IsAutomaticSubSplitEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAutomaticSubSplitEnabledOperationCompleted);
            }
            this.InvokeAsync("IsAutomaticSubSplitEnabled", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsAutomaticSubSplitEnabledOperationCompleted, userState);
        }
        
        private void OnIsAutomaticSubSplitEnabledOperationCompleted(object arg) {
            if ((this.IsAutomaticSubSplitEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAutomaticSubSplitEnabledCompleted(this, new IsAutomaticSubSplitEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsAutomaticMergeEnabled", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAutomaticMergeEnabled(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsAutomaticMergeEnabled", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAutomaticMergeEnabledAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsAutomaticMergeEnabledAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsAutomaticMergeEnabledAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsAutomaticMergeEnabledOperationCompleted == null)) {
                this.IsAutomaticMergeEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAutomaticMergeEnabledOperationCompleted);
            }
            this.InvokeAsync("IsAutomaticMergeEnabled", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsAutomaticMergeEnabledOperationCompleted, userState);
        }
        
        private void OnIsAutomaticMergeEnabledOperationCompleted(object arg) {
            if ((this.IsAutomaticMergeEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAutomaticMergeEnabledCompleted(this, new IsAutomaticMergeEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsSubJob", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSubJob(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsSubJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSubJobAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsSubJobAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsSubJobAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsSubJobOperationCompleted == null)) {
                this.IsSubJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSubJobOperationCompleted);
            }
            this.InvokeAsync("IsSubJob", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsSubJobOperationCompleted, userState);
        }
        
        private void OnIsSubJobOperationCompleted(object arg) {
            if ((this.IsSubJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSubJobCompleted(this, new IsSubJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubJobInfo GetSubJobInfo(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((SubJobInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobInfoAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobInfoAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobInfoAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobInfoOperationCompleted == null)) {
                this.GetSubJobInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobInfoOperationCompleted);
            }
            this.InvokeAsync("GetSubJobInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobInfoOperationCompleted, userState);
        }
        
        private void OnGetSubJobInfoOperationCompleted(object arg) {
            if ((this.GetSubJobInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobInfoCompleted(this, new GetSubJobInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobIndex", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSubJobIndex(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobIndex", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobIndexAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobIndexAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobIndexAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobIndexOperationCompleted == null)) {
                this.GetSubJobIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobIndexOperationCompleted);
            }
            this.InvokeAsync("GetSubJobIndex", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobIndexOperationCompleted, userState);
        }
        
        private void OnGetSubJobIndexOperationCompleted(object arg) {
            if ((this.GetSubJobIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobIndexCompleted(this, new GetSubJobIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobOrigFrom", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSubJobOrigFrom(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobOrigFrom", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobOrigFromAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobOrigFromAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobOrigFromAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobOrigFromOperationCompleted == null)) {
                this.GetSubJobOrigFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobOrigFromOperationCompleted);
            }
            this.InvokeAsync("GetSubJobOrigFrom", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobOrigFromOperationCompleted, userState);
        }
        
        private void OnGetSubJobOrigFromOperationCompleted(object arg) {
            if ((this.GetSubJobOrigFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobOrigFromCompleted(this, new GetSubJobOrigFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobOrigTo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSubJobOrigTo(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobOrigTo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobOrigToAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobOrigToAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobOrigToAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobOrigToOperationCompleted == null)) {
                this.GetSubJobOrigToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobOrigToOperationCompleted);
            }
            this.InvokeAsync("GetSubJobOrigTo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobOrigToOperationCompleted, userState);
        }
        
        private void OnGetSubJobOrigToOperationCompleted(object arg) {
            if ((this.GetSubJobOrigToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobOrigToCompleted(this, new GetSubJobOrigToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobSplitCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSubJobSplitCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobSplitCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobSplitCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobSplitCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobSplitCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobSplitCountOperationCompleted == null)) {
                this.GetSubJobSplitCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobSplitCountOperationCompleted);
            }
            this.InvokeAsync("GetSubJobSplitCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobSplitCountOperationCompleted, userState);
        }
        
        private void OnGetSubJobSplitCountOperationCompleted(object arg) {
            if ((this.GetSubJobSplitCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobSplitCountCompleted(this, new GetSubJobSplitCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubJobSplitType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSubJobSplitType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubJobSplitType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubJobSplitTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubJobSplitTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubJobSplitTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubJobSplitTypeOperationCompleted == null)) {
                this.GetSubJobSplitTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubJobSplitTypeOperationCompleted);
            }
            this.InvokeAsync("GetSubJobSplitType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubJobSplitTypeOperationCompleted, userState);
        }
        
        private void OnGetSubJobSplitTypeOperationCompleted(object arg) {
            if ((this.GetSubJobSplitTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubJobSplitTypeCompleted(this, new GetSubJobSplitTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobParameter(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            object[] results = this.Invoke("SetJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            this.SetJobParameterAsync(inUsername, inPassword, inTicketID, inParam, null);
        }
        
        /// <remarks/>
        public void SetJobParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam, object userState) {
            if ((this.SetJobParameterOperationCompleted == null)) {
                this.SetJobParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobParameterOperationCompleted);
            }
            this.InvokeAsync("SetJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam}, this.SetJobParameterOperationCompleted, userState);
        }
        
        private void OnSetJobParameterOperationCompleted(object arg) {
            if ((this.SetJobParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobParameterCompleted(this, new SetJobParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJobParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJobParameters(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJobParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.SetJobParametersAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void SetJobParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.SetJobParametersOperationCompleted == null)) {
                this.SetJobParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJobParametersOperationCompleted);
            }
            this.InvokeAsync("SetJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.SetJobParametersOperationCompleted, userState);
        }
        
        private void OnSetJobParametersOperationCompleted(object arg) {
            if ((this.SetJobParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJobParametersCompleted(this, new SetJobParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Parameter GetJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("GetJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((Parameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.GetJobParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void GetJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.GetJobParameterOperationCompleted == null)) {
                this.GetJobParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobParameterOperationCompleted);
            }
            this.InvokeAsync("GetJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.GetJobParameterOperationCompleted, userState);
        }
        
        private void OnGetJobParameterOperationCompleted(object arg) {
            if ((this.GetJobParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobParameterCompleted(this, new GetJobParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJobParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Parameter[] GetJobParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            object[] results = this.Invoke("GetJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames});
            return ((Parameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.GetJobParametersAsync(inUsername, inPassword, inTicketID, inParameterNames, null);
        }
        
        /// <remarks/>
        public void GetJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames, object userState) {
            if ((this.GetJobParametersOperationCompleted == null)) {
                this.GetJobParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobParametersOperationCompleted);
            }
            this.InvokeAsync("GetJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames}, this.GetJobParametersOperationCompleted, userState);
        }
        
        private void OnGetJobParametersOperationCompleted(object arg) {
            if ((this.GetJobParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobParametersCompleted(this, new GetJobParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJobParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJobParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("RemoveJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.RemoveJobParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void RemoveJobParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.RemoveJobParameterOperationCompleted == null)) {
                this.RemoveJobParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJobParameterOperationCompleted);
            }
            this.InvokeAsync("RemoveJobParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.RemoveJobParameterOperationCompleted, userState);
        }
        
        private void OnRemoveJobParameterOperationCompleted(object arg) {
            if ((this.RemoveJobParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJobParameterCompleted(this, new RemoveJobParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJobParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJobParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            object[] results = this.Invoke("RemoveJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            this.RemoveJobParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray, null);
        }
        
        /// <remarks/>
        public void RemoveJobParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray, object userState) {
            if ((this.RemoveJobParametersOperationCompleted == null)) {
                this.RemoveJobParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJobParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray}, this.RemoveJobParametersOperationCompleted, userState);
        }
        
        private void OnRemoveJobParametersOperationCompleted(object arg) {
            if ((this.RemoveJobParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJobParametersCompleted(this, new RemoveJobParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllJobParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllJobParameters(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllJobParametersAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllJobParametersAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllJobParametersAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllJobParametersOperationCompleted == null)) {
                this.RemoveAllJobParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllJobParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveAllJobParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllJobParametersOperationCompleted, userState);
        }
        
        private void OnRemoveAllJobParametersOperationCompleted(object arg) {
            if ((this.RemoveAllJobParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllJobParametersCompleted(this, new RemoveAllJobParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailInfo(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL) {
            object[] results = this.Invoke("SetEmailInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailADORName,
                        inSenderADORName,
                        inSubjectADORName,
                        inEmbed,
                        inOutputType,
                        inBaseURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailInfoAsync(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL) {
            this.SetEmailInfoAsync(inUsername, inPassword, inTicketID, inEmailADORName, inSenderADORName, inSubjectADORName, inEmbed, inOutputType, inBaseURL, null);
        }
        
        /// <remarks/>
        public void SetEmailInfoAsync(string inUsername, string inPassword, string inTicketID, string inEmailADORName, string inSenderADORName, string inSubjectADORName, bool inEmbed, string inOutputType, string inBaseURL, object userState) {
            if ((this.SetEmailInfoOperationCompleted == null)) {
                this.SetEmailInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailInfoOperationCompleted);
            }
            this.InvokeAsync("SetEmailInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmailADORName,
                        inSenderADORName,
                        inSubjectADORName,
                        inEmbed,
                        inOutputType,
                        inBaseURL}, this.SetEmailInfoOperationCompleted, userState);
        }
        
        private void OnSetEmailInfoOperationCompleted(object arg) {
            if ((this.SetEmailInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailInfoCompleted(this, new SetEmailInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmailAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmailAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            object[] results = this.Invoke("SetEmailAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            this.SetEmailAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName, null);
        }
        
        /// <remarks/>
        public void SetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName, object userState) {
            if ((this.SetEmailAdorNameOperationCompleted == null)) {
                this.SetEmailAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmailAdorNameOperationCompleted);
            }
            this.InvokeAsync("SetEmailAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName}, this.SetEmailAdorNameOperationCompleted, userState);
        }
        
        private void OnSetEmailAdorNameOperationCompleted(object arg) {
            if ((this.SetEmailAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmailAdorNameCompleted(this, new SetEmailAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetSenderAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetSenderAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            object[] results = this.Invoke("SetSenderAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            this.SetSenderAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName, null);
        }
        
        /// <remarks/>
        public void SetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName, object userState) {
            if ((this.SetSenderAdorNameOperationCompleted == null)) {
                this.SetSenderAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSenderAdorNameOperationCompleted);
            }
            this.InvokeAsync("SetSenderAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName}, this.SetSenderAdorNameOperationCompleted, userState);
        }
        
        private void OnSetSenderAdorNameOperationCompleted(object arg) {
            if ((this.SetSenderAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSenderAdorNameCompleted(this, new SetSenderAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetSubjectAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetSubjectAdorName(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            object[] results = this.Invoke("SetSubjectAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName) {
            this.SetSubjectAdorNameAsync(inUsername, inPassword, inTicketID, inAdorName, null);
        }
        
        /// <remarks/>
        public void SetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID, string inAdorName, object userState) {
            if ((this.SetSubjectAdorNameOperationCompleted == null)) {
                this.SetSubjectAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSubjectAdorNameOperationCompleted);
            }
            this.InvokeAsync("SetSubjectAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAdorName}, this.SetSubjectAdorNameOperationCompleted, userState);
        }
        
        private void OnSetSubjectAdorNameOperationCompleted(object arg) {
            if ((this.SetSubjectAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSubjectAdorNameCompleted(this, new SetSubjectAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEmbedEmailBody", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmbedEmailBody(string inUsername, string inPassword, string inTicketID, bool inEmbed) {
            object[] results = this.Invoke("SetEmbedEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmbed});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID, bool inEmbed) {
            this.SetEmbedEmailBodyAsync(inUsername, inPassword, inTicketID, inEmbed, null);
        }
        
        /// <remarks/>
        public void SetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID, bool inEmbed, object userState) {
            if ((this.SetEmbedEmailBodyOperationCompleted == null)) {
                this.SetEmbedEmailBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmbedEmailBodyOperationCompleted);
            }
            this.InvokeAsync("SetEmbedEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEmbed}, this.SetEmbedEmailBodyOperationCompleted, userState);
        }
        
        private void OnSetEmbedEmailBodyOperationCompleted(object arg) {
            if ((this.SetEmbedEmailBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmbedEmailBodyCompleted(this, new SetEmbedEmailBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetProcessEmailOutputType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID, string inType) {
            object[] results = this.Invoke("SetProcessEmailOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType) {
            this.SetProcessEmailOutputTypeAsync(inUsername, inPassword, inTicketID, inType, null);
        }
        
        /// <remarks/>
        public void SetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType, object userState) {
            if ((this.SetProcessEmailOutputTypeOperationCompleted == null)) {
                this.SetProcessEmailOutputTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetProcessEmailOutputTypeOperationCompleted);
            }
            this.InvokeAsync("SetProcessEmailOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType}, this.SetProcessEmailOutputTypeOperationCompleted, userState);
        }
        
        private void OnSetProcessEmailOutputTypeOperationCompleted(object arg) {
            if ((this.SetProcessEmailOutputTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetProcessEmailOutputTypeCompleted(this, new SetProcessEmailOutputTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOnDemandBaseURL", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID, string inBaseURL) {
            object[] results = this.Invoke("SetOnDemandBaseURL", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inBaseURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID, string inBaseURL) {
            this.SetOnDemandBaseURLAsync(inUsername, inPassword, inTicketID, inBaseURL, null);
        }
        
        /// <remarks/>
        public void SetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID, string inBaseURL, object userState) {
            if ((this.SetOnDemandBaseURLOperationCompleted == null)) {
                this.SetOnDemandBaseURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOnDemandBaseURLOperationCompleted);
            }
            this.InvokeAsync("SetOnDemandBaseURL", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inBaseURL}, this.SetOnDemandBaseURLOperationCompleted, userState);
        }
        
        private void OnSetOnDemandBaseURLOperationCompleted(object arg) {
            if ((this.SetOnDemandBaseURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOnDemandBaseURLCompleted(this, new SetOnDemandBaseURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmailAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEmailAdorName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmailAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmailAdorNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmailAdorNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmailAdorNameOperationCompleted == null)) {
                this.GetEmailAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailAdorNameOperationCompleted);
            }
            this.InvokeAsync("GetEmailAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmailAdorNameOperationCompleted, userState);
        }
        
        private void OnGetEmailAdorNameOperationCompleted(object arg) {
            if ((this.GetEmailAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailAdorNameCompleted(this, new GetEmailAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSenderAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSenderAdorName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSenderAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSenderAdorNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSenderAdorNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSenderAdorNameOperationCompleted == null)) {
                this.GetSenderAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSenderAdorNameOperationCompleted);
            }
            this.InvokeAsync("GetSenderAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSenderAdorNameOperationCompleted, userState);
        }
        
        private void OnGetSenderAdorNameOperationCompleted(object arg) {
            if ((this.GetSenderAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSenderAdorNameCompleted(this, new GetSenderAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSubjectAdorName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubjectAdorName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSubjectAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSubjectAdorNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSubjectAdorNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSubjectAdorNameOperationCompleted == null)) {
                this.GetSubjectAdorNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubjectAdorNameOperationCompleted);
            }
            this.InvokeAsync("GetSubjectAdorName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSubjectAdorNameOperationCompleted, userState);
        }
        
        private void OnGetSubjectAdorNameOperationCompleted(object arg) {
            if ((this.GetSubjectAdorNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubjectAdorNameCompleted(this, new GetSubjectAdorNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEmbedEmailBody", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetEmbedEmailBody(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEmbedEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEmbedEmailBodyAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEmbedEmailBodyAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEmbedEmailBodyOperationCompleted == null)) {
                this.GetEmbedEmailBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmbedEmailBodyOperationCompleted);
            }
            this.InvokeAsync("GetEmbedEmailBody", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEmbedEmailBodyOperationCompleted, userState);
        }
        
        private void OnGetEmbedEmailBodyOperationCompleted(object arg) {
            if ((this.GetEmbedEmailBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmbedEmailBodyCompleted(this, new GetEmbedEmailBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetProcessEmailOutputType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessEmailOutputType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetProcessEmailOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetProcessEmailOutputTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetProcessEmailOutputTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetProcessEmailOutputTypeOperationCompleted == null)) {
                this.GetProcessEmailOutputTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessEmailOutputTypeOperationCompleted);
            }
            this.InvokeAsync("GetProcessEmailOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetProcessEmailOutputTypeOperationCompleted, userState);
        }
        
        private void OnGetProcessEmailOutputTypeOperationCompleted(object arg) {
            if ((this.GetProcessEmailOutputTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessEmailOutputTypeCompleted(this, new GetProcessEmailOutputTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOnDemandBaseURL", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOnDemandBaseURL(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOnDemandBaseURL", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOnDemandBaseURLAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOnDemandBaseURLAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOnDemandBaseURLOperationCompleted == null)) {
                this.GetOnDemandBaseURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnDemandBaseURLOperationCompleted);
            }
            this.InvokeAsync("GetOnDemandBaseURL", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOnDemandBaseURLOperationCompleted, userState);
        }
        
        private void OnGetOnDemandBaseURLOperationCompleted(object arg) {
            if ((this.GetOnDemandBaseURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnDemandBaseURLCompleted(this, new GetOnDemandBaseURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputFileNameOption", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOutputFileNameOption(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOutputFileNameOption", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputFileNameOptionAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOutputFileNameOptionAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOutputFileNameOptionAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOutputFileNameOptionOperationCompleted == null)) {
                this.GetOutputFileNameOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputFileNameOptionOperationCompleted);
            }
            this.InvokeAsync("GetOutputFileNameOption", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOutputFileNameOptionOperationCompleted, userState);
        }
        
        private void OnGetOutputFileNameOptionOperationCompleted(object arg) {
            if ((this.GetOutputFileNameOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputFileNameOptionCompleted(this, new GetOutputFileNameOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputInfo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputInfo(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetOutputInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType,
                        inMedia,
                        inFolder,
                        inFileName,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputInfoAsync(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, Parameter[] inParams) {
            this.SetOutputInfoAsync(inUsername, inPassword, inTicketID, inType, inMedia, inFolder, inFileName, inParams, null);
        }
        
        /// <remarks/>
        public void SetOutputInfoAsync(string inUsername, string inPassword, string inTicketID, string inType, int inMedia, string inFolder, string inFileName, Parameter[] inParams, object userState) {
            if ((this.SetOutputInfoOperationCompleted == null)) {
                this.SetOutputInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputInfoOperationCompleted);
            }
            this.InvokeAsync("SetOutputInfo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType,
                        inMedia,
                        inFolder,
                        inFileName,
                        inParams}, this.SetOutputInfoOperationCompleted, userState);
        }
        
        private void OnSetOutputInfoOperationCompleted(object arg) {
            if ((this.SetOutputInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputInfoCompleted(this, new SetOutputInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputParameter(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            object[] results = this.Invoke("SetOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            this.SetOutputParameterAsync(inUsername, inPassword, inTicketID, inParam, null);
        }
        
        /// <remarks/>
        public void SetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam, object userState) {
            if ((this.SetOutputParameterOperationCompleted == null)) {
                this.SetOutputParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputParameterOperationCompleted);
            }
            this.InvokeAsync("SetOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam}, this.SetOutputParameterOperationCompleted, userState);
        }
        
        private void OnSetOutputParameterOperationCompleted(object arg) {
            if ((this.SetOutputParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputParameterCompleted(this, new SetOutputParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputParameters(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.SetOutputParametersAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void SetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.SetOutputParametersOperationCompleted == null)) {
                this.SetOutputParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputParametersOperationCompleted);
            }
            this.InvokeAsync("SetOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.SetOutputParametersOperationCompleted, userState);
        }
        
        private void OnSetOutputParametersOperationCompleted(object arg) {
            if ((this.SetOutputParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputParametersCompleted(this, new SetOutputParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Parameter GetOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("GetOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((Parameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.GetOutputParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void GetOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.GetOutputParameterOperationCompleted == null)) {
                this.GetOutputParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputParameterOperationCompleted);
            }
            this.InvokeAsync("GetOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.GetOutputParameterOperationCompleted, userState);
        }
        
        private void OnGetOutputParameterOperationCompleted(object arg) {
            if ((this.GetOutputParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputParameterCompleted(this, new GetOutputParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Parameter[] GetOutputParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            object[] results = this.Invoke("GetOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames});
            return ((Parameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.GetOutputParametersAsync(inUsername, inPassword, inTicketID, inParameterNames, null);
        }
        
        /// <remarks/>
        public void GetOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames, object userState) {
            if ((this.GetOutputParametersOperationCompleted == null)) {
                this.GetOutputParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputParametersOperationCompleted);
            }
            this.InvokeAsync("GetOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames}, this.GetOutputParametersOperationCompleted, userState);
        }
        
        private void OnGetOutputParametersOperationCompleted(object arg) {
            if ((this.GetOutputParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputParametersCompleted(this, new GetOutputParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveOutputParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveOutputParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("RemoveOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.RemoveOutputParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void RemoveOutputParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.RemoveOutputParameterOperationCompleted == null)) {
                this.RemoveOutputParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveOutputParameterOperationCompleted);
            }
            this.InvokeAsync("RemoveOutputParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.RemoveOutputParameterOperationCompleted, userState);
        }
        
        private void OnRemoveOutputParameterOperationCompleted(object arg) {
            if ((this.RemoveOutputParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveOutputParameterCompleted(this, new RemoveOutputParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveOutputParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveOutputParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            object[] results = this.Invoke("RemoveOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            this.RemoveOutputParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray, null);
        }
        
        /// <remarks/>
        public void RemoveOutputParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray, object userState) {
            if ((this.RemoveOutputParametersOperationCompleted == null)) {
                this.RemoveOutputParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveOutputParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray}, this.RemoveOutputParametersOperationCompleted, userState);
        }
        
        private void OnRemoveOutputParametersOperationCompleted(object arg) {
            if ((this.RemoveOutputParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveOutputParametersCompleted(this, new RemoveOutputParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllOutputParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllOutputParameters(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllOutputParametersAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllOutputParametersAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllOutputParametersAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllOutputParametersOperationCompleted == null)) {
                this.RemoveAllOutputParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllOutputParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveAllOutputParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllOutputParametersOperationCompleted, userState);
        }
        
        private void OnRemoveAllOutputParametersOperationCompleted(object arg) {
            if ((this.RemoveAllOutputParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllOutputParametersCompleted(this, new RemoveAllOutputParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAppendJobID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAppendJobID(string inUsername, string inPassword, string inTicketID, bool inAppendJobID) {
            object[] results = this.Invoke("SetAppendJobID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAppendJobID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID, bool inAppendJobID) {
            this.SetAppendJobIDAsync(inUsername, inPassword, inTicketID, inAppendJobID, null);
        }
        
        /// <remarks/>
        public void SetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID, bool inAppendJobID, object userState) {
            if ((this.SetAppendJobIDOperationCompleted == null)) {
                this.SetAppendJobIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAppendJobIDOperationCompleted);
            }
            this.InvokeAsync("SetAppendJobID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAppendJobID}, this.SetAppendJobIDOperationCompleted, userState);
        }
        
        private void OnSetAppendJobIDOperationCompleted(object arg) {
            if ((this.SetAppendJobIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAppendJobIDCompleted(this, new SetAppendJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetEnvJobName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEnvJobName(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv) {
            object[] results = this.Invoke("SetEnvJobName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEnvJobName,
                        inIsDefaultCacheEnv});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv) {
            this.SetEnvJobNameAsync(inUsername, inPassword, inTicketID, inEnvJobName, inIsDefaultCacheEnv, null);
        }
        
        /// <remarks/>
        public void SetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID, string inEnvJobName, bool inIsDefaultCacheEnv, object userState) {
            if ((this.SetEnvJobNameOperationCompleted == null)) {
                this.SetEnvJobNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnvJobNameOperationCompleted);
            }
            this.InvokeAsync("SetEnvJobName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inEnvJobName,
                        inIsDefaultCacheEnv}, this.SetEnvJobNameOperationCompleted, userState);
        }
        
        private void OnSetEnvJobNameOperationCompleted(object arg) {
            if ((this.SetEnvJobNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnvJobNameCompleted(this, new SetEnvJobNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputMedia", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputMedia(string inUsername, string inPassword, string inTicketID, int inMedia) {
            object[] results = this.Invoke("SetOutputMedia", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inMedia});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputMediaAsync(string inUsername, string inPassword, string inTicketID, int inMedia) {
            this.SetOutputMediaAsync(inUsername, inPassword, inTicketID, inMedia, null);
        }
        
        /// <remarks/>
        public void SetOutputMediaAsync(string inUsername, string inPassword, string inTicketID, int inMedia, object userState) {
            if ((this.SetOutputMediaOperationCompleted == null)) {
                this.SetOutputMediaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputMediaOperationCompleted);
            }
            this.InvokeAsync("SetOutputMedia", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inMedia}, this.SetOutputMediaOperationCompleted, userState);
        }
        
        private void OnSetOutputMediaOperationCompleted(object arg) {
            if ((this.SetOutputMediaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputMediaCompleted(this, new SetOutputMediaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputType(string inUsername, string inPassword, string inTicketID, string inType) {
            object[] results = this.Invoke("SetOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType) {
            this.SetOutputTypeAsync(inUsername, inPassword, inTicketID, inType, null);
        }
        
        /// <remarks/>
        public void SetOutputTypeAsync(string inUsername, string inPassword, string inTicketID, string inType, object userState) {
            if ((this.SetOutputTypeOperationCompleted == null)) {
                this.SetOutputTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputTypeOperationCompleted);
            }
            this.InvokeAsync("SetOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inType}, this.SetOutputTypeOperationCompleted, userState);
        }
        
        private void OnSetOutputTypeOperationCompleted(object arg) {
            if ((this.SetOutputTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputTypeCompleted(this, new SetOutputTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputFolder", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputFolder(string inUsername, string inPassword, string inTicketID, string inFolder) {
            object[] results = this.Invoke("SetOutputFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFolder});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputFolderAsync(string inUsername, string inPassword, string inTicketID, string inFolder) {
            this.SetOutputFolderAsync(inUsername, inPassword, inTicketID, inFolder, null);
        }
        
        /// <remarks/>
        public void SetOutputFolderAsync(string inUsername, string inPassword, string inTicketID, string inFolder, object userState) {
            if ((this.SetOutputFolderOperationCompleted == null)) {
                this.SetOutputFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputFolderOperationCompleted);
            }
            this.InvokeAsync("SetOutputFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFolder}, this.SetOutputFolderOperationCompleted, userState);
        }
        
        private void OnSetOutputFolderOperationCompleted(object arg) {
            if ((this.SetOutputFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputFolderCompleted(this, new SetOutputFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetOutputFileName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetOutputFileName(string inUsername, string inPassword, string inTicketID, string inFileName) {
            object[] results = this.Invoke("SetOutputFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID, string inFileName) {
            this.SetOutputFileNameAsync(inUsername, inPassword, inTicketID, inFileName, null);
        }
        
        /// <remarks/>
        public void SetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID, string inFileName, object userState) {
            if ((this.SetOutputFileNameOperationCompleted == null)) {
                this.SetOutputFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOutputFileNameOperationCompleted);
            }
            this.InvokeAsync("SetOutputFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFileName}, this.SetOutputFileNameOperationCompleted, userState);
        }
        
        private void OnSetOutputFileNameOperationCompleted(object arg) {
            if ((this.SetOutputFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOutputFileNameCompleted(this, new SetOutputFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAppendJobID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAppendJobID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAppendJobID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAppendJobIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAppendJobIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAppendJobIDOperationCompleted == null)) {
                this.GetAppendJobIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppendJobIDOperationCompleted);
            }
            this.InvokeAsync("GetAppendJobID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAppendJobIDOperationCompleted, userState);
        }
        
        private void OnGetAppendJobIDOperationCompleted(object arg) {
            if ((this.GetAppendJobIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppendJobIDCompleted(this, new GetAppendJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDefaultCacheEnv", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDefaultCacheEnv(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDefaultCacheEnv", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultCacheEnvAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDefaultCacheEnvAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDefaultCacheEnvAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDefaultCacheEnvOperationCompleted == null)) {
                this.GetDefaultCacheEnvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultCacheEnvOperationCompleted);
            }
            this.InvokeAsync("GetDefaultCacheEnv", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDefaultCacheEnvOperationCompleted, userState);
        }
        
        private void OnGetDefaultCacheEnvOperationCompleted(object arg) {
            if ((this.GetDefaultCacheEnvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultCacheEnvCompleted(this, new GetDefaultCacheEnvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetEnvJobName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEnvJobName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetEnvJobName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetEnvJobNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetEnvJobNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetEnvJobNameOperationCompleted == null)) {
                this.GetEnvJobNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnvJobNameOperationCompleted);
            }
            this.InvokeAsync("GetEnvJobName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetEnvJobNameOperationCompleted, userState);
        }
        
        private void OnGetEnvJobNameOperationCompleted(object arg) {
            if ((this.GetEnvJobNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnvJobNameCompleted(this, new GetEnvJobNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputMedia", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOutputMedia(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOutputMedia", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputMediaAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOutputMediaAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOutputMediaAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOutputMediaOperationCompleted == null)) {
                this.GetOutputMediaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputMediaOperationCompleted);
            }
            this.InvokeAsync("GetOutputMedia", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOutputMediaOperationCompleted, userState);
        }
        
        private void OnGetOutputMediaOperationCompleted(object arg) {
            if ((this.GetOutputMediaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputMediaCompleted(this, new GetOutputMediaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOutputType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOutputTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOutputTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOutputTypeOperationCompleted == null)) {
                this.GetOutputTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputTypeOperationCompleted);
            }
            this.InvokeAsync("GetOutputType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOutputTypeOperationCompleted, userState);
        }
        
        private void OnGetOutputTypeOperationCompleted(object arg) {
            if ((this.GetOutputTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputTypeCompleted(this, new GetOutputTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputFolder", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOutputFolder(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOutputFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputFolderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOutputFolderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOutputFolderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOutputFolderOperationCompleted == null)) {
                this.GetOutputFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputFolderOperationCompleted);
            }
            this.InvokeAsync("GetOutputFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOutputFolderOperationCompleted, userState);
        }
        
        private void OnGetOutputFolderOperationCompleted(object arg) {
            if ((this.GetOutputFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputFolderCompleted(this, new GetOutputFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetOutputFileName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOutputFileName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetOutputFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetOutputFileNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetOutputFileNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetOutputFileNameOperationCompleted == null)) {
                this.GetOutputFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutputFileNameOperationCompleted);
            }
            this.InvokeAsync("GetOutputFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetOutputFileNameOperationCompleted, userState);
        }
        
        private void OnGetOutputFileNameOperationCompleted(object arg) {
            if ((this.GetOutputFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutputFileNameCompleted(this, new GetOutputFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddImposition", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddImposition(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("AddImposition", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddImpositionAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.AddImpositionAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void AddImpositionAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.AddImpositionOperationCompleted == null)) {
                this.AddImpositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImpositionOperationCompleted);
            }
            this.InvokeAsync("AddImposition", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.AddImpositionOperationCompleted, userState);
        }
        
        private void OnAddImpositionOperationCompleted(object arg) {
            if ((this.AddImpositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImpositionCompleted(this, new AddImpositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveImposition", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveImposition(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveImposition", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveImpositionAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveImpositionAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveImpositionAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveImpositionOperationCompleted == null)) {
                this.RemoveImpositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveImpositionOperationCompleted);
            }
            this.InvokeAsync("RemoveImposition", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveImpositionOperationCompleted, userState);
        }
        
        private void OnRemoveImpositionOperationCompleted(object arg) {
            if ((this.RemoveImpositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveImpositionCompleted(this, new RemoveImpositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsImpositionExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsImpositionExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsImpositionExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsImpositionExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsImpositionExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsImpositionExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsImpositionExistOperationCompleted == null)) {
                this.IsImpositionExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsImpositionExistOperationCompleted);
            }
            this.InvokeAsync("IsImpositionExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsImpositionExistOperationCompleted, userState);
        }
        
        private void OnIsImpositionExistOperationCompleted(object arg) {
            if ((this.IsImpositionExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsImpositionExistCompleted(this, new IsImpositionExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetImpositionParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetImpositionParameter(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            object[] results = this.Invoke("SetImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            this.SetImpositionParameterAsync(inUsername, inPassword, inTicketID, inParam, null);
        }
        
        /// <remarks/>
        public void SetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam, object userState) {
            if ((this.SetImpositionParameterOperationCompleted == null)) {
                this.SetImpositionParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetImpositionParameterOperationCompleted);
            }
            this.InvokeAsync("SetImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam}, this.SetImpositionParameterOperationCompleted, userState);
        }
        
        private void OnSetImpositionParameterOperationCompleted(object arg) {
            if ((this.SetImpositionParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetImpositionParameterCompleted(this, new SetImpositionParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetImpositionParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetImpositionParameters(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.SetImpositionParametersAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void SetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.SetImpositionParametersOperationCompleted == null)) {
                this.SetImpositionParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetImpositionParametersOperationCompleted);
            }
            this.InvokeAsync("SetImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.SetImpositionParametersOperationCompleted, userState);
        }
        
        private void OnSetImpositionParametersOperationCompleted(object arg) {
            if ((this.SetImpositionParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetImpositionParametersCompleted(this, new SetImpositionParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetImpositionParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Parameter GetImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("GetImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((Parameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.GetImpositionParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void GetImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.GetImpositionParameterOperationCompleted == null)) {
                this.GetImpositionParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImpositionParameterOperationCompleted);
            }
            this.InvokeAsync("GetImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.GetImpositionParameterOperationCompleted, userState);
        }
        
        private void OnGetImpositionParameterOperationCompleted(object arg) {
            if ((this.GetImpositionParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImpositionParameterCompleted(this, new GetImpositionParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetImpositionParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Parameter[] GetImpositionParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            object[] results = this.Invoke("GetImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames});
            return ((Parameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.GetImpositionParametersAsync(inUsername, inPassword, inTicketID, inParameterNames, null);
        }
        
        /// <remarks/>
        public void GetImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames, object userState) {
            if ((this.GetImpositionParametersOperationCompleted == null)) {
                this.GetImpositionParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImpositionParametersOperationCompleted);
            }
            this.InvokeAsync("GetImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames}, this.GetImpositionParametersOperationCompleted, userState);
        }
        
        private void OnGetImpositionParametersOperationCompleted(object arg) {
            if ((this.GetImpositionParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImpositionParametersCompleted(this, new GetImpositionParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveImpositionParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveImpositionParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("RemoveImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.RemoveImpositionParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void RemoveImpositionParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.RemoveImpositionParameterOperationCompleted == null)) {
                this.RemoveImpositionParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveImpositionParameterOperationCompleted);
            }
            this.InvokeAsync("RemoveImpositionParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.RemoveImpositionParameterOperationCompleted, userState);
        }
        
        private void OnRemoveImpositionParameterOperationCompleted(object arg) {
            if ((this.RemoveImpositionParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveImpositionParameterCompleted(this, new RemoveImpositionParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveImpositionParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveImpositionParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            object[] results = this.Invoke("RemoveImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            this.RemoveImpositionParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray, null);
        }
        
        /// <remarks/>
        public void RemoveImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray, object userState) {
            if ((this.RemoveImpositionParametersOperationCompleted == null)) {
                this.RemoveImpositionParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveImpositionParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray}, this.RemoveImpositionParametersOperationCompleted, userState);
        }
        
        private void OnRemoveImpositionParametersOperationCompleted(object arg) {
            if ((this.RemoveImpositionParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveImpositionParametersCompleted(this, new RemoveImpositionParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllImpositionParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllImpositionParameters(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllImpositionParametersAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllImpositionParametersAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllImpositionParametersAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllImpositionParametersOperationCompleted == null)) {
                this.RemoveAllImpositionParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllImpositionParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveAllImpositionParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllImpositionParametersOperationCompleted, userState);
        }
        
        private void OnRemoveAllImpositionParametersOperationCompleted(object arg) {
            if ((this.RemoveAllImpositionParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllImpositionParametersCompleted(this, new RemoveAllImpositionParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddJDF", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddJDF(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("AddJDF", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddJDFAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.AddJDFAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void AddJDFAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.AddJDFOperationCompleted == null)) {
                this.AddJDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddJDFOperationCompleted);
            }
            this.InvokeAsync("AddJDF", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.AddJDFOperationCompleted, userState);
        }
        
        private void OnAddJDFOperationCompleted(object arg) {
            if ((this.AddJDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddJDFCompleted(this, new AddJDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJDF", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJDF(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveJDF", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJDFAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveJDFAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveJDFAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveJDFOperationCompleted == null)) {
                this.RemoveJDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJDFOperationCompleted);
            }
            this.InvokeAsync("RemoveJDF", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveJDFOperationCompleted, userState);
        }
        
        private void OnRemoveJDFOperationCompleted(object arg) {
            if ((this.RemoveJDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJDFCompleted(this, new RemoveJDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsJDFExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsJDFExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsJDFExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsJDFExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsJDFExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsJDFExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsJDFExistOperationCompleted == null)) {
                this.IsJDFExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsJDFExistOperationCompleted);
            }
            this.InvokeAsync("IsJDFExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsJDFExistOperationCompleted, userState);
        }
        
        private void OnIsJDFExistOperationCompleted(object arg) {
            if ((this.IsJDFExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsJDFExistCompleted(this, new IsJDFExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJDFParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJDFParameter(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            object[] results = this.Invoke("SetJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam) {
            this.SetJDFParameterAsync(inUsername, inPassword, inTicketID, inParam, null);
        }
        
        /// <remarks/>
        public void SetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, Parameter inParam, object userState) {
            if ((this.SetJDFParameterOperationCompleted == null)) {
                this.SetJDFParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJDFParameterOperationCompleted);
            }
            this.InvokeAsync("SetJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParam}, this.SetJDFParameterOperationCompleted, userState);
        }
        
        private void OnSetJDFParameterOperationCompleted(object arg) {
            if ((this.SetJDFParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJDFParameterCompleted(this, new SetJDFParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetJDFParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetJDFParameters(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Parameter[] inParams) {
            object[] results = this.Invoke("SetJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams) {
            this.SetJDFParametersAsync(inUsername, inPassword, inTicketID, inParams, null);
        }
        
        /// <remarks/>
        public void SetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, Parameter[] inParams, object userState) {
            if ((this.SetJDFParametersOperationCompleted == null)) {
                this.SetJDFParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetJDFParametersOperationCompleted);
            }
            this.InvokeAsync("SetJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParams}, this.SetJDFParametersOperationCompleted, userState);
        }
        
        private void OnSetJDFParametersOperationCompleted(object arg) {
            if ((this.SetJDFParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetJDFParametersCompleted(this, new SetJDFParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJDFParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Parameter GetJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("GetJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((Parameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.GetJDFParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void GetJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.GetJDFParameterOperationCompleted == null)) {
                this.GetJDFParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJDFParameterOperationCompleted);
            }
            this.InvokeAsync("GetJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.GetJDFParameterOperationCompleted, userState);
        }
        
        private void OnGetJDFParameterOperationCompleted(object arg) {
            if ((this.GetJDFParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJDFParameterCompleted(this, new GetJDFParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetJDFParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Parameter[] GetJDFParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            object[] results = this.Invoke("GetJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames});
            return ((Parameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames) {
            this.GetJDFParametersAsync(inUsername, inPassword, inTicketID, inParameterNames, null);
        }
        
        /// <remarks/>
        public void GetJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNames, object userState) {
            if ((this.GetJDFParametersOperationCompleted == null)) {
                this.GetJDFParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJDFParametersOperationCompleted);
            }
            this.InvokeAsync("GetJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNames}, this.GetJDFParametersOperationCompleted, userState);
        }
        
        private void OnGetJDFParametersOperationCompleted(object arg) {
            if ((this.GetJDFParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJDFParametersCompleted(this, new GetJDFParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJDFParameter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJDFParameter(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            object[] results = this.Invoke("RemoveJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName) {
            this.RemoveJDFParameterAsync(inUsername, inPassword, inTicketID, inParameterName, null);
        }
        
        /// <remarks/>
        public void RemoveJDFParameterAsync(string inUsername, string inPassword, string inTicketID, string inParameterName, object userState) {
            if ((this.RemoveJDFParameterOperationCompleted == null)) {
                this.RemoveJDFParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJDFParameterOperationCompleted);
            }
            this.InvokeAsync("RemoveJDFParameter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterName}, this.RemoveJDFParameterOperationCompleted, userState);
        }
        
        private void OnRemoveJDFParameterOperationCompleted(object arg) {
            if ((this.RemoveJDFParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJDFParameterCompleted(this, new RemoveJDFParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveJDFParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveJDFParameters(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            object[] results = this.Invoke("RemoveJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray) {
            this.RemoveJDFParametersAsync(inUsername, inPassword, inTicketID, inParameterNameArray, null);
        }
        
        /// <remarks/>
        public void RemoveJDFParametersAsync(string inUsername, string inPassword, string inTicketID, string[] inParameterNameArray, object userState) {
            if ((this.RemoveJDFParametersOperationCompleted == null)) {
                this.RemoveJDFParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveJDFParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inParameterNameArray}, this.RemoveJDFParametersOperationCompleted, userState);
        }
        
        private void OnRemoveJDFParametersOperationCompleted(object arg) {
            if ((this.RemoveJDFParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveJDFParametersCompleted(this, new RemoveJDFParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllJDFParameters", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllJDFParameters(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllJDFParametersAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllJDFParametersAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllJDFParametersAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllJDFParametersOperationCompleted == null)) {
                this.RemoveAllJDFParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllJDFParametersOperationCompleted);
            }
            this.InvokeAsync("RemoveAllJDFParameters", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllJDFParametersOperationCompleted, userState);
        }
        
        private void OnRemoveAllJDFParametersOperationCompleted(object arg) {
            if ((this.RemoveAllJDFParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllJDFParametersCompleted(this, new RemoveAllJDFParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddCompression", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCompression(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC) {
            object[] results = this.Invoke("AddCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFileName,
                        inIsVPC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCompressionAsync(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC) {
            this.AddCompressionAsync(inUsername, inPassword, inTicketID, inFileName, inIsVPC, null);
        }
        
        /// <remarks/>
        public void AddCompressionAsync(string inUsername, string inPassword, string inTicketID, string inFileName, bool inIsVPC, object userState) {
            if ((this.AddCompressionOperationCompleted == null)) {
                this.AddCompressionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCompressionOperationCompleted);
            }
            this.InvokeAsync("AddCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFileName,
                        inIsVPC}, this.AddCompressionOperationCompleted, userState);
        }
        
        private void OnAddCompressionOperationCompleted(object arg) {
            if ((this.AddCompressionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompressionCompleted(this, new AddCompressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveCompression", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveCompression(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCompressionAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveCompressionAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveCompressionAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveCompressionOperationCompleted == null)) {
                this.RemoveCompressionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCompressionOperationCompleted);
            }
            this.InvokeAsync("RemoveCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveCompressionOperationCompleted, userState);
        }
        
        private void OnRemoveCompressionOperationCompleted(object arg) {
            if ((this.RemoveCompressionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCompressionCompleted(this, new RemoveCompressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsCompressionExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCompressionExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsCompressionExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCompressionExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsCompressionExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsCompressionExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsCompressionExistOperationCompleted == null)) {
                this.IsCompressionExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCompressionExistOperationCompleted);
            }
            this.InvokeAsync("IsCompressionExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsCompressionExistOperationCompleted, userState);
        }
        
        private void OnIsCompressionExistOperationCompleted(object arg) {
            if ((this.IsCompressionExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCompressionExistCompleted(this, new IsCompressionExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsVPCCompression", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsVPCCompression(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsVPCCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsVPCCompressionAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsVPCCompressionAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsVPCCompressionAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsVPCCompressionOperationCompleted == null)) {
                this.IsVPCCompressionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsVPCCompressionOperationCompleted);
            }
            this.InvokeAsync("IsVPCCompression", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsVPCCompressionOperationCompleted, userState);
        }
        
        private void OnIsVPCCompressionOperationCompleted(object arg) {
            if ((this.IsVPCCompressionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsVPCCompressionCompleted(this, new IsVPCCompressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddDestinationByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddDestinationByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource) {
            object[] results = this.Invoke("AddDestinationByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDestinationParam,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddDestinationByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource) {
            this.AddDestinationByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDestinationParam, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddDestinationByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inDestinationParam, bool inDeleteSource, object userState) {
            if ((this.AddDestinationByIDOperationCompleted == null)) {
                this.AddDestinationByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDestinationByIDOperationCompleted);
            }
            this.InvokeAsync("AddDestinationByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDestinationParam,
                        inDeleteSource}, this.AddDestinationByIDOperationCompleted, userState);
        }
        
        private void OnAddDestinationByIDOperationCompleted(object arg) {
            if ((this.AddDestinationByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDestinationByIDCompleted(this, new AddDestinationByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddFTP", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFTP(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, [System.Xml.Serialization.XmlElementAttribute("inPassWord")] string inPassWord1, bool inPassive, bool inDeleteSource) {
            object[] results = this.Invoke("AddFTP", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAddress,
                        inPort,
                        inUser,
                        inPassWord1,
                        inPassive,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFTPAsync(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, string inPassWord1, bool inPassive, bool inDeleteSource) {
            this.AddFTPAsync(inUsername, inPassword, inTicketID, inAddress, inPort, inUser, inPassWord1, inPassive, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddFTPAsync(string inUsername, string inPassword, string inTicketID, string inAddress, int inPort, string inUser, string inPassWord1, bool inPassive, bool inDeleteSource, object userState) {
            if ((this.AddFTPOperationCompleted == null)) {
                this.AddFTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFTPOperationCompleted);
            }
            this.InvokeAsync("AddFTP", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAddress,
                        inPort,
                        inUser,
                        inPassWord1,
                        inPassive,
                        inDeleteSource}, this.AddFTPOperationCompleted, userState);
        }
        
        private void OnAddFTPOperationCompleted(object arg) {
            if ((this.AddFTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFTPCompleted(this, new AddFTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddFTPByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFTPByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            object[] results = this.Invoke("AddFTPByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFTPByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            this.AddFTPByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddFTPByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource, object userState) {
            if ((this.AddFTPByIDOperationCompleted == null)) {
                this.AddFTPByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFTPByIDOperationCompleted);
            }
            this.InvokeAsync("AddFTPByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource}, this.AddFTPByIDOperationCompleted, userState);
        }
        
        private void OnAddFTPByIDOperationCompleted(object arg) {
            if ((this.AddFTPByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFTPByIDCompleted(this, new AddFTPByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveFTP", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveFTP(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveFTP", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFTPAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveFTPAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveFTPAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveFTPOperationCompleted == null)) {
                this.RemoveFTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFTPOperationCompleted);
            }
            this.InvokeAsync("RemoveFTP", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveFTPOperationCompleted, userState);
        }
        
        private void OnRemoveFTPOperationCompleted(object arg) {
            if ((this.RemoveFTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFTPCompleted(this, new RemoveFTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFTPExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFTPExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFTPExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFTPExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFTPExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFTPExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFTPExistOperationCompleted == null)) {
                this.IsFTPExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFTPExistOperationCompleted);
            }
            this.InvokeAsync("IsFTPExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFTPExistOperationCompleted, userState);
        }
        
        private void OnIsFTPExistOperationCompleted(object arg) {
            if ((this.IsFTPExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFTPExistCompleted(this, new IsFTPExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTPID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPIDOperationCompleted == null)) {
                this.GetFTPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPIDOperationCompleted);
            }
            this.InvokeAsync("GetFTPID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPIDOperationCompleted, userState);
        }
        
        private void OnGetFTPIDOperationCompleted(object arg) {
            if ((this.GetFTPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPIDCompleted(this, new GetFTPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPAddress", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTPAddress(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPAddress", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPAddressAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPAddressAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPAddressAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPAddressOperationCompleted == null)) {
                this.GetFTPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPAddressOperationCompleted);
            }
            this.InvokeAsync("GetFTPAddress", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPAddressOperationCompleted, userState);
        }
        
        private void OnGetFTPAddressOperationCompleted(object arg) {
            if ((this.GetFTPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPAddressCompleted(this, new GetFTPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPPort", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFTPPort(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPPort", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPPortAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPPortAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPPortAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPPortOperationCompleted == null)) {
                this.GetFTPPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPPortOperationCompleted);
            }
            this.InvokeAsync("GetFTPPort", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPPortOperationCompleted, userState);
        }
        
        private void OnGetFTPPortOperationCompleted(object arg) {
            if ((this.GetFTPPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPPortCompleted(this, new GetFTPPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPUser", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTPUser(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPUser", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPUserAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPUserAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPUserAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPUserOperationCompleted == null)) {
                this.GetFTPUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPUserOperationCompleted);
            }
            this.InvokeAsync("GetFTPUser", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPUserOperationCompleted, userState);
        }
        
        private void OnGetFTPUserOperationCompleted(object arg) {
            if ((this.GetFTPUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPUserCompleted(this, new GetFTPUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPPassword", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTPPassword(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPPassword", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPPasswordAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPPasswordAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPPasswordAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPPasswordOperationCompleted == null)) {
                this.GetFTPPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPPasswordOperationCompleted);
            }
            this.InvokeAsync("GetFTPPassword", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPPasswordOperationCompleted, userState);
        }
        
        private void OnGetFTPPasswordOperationCompleted(object arg) {
            if ((this.GetFTPPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPPasswordCompleted(this, new GetFTPPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFTPPassive", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetFTPPassive(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFTPPassive", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPPassiveAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFTPPassiveAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFTPPassiveAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFTPPassiveOperationCompleted == null)) {
                this.GetFTPPassiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPPassiveOperationCompleted);
            }
            this.InvokeAsync("GetFTPPassive", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFTPPassiveOperationCompleted, userState);
        }
        
        private void OnGetFTPPassiveOperationCompleted(object arg) {
            if ((this.GetFTPPassiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPPassiveCompleted(this, new GetFTPPassiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFTPDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFTPDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFTPDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFTPDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFTPDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFTPDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFTPDeleteSourceOperationCompleted == null)) {
                this.IsFTPDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFTPDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsFTPDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFTPDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsFTPDeleteSourceOperationCompleted(object arg) {
            if ((this.IsFTPDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFTPDeleteSourceCompleted(this, new IsFTPDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddUMail", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddUMail(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource) {
            object[] results = this.Invoke("AddUMail", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTemplate,
                        inPCWT,
                        inPCThick,
                        inOrigZip,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddUMailAsync(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource) {
            this.AddUMailAsync(inUsername, inPassword, inTicketID, inTemplate, inPCWT, inPCThick, inOrigZip, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddUMailAsync(string inUsername, string inPassword, string inTicketID, string inTemplate, string inPCWT, string inPCThick, string inOrigZip, bool inDeleteSource, object userState) {
            if ((this.AddUMailOperationCompleted == null)) {
                this.AddUMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUMailOperationCompleted);
            }
            this.InvokeAsync("AddUMail", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTemplate,
                        inPCWT,
                        inPCThick,
                        inOrigZip,
                        inDeleteSource}, this.AddUMailOperationCompleted, userState);
        }
        
        private void OnAddUMailOperationCompleted(object arg) {
            if ((this.AddUMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUMailCompleted(this, new AddUMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveUMail", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveUMail(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveUMail", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUMailAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveUMailAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveUMailAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveUMailOperationCompleted == null)) {
                this.RemoveUMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUMailOperationCompleted);
            }
            this.InvokeAsync("RemoveUMail", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveUMailOperationCompleted, userState);
        }
        
        private void OnRemoveUMailOperationCompleted(object arg) {
            if ((this.RemoveUMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUMailCompleted(this, new RemoveUMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsUMailExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUMailExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsUMailExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUMailExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsUMailExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsUMailExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsUMailExistOperationCompleted == null)) {
                this.IsUMailExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUMailExistOperationCompleted);
            }
            this.InvokeAsync("IsUMailExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsUMailExistOperationCompleted, userState);
        }
        
        private void OnIsUMailExistOperationCompleted(object arg) {
            if ((this.IsUMailExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUMailExistCompleted(this, new IsUMailExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetUMailTemplate", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUMailTemplate(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetUMailTemplate", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUMailTemplateAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetUMailTemplateAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetUMailTemplateAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetUMailTemplateOperationCompleted == null)) {
                this.GetUMailTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUMailTemplateOperationCompleted);
            }
            this.InvokeAsync("GetUMailTemplate", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetUMailTemplateOperationCompleted, userState);
        }
        
        private void OnGetUMailTemplateOperationCompleted(object arg) {
            if ((this.GetUMailTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUMailTemplateCompleted(this, new GetUMailTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetUMailOrigZip", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUMailOrigZip(string inUsername, string inPassword, string inOrigZip) {
            object[] results = this.Invoke("GetUMailOrigZip", new object[] {
                        inUsername,
                        inPassword,
                        inOrigZip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUMailOrigZipAsync(string inUsername, string inPassword, string inOrigZip) {
            this.GetUMailOrigZipAsync(inUsername, inPassword, inOrigZip, null);
        }
        
        /// <remarks/>
        public void GetUMailOrigZipAsync(string inUsername, string inPassword, string inOrigZip, object userState) {
            if ((this.GetUMailOrigZipOperationCompleted == null)) {
                this.GetUMailOrigZipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUMailOrigZipOperationCompleted);
            }
            this.InvokeAsync("GetUMailOrigZip", new object[] {
                        inUsername,
                        inPassword,
                        inOrigZip}, this.GetUMailOrigZipOperationCompleted, userState);
        }
        
        private void OnGetUMailOrigZipOperationCompleted(object arg) {
            if ((this.GetUMailOrigZipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUMailOrigZipCompleted(this, new GetUMailOrigZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetUMailPCWT", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUMailPCWT(string inUsername, string inPassword, string inPCWT) {
            object[] results = this.Invoke("GetUMailPCWT", new object[] {
                        inUsername,
                        inPassword,
                        inPCWT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUMailPCWTAsync(string inUsername, string inPassword, string inPCWT) {
            this.GetUMailPCWTAsync(inUsername, inPassword, inPCWT, null);
        }
        
        /// <remarks/>
        public void GetUMailPCWTAsync(string inUsername, string inPassword, string inPCWT, object userState) {
            if ((this.GetUMailPCWTOperationCompleted == null)) {
                this.GetUMailPCWTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUMailPCWTOperationCompleted);
            }
            this.InvokeAsync("GetUMailPCWT", new object[] {
                        inUsername,
                        inPassword,
                        inPCWT}, this.GetUMailPCWTOperationCompleted, userState);
        }
        
        private void OnGetUMailPCWTOperationCompleted(object arg) {
            if ((this.GetUMailPCWTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUMailPCWTCompleted(this, new GetUMailPCWTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetUMailPCThick", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUMailPCThick(string inUsername, string inPassword, string inPCWT) {
            object[] results = this.Invoke("GetUMailPCThick", new object[] {
                        inUsername,
                        inPassword,
                        inPCWT});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUMailPCThickAsync(string inUsername, string inPassword, string inPCWT) {
            this.GetUMailPCThickAsync(inUsername, inPassword, inPCWT, null);
        }
        
        /// <remarks/>
        public void GetUMailPCThickAsync(string inUsername, string inPassword, string inPCWT, object userState) {
            if ((this.GetUMailPCThickOperationCompleted == null)) {
                this.GetUMailPCThickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUMailPCThickOperationCompleted);
            }
            this.InvokeAsync("GetUMailPCThick", new object[] {
                        inUsername,
                        inPassword,
                        inPCWT}, this.GetUMailPCThickOperationCompleted, userState);
        }
        
        private void OnGetUMailPCThickOperationCompleted(object arg) {
            if ((this.GetUMailPCThickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUMailPCThickCompleted(this, new GetUMailPCThickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddPrint", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPrint(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource) {
            object[] results = this.Invoke("AddPrint", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPrinter,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPrintAsync(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource) {
            this.AddPrintAsync(inUsername, inPassword, inTicketID, inPrinter, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddPrintAsync(string inUsername, string inPassword, string inTicketID, string inPrinter, bool inDeleteSource, object userState) {
            if ((this.AddPrintOperationCompleted == null)) {
                this.AddPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrintOperationCompleted);
            }
            this.InvokeAsync("AddPrint", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPrinter,
                        inDeleteSource}, this.AddPrintOperationCompleted, userState);
        }
        
        private void OnAddPrintOperationCompleted(object arg) {
            if ((this.AddPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrintCompleted(this, new AddPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddPrintByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPrintByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            object[] results = this.Invoke("AddPrintByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPrintByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource) {
            this.AddPrintByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddPrintByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, bool inDeleteSource, object userState) {
            if ((this.AddPrintByIDOperationCompleted == null)) {
                this.AddPrintByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrintByIDOperationCompleted);
            }
            this.InvokeAsync("AddPrintByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inDeleteSource}, this.AddPrintByIDOperationCompleted, userState);
        }
        
        private void OnAddPrintByIDOperationCompleted(object arg) {
            if ((this.AddPrintByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrintByIDCompleted(this, new AddPrintByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemovePrint", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemovePrint(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemovePrint", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePrintAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemovePrintAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemovePrintAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemovePrintOperationCompleted == null)) {
                this.RemovePrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePrintOperationCompleted);
            }
            this.InvokeAsync("RemovePrint", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemovePrintOperationCompleted, userState);
        }
        
        private void OnRemovePrintOperationCompleted(object arg) {
            if ((this.RemovePrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePrintCompleted(this, new RemovePrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsPrintExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPrintExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsPrintExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPrintExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsPrintExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsPrintExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsPrintExistOperationCompleted == null)) {
                this.IsPrintExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPrintExistOperationCompleted);
            }
            this.InvokeAsync("IsPrintExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsPrintExistOperationCompleted, userState);
        }
        
        private void OnIsPrintExistOperationCompleted(object arg) {
            if ((this.IsPrintExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPrintExistCompleted(this, new IsPrintExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPrintID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrintID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPrintID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrintIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPrintIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPrintIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPrintIDOperationCompleted == null)) {
                this.GetPrintIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrintIDOperationCompleted);
            }
            this.InvokeAsync("GetPrintID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPrintIDOperationCompleted, userState);
        }
        
        private void OnGetPrintIDOperationCompleted(object arg) {
            if ((this.GetPrintIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrintIDCompleted(this, new GetPrintIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPrinter", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrinter(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPrinter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrinterAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPrinterAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPrinterAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPrinterOperationCompleted == null)) {
                this.GetPrinterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrinterOperationCompleted);
            }
            this.InvokeAsync("GetPrinter", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPrinterOperationCompleted, userState);
        }
        
        private void OnGetPrinterOperationCompleted(object arg) {
            if ((this.GetPrinterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrinterCompleted(this, new GetPrinterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsPrinterDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPrinterDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsPrinterDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPrinterDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsPrinterDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsPrinterDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsPrinterDeleteSourceOperationCompleted == null)) {
                this.IsPrinterDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPrinterDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsPrinterDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsPrinterDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsPrinterDeleteSourceOperationCompleted(object arg) {
            if ((this.IsPrinterDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPrinterDeleteSourceCompleted(this, new IsPrinterDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddFFPM", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFFPM(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource) {
            object[] results = this.Invoke("AddFFPM", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inExecutionPath,
                        inQueueSpecs,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFFPMAsync(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource) {
            this.AddFFPMAsync(inUsername, inPassword, inTicketID, inExecutionPath, inQueueSpecs, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddFFPMAsync(string inUsername, string inPassword, string inTicketID, string inExecutionPath, string inQueueSpecs, bool inDeleteSource, object userState) {
            if ((this.AddFFPMOperationCompleted == null)) {
                this.AddFFPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFFPMOperationCompleted);
            }
            this.InvokeAsync("AddFFPM", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inExecutionPath,
                        inQueueSpecs,
                        inDeleteSource}, this.AddFFPMOperationCompleted, userState);
        }
        
        private void OnAddFFPMOperationCompleted(object arg) {
            if ((this.AddFFPMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFFPMCompleted(this, new AddFFPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/AddFFPMByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFFPMByID(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource) {
            object[] results = this.Invoke("AddFFPMByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inQueueSpecs,
                        inDeleteSource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFFPMByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource) {
            this.AddFFPMByIDAsync(inUsername, inPassword, inTicketID, inDestinationID, inQueueSpecs, inDeleteSource, null);
        }
        
        /// <remarks/>
        public void AddFFPMByIDAsync(string inUsername, string inPassword, string inTicketID, string inDestinationID, string inQueueSpecs, bool inDeleteSource, object userState) {
            if ((this.AddFFPMByIDOperationCompleted == null)) {
                this.AddFFPMByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFFPMByIDOperationCompleted);
            }
            this.InvokeAsync("AddFFPMByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDestinationID,
                        inQueueSpecs,
                        inDeleteSource}, this.AddFFPMByIDOperationCompleted, userState);
        }
        
        private void OnAddFFPMByIDOperationCompleted(object arg) {
            if ((this.AddFFPMByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFFPMByIDCompleted(this, new AddFFPMByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveFFPM", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveFFPM(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveFFPM", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFFPMAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveFFPMAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveFFPMAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveFFPMOperationCompleted == null)) {
                this.RemoveFFPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFFPMOperationCompleted);
            }
            this.InvokeAsync("RemoveFFPM", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveFFPMOperationCompleted, userState);
        }
        
        private void OnRemoveFFPMOperationCompleted(object arg) {
            if ((this.RemoveFFPMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFFPMCompleted(this, new RemoveFFPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFFPMExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFFPMExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFFPMExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFFPMExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFFPMExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFFPMExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFFPMExistOperationCompleted == null)) {
                this.IsFFPMExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFFPMExistOperationCompleted);
            }
            this.InvokeAsync("IsFFPMExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFFPMExistOperationCompleted, userState);
        }
        
        private void OnIsFFPMExistOperationCompleted(object arg) {
            if ((this.IsFFPMExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFFPMExistCompleted(this, new IsFFPMExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFFPMID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFFPMID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFFPMID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFFPMIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFFPMIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFFPMIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFFPMIDOperationCompleted == null)) {
                this.GetFFPMIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFFPMIDOperationCompleted);
            }
            this.InvokeAsync("GetFFPMID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFFPMIDOperationCompleted, userState);
        }
        
        private void OnGetFFPMIDOperationCompleted(object arg) {
            if ((this.GetFFPMIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFFPMIDCompleted(this, new GetFFPMIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFFPMDeleteSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFFPMDeleteSource(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFFPMDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFFPMDeleteSourceAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFFPMDeleteSourceAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFFPMDeleteSourceAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFFPMDeleteSourceOperationCompleted == null)) {
                this.IsFFPMDeleteSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFFPMDeleteSourceOperationCompleted);
            }
            this.InvokeAsync("IsFFPMDeleteSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFFPMDeleteSourceOperationCompleted, userState);
        }
        
        private void OnIsFFPMDeleteSourceOperationCompleted(object arg) {
            if ((this.IsFFPMDeleteSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFFPMDeleteSourceCompleted(this, new IsFFPMDeleteSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/CreateNewTicket", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTicket(string inUsername, string inPassword) {
            object[] results = this.Invoke("CreateNewTicket", new object[] {
                        inUsername,
                        inPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewTicketAsync(string inUsername, string inPassword) {
            this.CreateNewTicketAsync(inUsername, inPassword, null);
        }
        
        /// <remarks/>
        public void CreateNewTicketAsync(string inUsername, string inPassword, object userState) {
            if ((this.CreateNewTicketOperationCompleted == null)) {
                this.CreateNewTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTicketOperationCompleted);
            }
            this.InvokeAsync("CreateNewTicket", new object[] {
                        inUsername,
                        inPassword}, this.CreateNewTicketOperationCompleted, userState);
        }
        
        private void OnCreateNewTicketOperationCompleted(object arg) {
            if ((this.CreateNewTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTicketCompleted(this, new CreateNewTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/CreateNewTicketForDocument", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTicketForDocument(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("CreateNewTicketForDocument", new object[] {
                        inUsername,
                        inPassword,
                        inDocumentID,
                        inRITableName,
                        inFlatOriented});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewTicketForDocumentAsync(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented) {
            this.CreateNewTicketForDocumentAsync(inUsername, inPassword, inDocumentID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void CreateNewTicketForDocumentAsync(string inUsername, string inPassword, string inDocumentID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.CreateNewTicketForDocumentOperationCompleted == null)) {
                this.CreateNewTicketForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTicketForDocumentOperationCompleted);
            }
            this.InvokeAsync("CreateNewTicketForDocument", new object[] {
                        inUsername,
                        inPassword,
                        inDocumentID,
                        inRITableName,
                        inFlatOriented}, this.CreateNewTicketForDocumentOperationCompleted, userState);
        }
        
        private void OnCreateNewTicketForDocumentOperationCompleted(object arg) {
            if ((this.CreateNewTicketForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTicketForDocumentCompleted(this, new CreateNewTicketForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/CreateNewTicketForPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTicketForPlan(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("CreateNewTicketForPlan", new object[] {
                        inUsername,
                        inPassword,
                        inPlanID,
                        inRITableName,
                        inFlatOriented});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewTicketForPlanAsync(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented) {
            this.CreateNewTicketForPlanAsync(inUsername, inPassword, inPlanID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void CreateNewTicketForPlanAsync(string inUsername, string inPassword, string inPlanID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.CreateNewTicketForPlanOperationCompleted == null)) {
                this.CreateNewTicketForPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTicketForPlanOperationCompleted);
            }
            this.InvokeAsync("CreateNewTicketForPlan", new object[] {
                        inUsername,
                        inPassword,
                        inPlanID,
                        inRITableName,
                        inFlatOriented}, this.CreateNewTicketForPlanOperationCompleted, userState);
        }
        
        private void OnCreateNewTicketForPlanOperationCompleted(object arg) {
            if ((this.CreateNewTicketForPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTicketForPlanCompleted(this, new CreateNewTicketForPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/CreateNewTicketForCampaign", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewTicketForCampaign(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("CreateNewTicketForCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inCampaignID,
                        inRITableName,
                        inFlatOriented});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewTicketForCampaignAsync(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented) {
            this.CreateNewTicketForCampaignAsync(inUsername, inPassword, inCampaignID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void CreateNewTicketForCampaignAsync(string inUsername, string inPassword, string inCampaignID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.CreateNewTicketForCampaignOperationCompleted == null)) {
                this.CreateNewTicketForCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTicketForCampaignOperationCompleted);
            }
            this.InvokeAsync("CreateNewTicketForCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inCampaignID,
                        inRITableName,
                        inFlatOriented}, this.CreateNewTicketForCampaignOperationCompleted, userState);
        }
        
        private void OnCreateNewTicketForCampaignOperationCompleted(object arg) {
            if ((this.CreateNewTicketForCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTicketForCampaignCompleted(this, new CreateNewTicketForCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RecycleTicketID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecycleTicketID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RecycleTicketID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecycleTicketIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.RecycleTicketIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RecycleTicketIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RecycleTicketIDOperationCompleted == null)) {
                this.RecycleTicketIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecycleTicketIDOperationCompleted);
            }
            this.InvokeAsync("RecycleTicketID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RecycleTicketIDOperationCompleted, userState);
        }
        
        private void OnRecycleTicketIDOperationCompleted(object arg) {
            if ((this.RecycleTicketIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecycleTicketIDCompleted(this, new RecycleTicketIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadTicketFromFile", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadTicketFromFile(string inUsername, string inPassword, string inFilePath) {
            object[] results = this.Invoke("LoadTicketFromFile", new object[] {
                        inUsername,
                        inPassword,
                        inFilePath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTicketFromFileAsync(string inUsername, string inPassword, string inFilePath) {
            this.LoadTicketFromFileAsync(inUsername, inPassword, inFilePath, null);
        }
        
        /// <remarks/>
        public void LoadTicketFromFileAsync(string inUsername, string inPassword, string inFilePath, object userState) {
            if ((this.LoadTicketFromFileOperationCompleted == null)) {
                this.LoadTicketFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTicketFromFileOperationCompleted);
            }
            this.InvokeAsync("LoadTicketFromFile", new object[] {
                        inUsername,
                        inPassword,
                        inFilePath}, this.LoadTicketFromFileOperationCompleted, userState);
        }
        
        private void OnLoadTicketFromFileOperationCompleted(object arg) {
            if ((this.LoadTicketFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTicketFromFileCompleted(this, new LoadTicketFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadJobTicket", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadJobTicket(string inUsername, string inPassword, string inJobID) {
            object[] results = this.Invoke("LoadJobTicket", new object[] {
                        inUsername,
                        inPassword,
                        inJobID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadJobTicketAsync(string inUsername, string inPassword, string inJobID) {
            this.LoadJobTicketAsync(inUsername, inPassword, inJobID, null);
        }
        
        /// <remarks/>
        public void LoadJobTicketAsync(string inUsername, string inPassword, string inJobID, object userState) {
            if ((this.LoadJobTicketOperationCompleted == null)) {
                this.LoadJobTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadJobTicketOperationCompleted);
            }
            this.InvokeAsync("LoadJobTicket", new object[] {
                        inUsername,
                        inPassword,
                        inJobID}, this.LoadJobTicketOperationCompleted, userState);
        }
        
        private void OnLoadJobTicketOperationCompleted(object arg) {
            if ((this.LoadJobTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadJobTicketCompleted(this, new LoadJobTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadLastJobTicketOfDocument", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadLastJobTicketOfDocument(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType) {
            object[] results = this.Invoke("LoadLastJobTicketOfDocument", new object[] {
                        inUsername,
                        inPassword,
                        inDocumentID,
                        inIncludeDeleted,
                        inIncludeFailed,
                        inJobType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadLastJobTicketOfDocumentAsync(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType) {
            this.LoadLastJobTicketOfDocumentAsync(inUsername, inPassword, inDocumentID, inIncludeDeleted, inIncludeFailed, inJobType, null);
        }
        
        /// <remarks/>
        public void LoadLastJobTicketOfDocumentAsync(string inUsername, string inPassword, string inDocumentID, bool inIncludeDeleted, bool inIncludeFailed, string inJobType, object userState) {
            if ((this.LoadLastJobTicketOfDocumentOperationCompleted == null)) {
                this.LoadLastJobTicketOfDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadLastJobTicketOfDocumentOperationCompleted);
            }
            this.InvokeAsync("LoadLastJobTicketOfDocument", new object[] {
                        inUsername,
                        inPassword,
                        inDocumentID,
                        inIncludeDeleted,
                        inIncludeFailed,
                        inJobType}, this.LoadLastJobTicketOfDocumentOperationCompleted, userState);
        }
        
        private void OnLoadLastJobTicketOfDocumentOperationCompleted(object arg) {
            if ((this.LoadLastJobTicketOfDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadLastJobTicketOfDocumentCompleted(this, new LoadLastJobTicketOfDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadLastJobTicketOfPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadLastJobTicketOfPlan(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed) {
            object[] results = this.Invoke("LoadLastJobTicketOfPlan", new object[] {
                        inUsername,
                        inPassword,
                        inPlanID,
                        inIncludeDeleted,
                        inIncludeFailed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadLastJobTicketOfPlanAsync(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed) {
            this.LoadLastJobTicketOfPlanAsync(inUsername, inPassword, inPlanID, inIncludeDeleted, inIncludeFailed, null);
        }
        
        /// <remarks/>
        public void LoadLastJobTicketOfPlanAsync(string inUsername, string inPassword, string inPlanID, bool inIncludeDeleted, bool inIncludeFailed, object userState) {
            if ((this.LoadLastJobTicketOfPlanOperationCompleted == null)) {
                this.LoadLastJobTicketOfPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadLastJobTicketOfPlanOperationCompleted);
            }
            this.InvokeAsync("LoadLastJobTicketOfPlan", new object[] {
                        inUsername,
                        inPassword,
                        inPlanID,
                        inIncludeDeleted,
                        inIncludeFailed}, this.LoadLastJobTicketOfPlanOperationCompleted, userState);
        }
        
        private void OnLoadLastJobTicketOfPlanOperationCompleted(object arg) {
            if ((this.LoadLastJobTicketOfPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadLastJobTicketOfPlanCompleted(this, new LoadLastJobTicketOfPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadTicketFromTicket", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadTicketFromTicket(string inUsername, string inPassword, string inTicket) {
            object[] results = this.Invoke("LoadTicketFromTicket", new object[] {
                        inUsername,
                        inPassword,
                        inTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTicketFromTicketAsync(string inUsername, string inPassword, string inTicket) {
            this.LoadTicketFromTicketAsync(inUsername, inPassword, inTicket, null);
        }
        
        /// <remarks/>
        public void LoadTicketFromTicketAsync(string inUsername, string inPassword, string inTicket, object userState) {
            if ((this.LoadTicketFromTicketOperationCompleted == null)) {
                this.LoadTicketFromTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTicketFromTicketOperationCompleted);
            }
            this.InvokeAsync("LoadTicketFromTicket", new object[] {
                        inUsername,
                        inPassword,
                        inTicket}, this.LoadTicketFromTicketOperationCompleted, userState);
        }
        
        private void OnLoadTicketFromTicketOperationCompleted(object arg) {
            if ((this.LoadTicketFromTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTicketFromTicketCompleted(this, new LoadTicketFromTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTicketPropertyFromDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicketPropertyFromDB(string inUsername, string inPassword, string inTicketGuid, string inProperty) {
            object[] results = this.Invoke("GetTicketPropertyFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGuid,
                        inProperty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketPropertyFromDBAsync(string inUsername, string inPassword, string inTicketGuid, string inProperty) {
            this.GetTicketPropertyFromDBAsync(inUsername, inPassword, inTicketGuid, inProperty, null);
        }
        
        /// <remarks/>
        public void GetTicketPropertyFromDBAsync(string inUsername, string inPassword, string inTicketGuid, string inProperty, object userState) {
            if ((this.GetTicketPropertyFromDBOperationCompleted == null)) {
                this.GetTicketPropertyFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketPropertyFromDBOperationCompleted);
            }
            this.InvokeAsync("GetTicketPropertyFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGuid,
                        inProperty}, this.GetTicketPropertyFromDBOperationCompleted, userState);
        }
        
        private void OnGetTicketPropertyFromDBOperationCompleted(object arg) {
            if ((this.GetTicketPropertyFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketPropertyFromDBCompleted(this, new GetTicketPropertyFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/LoadTicketFromDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadTicketFromDB(string inUsername, string inPassword, string inTicketGuid) {
            object[] results = this.Invoke("LoadTicketFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTicketFromDBAsync(string inUsername, string inPassword, string inTicketGuid) {
            this.LoadTicketFromDBAsync(inUsername, inPassword, inTicketGuid, null);
        }
        
        /// <remarks/>
        public void LoadTicketFromDBAsync(string inUsername, string inPassword, string inTicketGuid, object userState) {
            if ((this.LoadTicketFromDBOperationCompleted == null)) {
                this.LoadTicketFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTicketFromDBOperationCompleted);
            }
            this.InvokeAsync("LoadTicketFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGuid}, this.LoadTicketFromDBOperationCompleted, userState);
        }
        
        private void OnLoadTicketFromDBOperationCompleted(object arg) {
            if ((this.LoadTicketFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTicketFromDBCompleted(this, new LoadTicketFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SaveTicketToFile", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveTicketToFile(string inUsername, string inPassword, string inTicketID, string inFilePath) {
            object[] results = this.Invoke("SaveTicketToFile", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTicketToFileAsync(string inUsername, string inPassword, string inTicketID, string inFilePath) {
            this.SaveTicketToFileAsync(inUsername, inPassword, inTicketID, inFilePath, null);
        }
        
        /// <remarks/>
        public void SaveTicketToFileAsync(string inUsername, string inPassword, string inTicketID, string inFilePath, object userState) {
            if ((this.SaveTicketToFileOperationCompleted == null)) {
                this.SaveTicketToFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTicketToFileOperationCompleted);
            }
            this.InvokeAsync("SaveTicketToFile", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFilePath}, this.SaveTicketToFileOperationCompleted, userState);
        }
        
        private void OnSaveTicketToFileOperationCompleted(object arg) {
            if ((this.SaveTicketToFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTicketToFileCompleted(this, new SaveTicketToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SaveNewTicketToDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveNewTicketToDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate) {
            object[] results = this.Invoke("SaveNewTicketToDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTicketName,
                        inAccountID,
                        inIsTemplate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewTicketToDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate) {
            this.SaveNewTicketToDBAsync(inUsername, inPassword, inTicketID, inTicketName, inAccountID, inIsTemplate, null);
        }
        
        /// <remarks/>
        public void SaveNewTicketToDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inAccountID, bool inIsTemplate, object userState) {
            if ((this.SaveNewTicketToDBOperationCompleted == null)) {
                this.SaveNewTicketToDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewTicketToDBOperationCompleted);
            }
            this.InvokeAsync("SaveNewTicketToDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTicketName,
                        inAccountID,
                        inIsTemplate}, this.SaveNewTicketToDBOperationCompleted, userState);
        }
        
        private void OnSaveNewTicketToDBOperationCompleted(object arg) {
            if ((this.SaveNewTicketToDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewTicketToDBCompleted(this, new SaveNewTicketToDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/OverwriteTicketInDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OverwriteTicketInDB(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid) {
            object[] results = this.Invoke("OverwriteTicketInDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTicketName,
                        inTicketGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OverwriteTicketInDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid) {
            this.OverwriteTicketInDBAsync(inUsername, inPassword, inTicketID, inTicketName, inTicketGuid, null);
        }
        
        /// <remarks/>
        public void OverwriteTicketInDBAsync(string inUsername, string inPassword, string inTicketID, string inTicketName, string inTicketGuid, object userState) {
            if ((this.OverwriteTicketInDBOperationCompleted == null)) {
                this.OverwriteTicketInDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOverwriteTicketInDBOperationCompleted);
            }
            this.InvokeAsync("OverwriteTicketInDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inTicketName,
                        inTicketGuid}, this.OverwriteTicketInDBOperationCompleted, userState);
        }
        
        private void OnOverwriteTicketInDBOperationCompleted(object arg) {
            if ((this.OverwriteTicketInDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OverwriteTicketInDBCompleted(this, new OverwriteTicketInDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/DeleteTicketFromDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTicketFromDB(string inUsername, string inPassword, string inTicketGUID) {
            object[] results = this.Invoke("DeleteTicketFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGUID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTicketFromDBAsync(string inUsername, string inPassword, string inTicketGUID) {
            this.DeleteTicketFromDBAsync(inUsername, inPassword, inTicketGUID, null);
        }
        
        /// <remarks/>
        public void DeleteTicketFromDBAsync(string inUsername, string inPassword, string inTicketGUID, object userState) {
            if ((this.DeleteTicketFromDBOperationCompleted == null)) {
                this.DeleteTicketFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTicketFromDBOperationCompleted);
            }
            this.InvokeAsync("DeleteTicketFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inTicketGUID}, this.DeleteTicketFromDBOperationCompleted, userState);
        }
        
        private void OnDeleteTicketFromDBOperationCompleted(object arg) {
            if ((this.DeleteTicketFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTicketFromDBCompleted(this, new DeleteTicketFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTicketsFromDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsFromDB(string inUsername, string inPassword, string inJobType) {
            object[] results = this.Invoke("GetTicketsFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inJobType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsFromDBAsync(string inUsername, string inPassword, string inJobType) {
            this.GetTicketsFromDBAsync(inUsername, inPassword, inJobType, null);
        }
        
        /// <remarks/>
        public void GetTicketsFromDBAsync(string inUsername, string inPassword, string inJobType, object userState) {
            if ((this.GetTicketsFromDBOperationCompleted == null)) {
                this.GetTicketsFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsFromDBOperationCompleted);
            }
            this.InvokeAsync("GetTicketsFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inJobType}, this.GetTicketsFromDBOperationCompleted, userState);
        }
        
        private void OnGetTicketsFromDBOperationCompleted(object arg) {
            if ((this.GetTicketsFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsFromDBCompleted(this, new GetTicketsFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTemplatesFromDB", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTemplatesFromDB(string inUsername, string inPassword, string inJobType, string inAccountID) {
            object[] results = this.Invoke("GetTemplatesFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inJobType,
                        inAccountID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplatesFromDBAsync(string inUsername, string inPassword, string inJobType, string inAccountID) {
            this.GetTemplatesFromDBAsync(inUsername, inPassword, inJobType, inAccountID, null);
        }
        
        /// <remarks/>
        public void GetTemplatesFromDBAsync(string inUsername, string inPassword, string inJobType, string inAccountID, object userState) {
            if ((this.GetTemplatesFromDBOperationCompleted == null)) {
                this.GetTemplatesFromDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplatesFromDBOperationCompleted);
            }
            this.InvokeAsync("GetTemplatesFromDB", new object[] {
                        inUsername,
                        inPassword,
                        inJobType,
                        inAccountID}, this.GetTemplatesFromDBOperationCompleted, userState);
        }
        
        private void OnGetTemplatesFromDBOperationCompleted(object arg) {
            if ((this.GetTemplatesFromDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplatesFromDBCompleted(this, new GetTemplatesFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTicket", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicket(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetTicket", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetTicketAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetTicketAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetTicketOperationCompleted == null)) {
                this.GetTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketOperationCompleted);
            }
            this.InvokeAsync("GetTicket", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetTicketOperationCompleted, userState);
        }
        
        private void OnGetTicketOperationCompleted(object arg) {
            if ((this.GetTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketCompleted(this, new GetTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetTicketAndRecycleID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicketAndRecycleID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetTicketAndRecycleID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketAndRecycleIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetTicketAndRecycleIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetTicketAndRecycleIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetTicketAndRecycleIDOperationCompleted == null)) {
                this.GetTicketAndRecycleIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketAndRecycleIDOperationCompleted);
            }
            this.InvokeAsync("GetTicketAndRecycleID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetTicketAndRecycleIDOperationCompleted, userState);
        }
        
        private void OnGetTicketAndRecycleIDOperationCompleted(object arg) {
            if ((this.GetTicketAndRecycleIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketAndRecycleIDCompleted(this, new GetTicketAndRecycleIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTicketDefaultsForDocument", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTicketDefaultsForDocument(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("SetTicketDefaultsForDocument", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inRITableName,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented) {
            this.SetTicketDefaultsForDocumentAsync(inUsername, inPassword, inTicketID, inDocumentID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.SetTicketDefaultsForDocumentOperationCompleted == null)) {
                this.SetTicketDefaultsForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTicketDefaultsForDocumentOperationCompleted);
            }
            this.InvokeAsync("SetTicketDefaultsForDocument", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID,
                        inRITableName,
                        inFlatOriented}, this.SetTicketDefaultsForDocumentOperationCompleted, userState);
        }
        
        private void OnSetTicketDefaultsForDocumentOperationCompleted(object arg) {
            if ((this.SetTicketDefaultsForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTicketDefaultsForDocumentCompleted(this, new SetTicketDefaultsForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTicketDefaultsForPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTicketDefaultsForPlan(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("SetTicketDefaultsForPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanID,
                        inRITableName,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented) {
            this.SetTicketDefaultsForPlanAsync(inUsername, inPassword, inTicketID, inPlanID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.SetTicketDefaultsForPlanOperationCompleted == null)) {
                this.SetTicketDefaultsForPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTicketDefaultsForPlanOperationCompleted);
            }
            this.InvokeAsync("SetTicketDefaultsForPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanID,
                        inRITableName,
                        inFlatOriented}, this.SetTicketDefaultsForPlanOperationCompleted, userState);
        }
        
        private void OnSetTicketDefaultsForPlanOperationCompleted(object arg) {
            if ((this.SetTicketDefaultsForPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTicketDefaultsForPlanCompleted(this, new SetTicketDefaultsForPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetTicketDefaultsForCampaign", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTicketDefaultsForCampaign(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented) {
            object[] results = this.Invoke("SetTicketDefaultsForCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inRITableName,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForCampaignAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented) {
            this.SetTicketDefaultsForCampaignAsync(inUsername, inPassword, inTicketID, inCampaignID, inRITableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void SetTicketDefaultsForCampaignAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inRITableName, bool inFlatOriented, object userState) {
            if ((this.SetTicketDefaultsForCampaignOperationCompleted == null)) {
                this.SetTicketDefaultsForCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTicketDefaultsForCampaignOperationCompleted);
            }
            this.InvokeAsync("SetTicketDefaultsForCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inRITableName,
                        inFlatOriented}, this.SetTicketDefaultsForCampaignOperationCompleted, userState);
        }
        
        private void OnSetTicketDefaultsForCampaignOperationCompleted(object arg) {
            if ((this.SetTicketDefaultsForCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTicketDefaultsForCampaignCompleted(this, new SetTicketDefaultsForCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPlan(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial) {
            object[] results = this.Invoke("SetPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanFilePath,
                        inUseTrivial});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial) {
            this.SetPlanAsync(inUsername, inPassword, inTicketID, inPlanFilePath, inUseTrivial, null);
        }
        
        /// <remarks/>
        public void SetPlanAsync(string inUsername, string inPassword, string inTicketID, string inPlanFilePath, bool inUseTrivial, object userState) {
            if ((this.SetPlanOperationCompleted == null)) {
                this.SetPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPlanOperationCompleted);
            }
            this.InvokeAsync("SetPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanFilePath,
                        inUseTrivial}, this.SetPlanOperationCompleted, userState);
        }
        
        private void OnSetPlanOperationCompleted(object arg) {
            if ((this.SetPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPlanCompleted(this, new SetPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetPlanByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPlanByID(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial) {
            object[] results = this.Invoke("SetPlanByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanID,
                        inUseTrivial});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPlanByIDAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial) {
            this.SetPlanByIDAsync(inUsername, inPassword, inTicketID, inPlanID, inUseTrivial, null);
        }
        
        /// <remarks/>
        public void SetPlanByIDAsync(string inUsername, string inPassword, string inTicketID, string inPlanID, bool inUseTrivial, object userState) {
            if ((this.SetPlanByIDOperationCompleted == null)) {
                this.SetPlanByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPlanByIDOperationCompleted);
            }
            this.InvokeAsync("SetPlanByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPlanID,
                        inUseTrivial}, this.SetPlanByIDOperationCompleted, userState);
        }
        
        private void OnSetPlanByIDOperationCompleted(object arg) {
            if ((this.SetPlanByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPlanByIDCompleted(this, new SetPlanByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetUseTrivialPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUseTrivialPlan(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetUseTrivialPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetUseTrivialPlanAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetUseTrivialPlanOperationCompleted == null)) {
                this.GetUseTrivialPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUseTrivialPlanOperationCompleted);
            }
            this.InvokeAsync("GetUseTrivialPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetUseTrivialPlanOperationCompleted, userState);
        }
        
        private void OnGetUseTrivialPlanOperationCompleted(object arg) {
            if ((this.GetUseTrivialPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUseTrivialPlanCompleted(this, new GetUseTrivialPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetUseTrivialPlan", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUseTrivialPlan(string inUsername, string inPassword, string inTicketID, bool inUseTrivial) {
            object[] results = this.Invoke("SetUseTrivialPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inUseTrivial});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID, bool inUseTrivial) {
            this.SetUseTrivialPlanAsync(inUsername, inPassword, inTicketID, inUseTrivial, null);
        }
        
        /// <remarks/>
        public void SetUseTrivialPlanAsync(string inUsername, string inPassword, string inTicketID, bool inUseTrivial, object userState) {
            if ((this.SetUseTrivialPlanOperationCompleted == null)) {
                this.SetUseTrivialPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUseTrivialPlanOperationCompleted);
            }
            this.InvokeAsync("SetUseTrivialPlan", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inUseTrivial}, this.SetUseTrivialPlanOperationCompleted, userState);
        }
        
        private void OnSetUseTrivialPlanOperationCompleted(object arg) {
            if ((this.SetUseTrivialPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUseTrivialPlanCompleted(this, new SetUseTrivialPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPlanPath", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPlanPath(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPlanPath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlanPathAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPlanPathAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPlanPathAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPlanPathOperationCompleted == null)) {
                this.GetPlanPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlanPathOperationCompleted);
            }
            this.InvokeAsync("GetPlanPath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPlanPathOperationCompleted, userState);
        }
        
        private void OnGetPlanPathOperationCompleted(object arg) {
            if ((this.GetPlanPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlanPathCompleted(this, new GetPlanPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPlanID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPlanID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPlanID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlanIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPlanIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPlanIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPlanIDOperationCompleted == null)) {
                this.GetPlanIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlanIDOperationCompleted);
            }
            this.InvokeAsync("GetPlanID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPlanIDOperationCompleted, userState);
        }
        
        private void OnGetPlanIDOperationCompleted(object arg) {
            if ((this.GetPlanIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlanIDCompleted(this, new GetPlanIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetCustomization", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCustomization(string inUsername, string inPassword, string inTicketID, Customization inCustomization, bool expressionAsValue) {
            object[] results = this.Invoke("SetCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomization,
                        expressionAsValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCustomizationAsync(string inUsername, string inPassword, string inTicketID, Customization inCustomization, bool expressionAsValue) {
            this.SetCustomizationAsync(inUsername, inPassword, inTicketID, inCustomization, expressionAsValue, null);
        }
        
        /// <remarks/>
        public void SetCustomizationAsync(string inUsername, string inPassword, string inTicketID, Customization inCustomization, bool expressionAsValue, object userState) {
            if ((this.SetCustomizationOperationCompleted == null)) {
                this.SetCustomizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomizationOperationCompleted);
            }
            this.InvokeAsync("SetCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomization,
                        expressionAsValue}, this.SetCustomizationOperationCompleted, userState);
        }
        
        private void OnSetCustomizationOperationCompleted(object arg) {
            if ((this.SetCustomizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomizationCompleted(this, new SetCustomizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetCustomizations", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCustomizations(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Customization[] inCustomizations, bool expressionAsValue) {
            object[] results = this.Invoke("SetCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomizations,
                        expressionAsValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCustomizationsAsync(string inUsername, string inPassword, string inTicketID, Customization[] inCustomizations, bool expressionAsValue) {
            this.SetCustomizationsAsync(inUsername, inPassword, inTicketID, inCustomizations, expressionAsValue, null);
        }
        
        /// <remarks/>
        public void SetCustomizationsAsync(string inUsername, string inPassword, string inTicketID, Customization[] inCustomizations, bool expressionAsValue, object userState) {
            if ((this.SetCustomizationsOperationCompleted == null)) {
                this.SetCustomizationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomizationsOperationCompleted);
            }
            this.InvokeAsync("SetCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomizations,
                        expressionAsValue}, this.SetCustomizationsOperationCompleted, userState);
        }
        
        private void OnSetCustomizationsOperationCompleted(object arg) {
            if ((this.SetCustomizationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomizationsCompleted(this, new SetCustomizationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveCustomization", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveCustomization(string inUsername, string inPassword, string inTicketID, string inName, string inType) {
            object[] results = this.Invoke("RemoveCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCustomizationAsync(string inUsername, string inPassword, string inTicketID, string inName, string inType) {
            this.RemoveCustomizationAsync(inUsername, inPassword, inTicketID, inName, inType, null);
        }
        
        /// <remarks/>
        public void RemoveCustomizationAsync(string inUsername, string inPassword, string inTicketID, string inName, string inType, object userState) {
            if ((this.RemoveCustomizationOperationCompleted == null)) {
                this.RemoveCustomizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCustomizationOperationCompleted);
            }
            this.InvokeAsync("RemoveCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inType}, this.RemoveCustomizationOperationCompleted, userState);
        }
        
        private void OnRemoveCustomizationOperationCompleted(object arg) {
            if ((this.RemoveCustomizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCustomizationCompleted(this, new RemoveCustomizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllCustomizations", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllCustomizations(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllCustomizationsAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllCustomizationsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllCustomizationsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllCustomizationsOperationCompleted == null)) {
                this.RemoveAllCustomizationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllCustomizationsOperationCompleted);
            }
            this.InvokeAsync("RemoveAllCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllCustomizationsOperationCompleted, userState);
        }
        
        private void OnRemoveAllCustomizationsOperationCompleted(object arg) {
            if ((this.RemoveAllCustomizationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllCustomizationsCompleted(this, new RemoveAllCustomizationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetCustomizationsCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCustomizationsCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetCustomizationsCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomizationsCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetCustomizationsCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetCustomizationsCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetCustomizationsCountOperationCompleted == null)) {
                this.GetCustomizationsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomizationsCountOperationCompleted);
            }
            this.InvokeAsync("GetCustomizationsCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetCustomizationsCountOperationCompleted, userState);
        }
        
        private void OnGetCustomizationsCountOperationCompleted(object arg) {
            if ((this.GetCustomizationsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomizationsCountCompleted(this, new GetCustomizationsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthCustomization", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Customization GetNthCustomization(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex) {
            object[] results = this.Invoke("GetNthCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomizationIndex});
            return ((Customization)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthCustomizationAsync(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex) {
            this.GetNthCustomizationAsync(inUsername, inPassword, inTicketID, inCustomizationIndex, null);
        }
        
        /// <remarks/>
        public void GetNthCustomizationAsync(string inUsername, string inPassword, string inTicketID, int inCustomizationIndex, object userState) {
            if ((this.GetNthCustomizationOperationCompleted == null)) {
                this.GetNthCustomizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthCustomizationOperationCompleted);
            }
            this.InvokeAsync("GetNthCustomization", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCustomizationIndex}, this.GetNthCustomizationOperationCompleted, userState);
        }
        
        private void OnGetNthCustomizationOperationCompleted(object arg) {
            if ((this.GetNthCustomizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthCustomizationCompleted(this, new GetNthCustomizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetCustomizations", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Customization[] GetCustomizations(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((Customization[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomizationsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetCustomizationsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetCustomizationsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetCustomizationsOperationCompleted == null)) {
                this.GetCustomizationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomizationsOperationCompleted);
            }
            this.InvokeAsync("GetCustomizations", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetCustomizationsOperationCompleted, userState);
        }
        
        private void OnGetCustomizationsOperationCompleted(object arg) {
            if ((this.GetCustomizationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomizationsCompleted(this, new GetCustomizationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDocumentByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDocumentByID(string inUsername, string inPassword, string inTicketID, string inDocumentID) {
            object[] results = this.Invoke("SetDocumentByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDocumentByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID) {
            this.SetDocumentByIDAsync(inUsername, inPassword, inTicketID, inDocumentID, null);
        }
        
        /// <remarks/>
        public void SetDocumentByIDAsync(string inUsername, string inPassword, string inTicketID, string inDocumentID, object userState) {
            if ((this.SetDocumentByIDOperationCompleted == null)) {
                this.SetDocumentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDocumentByIDOperationCompleted);
            }
            this.InvokeAsync("SetDocumentByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentID}, this.SetDocumentByIDOperationCompleted, userState);
        }
        
        private void OnSetDocumentByIDOperationCompleted(object arg) {
            if ((this.SetDocumentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDocumentByIDCompleted(this, new SetDocumentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDocument", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDocument(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType) {
            object[] results = this.Invoke("SetDocument", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentFolder,
                        inDocumentName,
                        inDocumentType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType) {
            this.SetDocumentAsync(inUsername, inPassword, inTicketID, inDocumentFolder, inDocumentName, inDocumentType, null);
        }
        
        /// <remarks/>
        public void SetDocumentAsync(string inUsername, string inPassword, string inTicketID, string inDocumentFolder, string inDocumentName, string inDocumentType, object userState) {
            if ((this.SetDocumentOperationCompleted == null)) {
                this.SetDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDocumentOperationCompleted);
            }
            this.InvokeAsync("SetDocument", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inDocumentFolder,
                        inDocumentName,
                        inDocumentType}, this.SetDocumentOperationCompleted, userState);
        }
        
        private void OnSetDocumentOperationCompleted(object arg) {
            if ((this.SetDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDocumentCompleted(this, new SetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDocumentID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDocumentID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDocumentIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDocumentIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDocumentIDOperationCompleted == null)) {
                this.GetDocumentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentIDOperationCompleted);
            }
            this.InvokeAsync("GetDocumentID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDocumentIDOperationCompleted, userState);
        }
        
        private void OnGetDocumentIDOperationCompleted(object arg) {
            if ((this.GetDocumentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentIDCompleted(this, new GetDocumentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDocumentFolder", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentFolder(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDocumentFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentFolderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDocumentFolderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDocumentFolderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDocumentFolderOperationCompleted == null)) {
                this.GetDocumentFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentFolderOperationCompleted);
            }
            this.InvokeAsync("GetDocumentFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDocumentFolderOperationCompleted, userState);
        }
        
        private void OnGetDocumentFolderOperationCompleted(object arg) {
            if ((this.GetDocumentFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentFolderCompleted(this, new GetDocumentFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDocumentName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDocumentName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDocumentNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDocumentNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDocumentNameOperationCompleted == null)) {
                this.GetDocumentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentNameOperationCompleted);
            }
            this.InvokeAsync("GetDocumentName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDocumentNameOperationCompleted, userState);
        }
        
        private void OnGetDocumentNameOperationCompleted(object arg) {
            if ((this.GetDocumentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentNameCompleted(this, new GetDocumentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetDocumentType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetDocumentType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetDocumentTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetDocumentTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetDocumentTypeOperationCompleted == null)) {
                this.GetDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("GetDocumentType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetDocumentTypeOperationCompleted, userState);
        }
        
        private void OnGetDocumentTypeOperationCompleted(object arg) {
            if ((this.GetDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentTypeCompleted(this, new GetDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetWebResourcesBasePath", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath) {
            object[] results = this.Invoke("SetWebResourcesBasePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebResourcesBasePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath) {
            this.SetWebResourcesBasePathAsync(inUsername, inPassword, inTicketID, inWebResourcesBasePath, null);
        }
        
        /// <remarks/>
        public void SetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID, string inWebResourcesBasePath, object userState) {
            if ((this.SetWebResourcesBasePathOperationCompleted == null)) {
                this.SetWebResourcesBasePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebResourcesBasePathOperationCompleted);
            }
            this.InvokeAsync("SetWebResourcesBasePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inWebResourcesBasePath}, this.SetWebResourcesBasePathOperationCompleted, userState);
        }
        
        private void OnSetWebResourcesBasePathOperationCompleted(object arg) {
            if ((this.SetWebResourcesBasePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebResourcesBasePathCompleted(this, new SetWebResourcesBasePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetWebResourcesBasePath", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebResourcesBasePath(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetWebResourcesBasePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetWebResourcesBasePathAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetWebResourcesBasePathAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetWebResourcesBasePathOperationCompleted == null)) {
                this.GetWebResourcesBasePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebResourcesBasePathOperationCompleted);
            }
            this.InvokeAsync("GetWebResourcesBasePath", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetWebResourcesBasePathOperationCompleted, userState);
        }
        
        private void OnGetWebResourcesBasePathOperationCompleted(object arg) {
            if ((this.GetWebResourcesBasePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebResourcesBasePathCompleted(this, new GetWebResourcesBasePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAllowFriendly", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAllowFriendly(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly) {
            object[] results = this.Invoke("SetAllowFriendly", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAllowFriendly});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly) {
            this.SetAllowFriendlyAsync(inUsername, inPassword, inTicketID, inAllowFriendly, null);
        }
        
        /// <remarks/>
        public void SetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID, bool inAllowFriendly, object userState) {
            if ((this.SetAllowFriendlyOperationCompleted == null)) {
                this.SetAllowFriendlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAllowFriendlyOperationCompleted);
            }
            this.InvokeAsync("SetAllowFriendly", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAllowFriendly}, this.SetAllowFriendlyOperationCompleted, userState);
        }
        
        private void OnSetAllowFriendlyOperationCompleted(object arg) {
            if ((this.SetAllowFriendlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAllowFriendlyCompleted(this, new SetAllowFriendlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAllowFriendly", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAllowFriendly(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAllowFriendly", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAllowFriendlyAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAllowFriendlyAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAllowFriendlyOperationCompleted == null)) {
                this.GetAllowFriendlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllowFriendlyOperationCompleted);
            }
            this.InvokeAsync("GetAllowFriendly", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAllowFriendlyOperationCompleted, userState);
        }
        
        private void OnGetAllowFriendlyOperationCompleted(object arg) {
            if ((this.GetAllowFriendlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllowFriendlyCompleted(this, new GetAllowFriendlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetFriendliness", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFriendliness(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix) {
            object[] results = this.Invoke("SetFriendliness", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFriendlyDomain,
                        inFriendlyFolder,
                        inFriendlyLandingPage,
                        inFriendlyRedirectMode,
                        inFriendlyRIDPrefix});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFriendlinessAsync(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix) {
            this.SetFriendlinessAsync(inUsername, inPassword, inTicketID, inFriendlyDomain, inFriendlyFolder, inFriendlyLandingPage, inFriendlyRedirectMode, inFriendlyRIDPrefix, null);
        }
        
        /// <remarks/>
        public void SetFriendlinessAsync(string inUsername, string inPassword, string inTicketID, string inFriendlyDomain, string inFriendlyFolder, string inFriendlyLandingPage, bool inFriendlyRedirectMode, bool inFriendlyRIDPrefix, object userState) {
            if ((this.SetFriendlinessOperationCompleted == null)) {
                this.SetFriendlinessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFriendlinessOperationCompleted);
            }
            this.InvokeAsync("SetFriendliness", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFriendlyDomain,
                        inFriendlyFolder,
                        inFriendlyLandingPage,
                        inFriendlyRedirectMode,
                        inFriendlyRIDPrefix}, this.SetFriendlinessOperationCompleted, userState);
        }
        
        private void OnSetFriendlinessOperationCompleted(object arg) {
            if ((this.SetFriendlinessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFriendlinessCompleted(this, new SetFriendlinessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFriendlyDomain", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFriendlyDomain(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFriendlyDomain", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendlyDomainAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFriendlyDomainAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFriendlyDomainAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFriendlyDomainOperationCompleted == null)) {
                this.GetFriendlyDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendlyDomainOperationCompleted);
            }
            this.InvokeAsync("GetFriendlyDomain", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFriendlyDomainOperationCompleted, userState);
        }
        
        private void OnGetFriendlyDomainOperationCompleted(object arg) {
            if ((this.GetFriendlyDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendlyDomainCompleted(this, new GetFriendlyDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFriendlyFolder", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFriendlyFolder(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFriendlyFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendlyFolderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFriendlyFolderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFriendlyFolderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFriendlyFolderOperationCompleted == null)) {
                this.GetFriendlyFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendlyFolderOperationCompleted);
            }
            this.InvokeAsync("GetFriendlyFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFriendlyFolderOperationCompleted, userState);
        }
        
        private void OnGetFriendlyFolderOperationCompleted(object arg) {
            if ((this.GetFriendlyFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendlyFolderCompleted(this, new GetFriendlyFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFriendlyLandingPage", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFriendlyLandingPage(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFriendlyLandingPage", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFriendlyLandingPageAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFriendlyLandingPageAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFriendlyLandingPageAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFriendlyLandingPageOperationCompleted == null)) {
                this.GetFriendlyLandingPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFriendlyLandingPageOperationCompleted);
            }
            this.InvokeAsync("GetFriendlyLandingPage", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFriendlyLandingPageOperationCompleted, userState);
        }
        
        private void OnGetFriendlyLandingPageOperationCompleted(object arg) {
            if ((this.GetFriendlyLandingPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFriendlyLandingPageCompleted(this, new GetFriendlyLandingPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFriendlyUrlRedirectMode", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFriendlyUrlRedirectMode(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFriendlyUrlRedirectMode", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFriendlyUrlRedirectModeAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFriendlyUrlRedirectModeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFriendlyUrlRedirectModeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFriendlyUrlRedirectModeOperationCompleted == null)) {
                this.IsFriendlyUrlRedirectModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFriendlyUrlRedirectModeOperationCompleted);
            }
            this.InvokeAsync("IsFriendlyUrlRedirectMode", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFriendlyUrlRedirectModeOperationCompleted, userState);
        }
        
        private void OnIsFriendlyUrlRedirectModeOperationCompleted(object arg) {
            if ((this.IsFriendlyUrlRedirectModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFriendlyUrlRedirectModeCompleted(this, new IsFriendlyUrlRedirectModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsFriendlyUrlUseRIDPrefixMode", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFriendlyUrlUseRIDPrefixMode(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsFriendlyUrlUseRIDPrefixMode", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFriendlyUrlUseRIDPrefixModeAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsFriendlyUrlUseRIDPrefixModeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsFriendlyUrlUseRIDPrefixModeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsFriendlyUrlUseRIDPrefixModeOperationCompleted == null)) {
                this.IsFriendlyUrlUseRIDPrefixModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFriendlyUrlUseRIDPrefixModeOperationCompleted);
            }
            this.InvokeAsync("IsFriendlyUrlUseRIDPrefixMode", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsFriendlyUrlUseRIDPrefixModeOperationCompleted, userState);
        }
        
        private void OnIsFriendlyUrlUseRIDPrefixModeOperationCompleted(object arg) {
            if ((this.IsFriendlyUrlUseRIDPrefixModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFriendlyUrlUseRIDPrefixModeCompleted(this, new IsFriendlyUrlUseRIDPrefixModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetCampaignID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCampaignID(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            object[] results = this.Invoke("SetCampaignID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCampaignIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            this.SetCampaignIDAsync(inUsername, inPassword, inTicketID, inCampaignID, null);
        }
        
        /// <remarks/>
        public void SetCampaignIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, object userState) {
            if ((this.SetCampaignIDOperationCompleted == null)) {
                this.SetCampaignIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCampaignIDOperationCompleted);
            }
            this.InvokeAsync("SetCampaignID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID}, this.SetCampaignIDOperationCompleted, userState);
        }
        
        private void OnSetCampaignIDOperationCompleted(object arg) {
            if ((this.SetCampaignIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCampaignIDCompleted(this, new SetCampaignIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetCampaignID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCampaignID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetCampaignID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCampaignIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetCampaignIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetCampaignIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetCampaignIDOperationCompleted == null)) {
                this.GetCampaignIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCampaignIDOperationCompleted);
            }
            this.InvokeAsync("GetCampaignID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetCampaignIDOperationCompleted, userState);
        }
        
        private void OnGetCampaignIDOperationCompleted(object arg) {
            if ((this.GetCampaignIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCampaignIDCompleted(this, new GetCampaignIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetFonts", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFonts(string inUsername, string inPassword, string inTicketID, string inFontsFolder) {
            object[] results = this.Invoke("SetFonts", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFontsFolder});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFontsAsync(string inUsername, string inPassword, string inTicketID, string inFontsFolder) {
            this.SetFontsAsync(inUsername, inPassword, inTicketID, inFontsFolder, null);
        }
        
        /// <remarks/>
        public void SetFontsAsync(string inUsername, string inPassword, string inTicketID, string inFontsFolder, object userState) {
            if ((this.SetFontsOperationCompleted == null)) {
                this.SetFontsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFontsOperationCompleted);
            }
            this.InvokeAsync("SetFonts", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inFontsFolder}, this.SetFontsOperationCompleted, userState);
        }
        
        private void OnSetFontsOperationCompleted(object arg) {
            if ((this.SetFontsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFontsCompleted(this, new SetFontsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetFontsByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFontsByID(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            object[] results = this.Invoke("SetFontsByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFontsByIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            this.SetFontsByIDAsync(inUsername, inPassword, inTicketID, inCampaignID, null);
        }
        
        /// <remarks/>
        public void SetFontsByIDAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, object userState) {
            if ((this.SetFontsByIDOperationCompleted == null)) {
                this.SetFontsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFontsByIDOperationCompleted);
            }
            this.InvokeAsync("SetFontsByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID}, this.SetFontsByIDOperationCompleted, userState);
        }
        
        private void OnSetFontsByIDOperationCompleted(object arg) {
            if ((this.SetFontsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFontsByIDCompleted(this, new SetFontsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetFontsFolder", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFontsFolder(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetFontsFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFontsFolderAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetFontsFolderAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetFontsFolderAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetFontsFolderOperationCompleted == null)) {
                this.GetFontsFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFontsFolderOperationCompleted);
            }
            this.InvokeAsync("GetFontsFolder", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetFontsFolderOperationCompleted, userState);
        }
        
        private void OnGetFontsFolderOperationCompleted(object arg) {
            if ((this.GetFontsFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFontsFolderCompleted(this, new GetFontsFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetPortLink", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPortLink(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName) {
            object[] results = this.Invoke("SetPortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAccountName,
                        inCampaignName,
                        inPortName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPortLinkAsync(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName) {
            this.SetPortLinkAsync(inUsername, inPassword, inTicketID, inAccountName, inCampaignName, inPortName, null);
        }
        
        /// <remarks/>
        public void SetPortLinkAsync(string inUsername, string inPassword, string inTicketID, string inAccountName, string inCampaignName, string inPortName, object userState) {
            if ((this.SetPortLinkOperationCompleted == null)) {
                this.SetPortLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPortLinkOperationCompleted);
            }
            this.InvokeAsync("SetPortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAccountName,
                        inCampaignName,
                        inPortName}, this.SetPortLinkOperationCompleted, userState);
        }
        
        private void OnSetPortLinkOperationCompleted(object arg) {
            if ((this.SetPortLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPortLinkCompleted(this, new SetPortLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RefreshPortLink", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RefreshPortLink(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RefreshPortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RefreshPortLinkAsync(string inUsername, string inPassword, string inTicketID) {
            this.RefreshPortLinkAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RefreshPortLinkAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RefreshPortLinkOperationCompleted == null)) {
                this.RefreshPortLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshPortLinkOperationCompleted);
            }
            this.InvokeAsync("RefreshPortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RefreshPortLinkOperationCompleted, userState);
        }
        
        private void OnRefreshPortLinkOperationCompleted(object arg) {
            if ((this.RefreshPortLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshPortLinkCompleted(this, new RefreshPortLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemovePortLink", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemovePortLink(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemovePortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePortLinkAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemovePortLinkAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemovePortLinkAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemovePortLinkOperationCompleted == null)) {
                this.RemovePortLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePortLinkOperationCompleted);
            }
            this.InvokeAsync("RemovePortLink", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemovePortLinkOperationCompleted, userState);
        }
        
        private void OnRemovePortLinkOperationCompleted(object arg) {
            if ((this.RemovePortLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePortLinkCompleted(this, new RemovePortLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/IsPortLinkExist", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPortLinkExist(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("IsPortLinkExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPortLinkExistAsync(string inUsername, string inPassword, string inTicketID) {
            this.IsPortLinkExistAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void IsPortLinkExistAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.IsPortLinkExistOperationCompleted == null)) {
                this.IsPortLinkExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPortLinkExistOperationCompleted);
            }
            this.InvokeAsync("IsPortLinkExist", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.IsPortLinkExistOperationCompleted, userState);
        }
        
        private void OnIsPortLinkExistOperationCompleted(object arg) {
            if ((this.IsPortLinkExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPortLinkExistCompleted(this, new IsPortLinkExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPortLinkAccount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortLinkAccount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPortLinkAccount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortLinkAccountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPortLinkAccountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPortLinkAccountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPortLinkAccountOperationCompleted == null)) {
                this.GetPortLinkAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortLinkAccountOperationCompleted);
            }
            this.InvokeAsync("GetPortLinkAccount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPortLinkAccountOperationCompleted, userState);
        }
        
        private void OnGetPortLinkAccountOperationCompleted(object arg) {
            if ((this.GetPortLinkAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortLinkAccountCompleted(this, new GetPortLinkAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPortLinkCampaign", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortLinkCampaign(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPortLinkCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortLinkCampaignAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPortLinkCampaignAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPortLinkCampaignAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPortLinkCampaignOperationCompleted == null)) {
                this.GetPortLinkCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortLinkCampaignOperationCompleted);
            }
            this.InvokeAsync("GetPortLinkCampaign", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPortLinkCampaignOperationCompleted, userState);
        }
        
        private void OnGetPortLinkCampaignOperationCompleted(object arg) {
            if ((this.GetPortLinkCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortLinkCampaignCompleted(this, new GetPortLinkCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPortLinkPortName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortLinkPortName(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPortLinkPortName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortLinkPortNameAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPortLinkPortNameAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPortLinkPortNameAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPortLinkPortNameOperationCompleted == null)) {
                this.GetPortLinkPortNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortLinkPortNameOperationCompleted);
            }
            this.InvokeAsync("GetPortLinkPortName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPortLinkPortNameOperationCompleted, userState);
        }
        
        private void OnGetPortLinkPortNameOperationCompleted(object arg) {
            if ((this.GetPortLinkPortNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortLinkPortNameCompleted(this, new GetPortLinkPortNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDataSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName, Connection inConnection) {
            object[] results = this.Invoke("SetDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName,
                        inConnection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, Connection inConnection) {
            this.SetDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName, inConnection, null);
        }
        
        /// <remarks/>
        public void SetDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, Connection inConnection, object userState) {
            if ((this.SetDataSourceOperationCompleted == null)) {
                this.SetDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataSourceOperationCompleted);
            }
            this.InvokeAsync("SetDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName,
                        inConnection}, this.SetDataSourceOperationCompleted, userState);
        }
        
        private void OnSetDataSourceOperationCompleted(object arg) {
            if ((this.SetDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataSourceCompleted(this, new SetDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDataSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDataSources(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Connection[] inConnections) {
            object[] results = this.Invoke("SetDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaNameArray,
                        inConnections});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, Connection[] inConnections) {
            this.SetDataSourcesAsync(inUsername, inPassword, inTicketID, inSchemaNameArray, inConnections, null);
        }
        
        /// <remarks/>
        public void SetDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, Connection[] inConnections, object userState) {
            if ((this.SetDataSourcesOperationCompleted == null)) {
                this.SetDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataSourcesOperationCompleted);
            }
            this.InvokeAsync("SetDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaNameArray,
                        inConnections}, this.SetDataSourcesOperationCompleted, userState);
        }
        
        private void OnSetDataSourcesOperationCompleted(object arg) {
            if ((this.SetDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataSourcesCompleted(this, new SetDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDataSourceByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDataSourceByID(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID) {
            object[] results = this.Invoke("SetDataSourceByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName,
                        inDataSourceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID) {
            this.SetDataSourceByIDAsync(inUsername, inPassword, inTicketID, inSchemaName, inDataSourceID, null);
        }
        
        /// <remarks/>
        public void SetDataSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, string inDataSourceID, object userState) {
            if ((this.SetDataSourceByIDOperationCompleted == null)) {
                this.SetDataSourceByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataSourceByIDOperationCompleted);
            }
            this.InvokeAsync("SetDataSourceByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName,
                        inDataSourceID}, this.SetDataSourceByIDOperationCompleted, userState);
        }
        
        private void OnSetDataSourceByIDOperationCompleted(object arg) {
            if ((this.SetDataSourceByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataSourceByIDCompleted(this, new SetDataSourceByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDataSourcesByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDataSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray) {
            object[] results = this.Invoke("SetDataSourcesByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaNameArray,
                        inDataSourceIDArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray) {
            this.SetDataSourcesByIDAsync(inUsername, inPassword, inTicketID, inSchemaNameArray, inDataSourceIDArray, null);
        }
        
        /// <remarks/>
        public void SetDataSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inSchemaNameArray, string[] inDataSourceIDArray, object userState) {
            if ((this.SetDataSourcesByIDOperationCompleted == null)) {
                this.SetDataSourcesByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataSourcesByIDOperationCompleted);
            }
            this.InvokeAsync("SetDataSourcesByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaNameArray,
                        inDataSourceIDArray}, this.SetDataSourcesByIDOperationCompleted, userState);
        }
        
        private void OnSetDataSourcesByIDOperationCompleted(object arg) {
            if ((this.SetDataSourcesByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataSourcesByIDCompleted(this, new SetDataSourcesByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDefaultDataSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultDataSources(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented) {
            object[] results = this.Invoke("SetDefaultDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented) {
            this.SetDefaultDataSourcesAsync(inUsername, inPassword, inTicketID, inCampaignID, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void SetDefaultDataSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, bool inFlatOriented, object userState) {
            if ((this.SetDefaultDataSourcesOperationCompleted == null)) {
                this.SetDefaultDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultDataSourcesOperationCompleted);
            }
            this.InvokeAsync("SetDefaultDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inFlatOriented}, this.SetDefaultDataSourcesOperationCompleted, userState);
        }
        
        private void OnSetDefaultDataSourcesOperationCompleted(object arg) {
            if ((this.SetDefaultDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultDataSourcesCompleted(this, new SetDefaultDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllSchemaDataSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllSchemaDataSources(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllSchemaDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllSchemaDataSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllSchemaDataSourcesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllSchemaDataSourcesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllSchemaDataSourcesOperationCompleted == null)) {
                this.RemoveAllSchemaDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllSchemaDataSourcesOperationCompleted);
            }
            this.InvokeAsync("RemoveAllSchemaDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllSchemaDataSourcesOperationCompleted, userState);
        }
        
        private void OnRemoveAllSchemaDataSourcesOperationCompleted(object arg) {
            if ((this.RemoveAllSchemaDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllSchemaDataSourcesCompleted(this, new RemoveAllSchemaDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveSchemaDataSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            object[] results = this.Invoke("RemoveSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            this.RemoveSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName, null);
        }
        
        /// <remarks/>
        public void RemoveSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, object userState) {
            if ((this.RemoveSchemaDataSourceOperationCompleted == null)) {
                this.RemoveSchemaDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSchemaDataSourceOperationCompleted);
            }
            this.InvokeAsync("RemoveSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName}, this.RemoveSchemaDataSourceOperationCompleted, userState);
        }
        
        private void OnRemoveSchemaDataSourceOperationCompleted(object arg) {
            if ((this.RemoveSchemaDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSchemaDataSourceCompleted(this, new RemoveSchemaDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemaDataSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Connection GetSchemaDataSource(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            object[] results = this.Invoke("GetSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName});
            return ((Connection)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            this.GetSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaName, null);
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, object userState) {
            if ((this.GetSchemaDataSourceOperationCompleted == null)) {
                this.GetSchemaDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaDataSourceOperationCompleted);
            }
            this.InvokeAsync("GetSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName}, this.GetSchemaDataSourceOperationCompleted, userState);
        }
        
        private void OnGetSchemaDataSourceOperationCompleted(object arg) {
            if ((this.GetSchemaDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaDataSourceCompleted(this, new GetSchemaDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemaDataSourceID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            object[] results = this.Invoke("GetSchemaDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName) {
            this.GetSchemaDataSourceIDAsync(inUsername, inPassword, inTicketID, inSchemaName, null);
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inSchemaName, object userState) {
            if ((this.GetSchemaDataSourceIDOperationCompleted == null)) {
                this.GetSchemaDataSourceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaDataSourceIDOperationCompleted);
            }
            this.InvokeAsync("GetSchemaDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaName}, this.GetSchemaDataSourceIDOperationCompleted, userState);
        }
        
        private void OnGetSchemaDataSourceIDOperationCompleted(object arg) {
            if ((this.GetSchemaDataSourceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaDataSourceIDCompleted(this, new GetSchemaDataSourceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemasNames", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSchemasNames(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSchemasNames", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemasNamesAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSchemasNamesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSchemasNamesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSchemasNamesOperationCompleted == null)) {
                this.GetSchemasNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemasNamesOperationCompleted);
            }
            this.InvokeAsync("GetSchemasNames", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSchemasNamesOperationCompleted, userState);
        }
        
        private void OnGetSchemasNamesOperationCompleted(object arg) {
            if ((this.GetSchemasNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemasNamesCompleted(this, new GetSchemasNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemasDataSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Connection[] GetSchemasDataSources(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSchemasDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((Connection[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemasDataSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSchemasDataSourcesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSchemasDataSourcesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSchemasDataSourcesOperationCompleted == null)) {
                this.GetSchemasDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemasDataSourcesOperationCompleted);
            }
            this.InvokeAsync("GetSchemasDataSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSchemasDataSourcesOperationCompleted, userState);
        }
        
        private void OnGetSchemasDataSourcesOperationCompleted(object arg) {
            if ((this.GetSchemasDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemasDataSourcesCompleted(this, new GetSchemasDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemaDataSourceIDs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSchemaDataSourceIDs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSchemaDataSourceIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceIDsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSchemaDataSourceIDsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSchemaDataSourceIDsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSchemaDataSourceIDsOperationCompleted == null)) {
                this.GetSchemaDataSourceIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaDataSourceIDsOperationCompleted);
            }
            this.InvokeAsync("GetSchemaDataSourceIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSchemaDataSourceIDsOperationCompleted, userState);
        }
        
        private void OnGetSchemaDataSourceIDsOperationCompleted(object arg) {
            if ((this.GetSchemaDataSourceIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaDataSourceIDsCompleted(this, new GetSchemaDataSourceIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetSchemaDataSourcesCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSchemaDataSourcesCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetSchemaDataSourcesCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaDataSourcesCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetSchemaDataSourcesCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetSchemaDataSourcesCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetSchemaDataSourcesCountOperationCompleted == null)) {
                this.GetSchemaDataSourcesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaDataSourcesCountOperationCompleted);
            }
            this.InvokeAsync("GetSchemaDataSourcesCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetSchemaDataSourcesCountOperationCompleted, userState);
        }
        
        private void OnGetSchemaDataSourcesCountOperationCompleted(object arg) {
            if ((this.GetSchemaDataSourcesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaDataSourcesCountCompleted(this, new GetSchemaDataSourcesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthSchemaName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthSchemaName(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            object[] results = this.Invoke("GetNthSchemaName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthSchemaNameAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            this.GetNthSchemaNameAsync(inUsername, inPassword, inTicketID, inSchemaIndex, null);
        }
        
        /// <remarks/>
        public void GetNthSchemaNameAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex, object userState) {
            if ((this.GetNthSchemaNameOperationCompleted == null)) {
                this.GetNthSchemaNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthSchemaNameOperationCompleted);
            }
            this.InvokeAsync("GetNthSchemaName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex}, this.GetNthSchemaNameOperationCompleted, userState);
        }
        
        private void OnGetNthSchemaNameOperationCompleted(object arg) {
            if ((this.GetNthSchemaNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthSchemaNameCompleted(this, new GetNthSchemaNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthSchemaDataSourceID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthSchemaDataSourceID(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            object[] results = this.Invoke("GetNthSchemaDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            this.GetNthSchemaDataSourceIDAsync(inUsername, inPassword, inTicketID, inSchemaIndex, null);
        }
        
        /// <remarks/>
        public void GetNthSchemaDataSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex, object userState) {
            if ((this.GetNthSchemaDataSourceIDOperationCompleted == null)) {
                this.GetNthSchemaDataSourceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthSchemaDataSourceIDOperationCompleted);
            }
            this.InvokeAsync("GetNthSchemaDataSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex}, this.GetNthSchemaDataSourceIDOperationCompleted, userState);
        }
        
        private void OnGetNthSchemaDataSourceIDOperationCompleted(object arg) {
            if ((this.GetNthSchemaDataSourceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthSchemaDataSourceIDCompleted(this, new GetNthSchemaDataSourceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthSchemaDataSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Connection GetNthSchemaDataSource(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            object[] results = this.Invoke("GetNthSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex});
            return ((Connection)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex) {
            this.GetNthSchemaDataSourceAsync(inUsername, inPassword, inTicketID, inSchemaIndex, null);
        }
        
        /// <remarks/>
        public void GetNthSchemaDataSourceAsync(string inUsername, string inPassword, string inTicketID, int inSchemaIndex, object userState) {
            if ((this.GetNthSchemaDataSourceOperationCompleted == null)) {
                this.GetNthSchemaDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthSchemaDataSourceOperationCompleted);
            }
            this.InvokeAsync("GetNthSchemaDataSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inSchemaIndex}, this.GetNthSchemaDataSourceOperationCompleted, userState);
        }
        
        private void OnGetNthSchemaDataSourceOperationCompleted(object arg) {
            if ((this.GetNthSchemaDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthSchemaDataSourceCompleted(this, new GetNthSchemaDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetResolveAssets", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetResolveAssets(string inUsername, string inPassword, string inTicketID, bool inResolved) {
            object[] results = this.Invoke("SetResolveAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inResolved});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inResolved) {
            this.SetResolveAssetsAsync(inUsername, inPassword, inTicketID, inResolved, null);
        }
        
        /// <remarks/>
        public void SetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inResolved, object userState) {
            if ((this.SetResolveAssetsOperationCompleted == null)) {
                this.SetResolveAssetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetResolveAssetsOperationCompleted);
            }
            this.InvokeAsync("SetResolveAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inResolved}, this.SetResolveAssetsOperationCompleted, userState);
        }
        
        private void OnSetResolveAssetsOperationCompleted(object arg) {
            if ((this.SetResolveAssetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetResolveAssetsCompleted(this, new SetResolveAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetResolveAssets", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetResolveAssets(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetResolveAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetResolveAssetsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetResolveAssetsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetResolveAssetsOperationCompleted == null)) {
                this.GetResolveAssetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResolveAssetsOperationCompleted);
            }
            this.InvokeAsync("GetResolveAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetResolveAssetsOperationCompleted, userState);
        }
        
        private void OnGetResolveAssetsOperationCompleted(object arg) {
            if ((this.GetResolveAssetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResolveAssetsCompleted(this, new GetResolveAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetConnectivityAssets", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetConnectivityAssets(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity) {
            object[] results = this.Invoke("SetConnectivityAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inUseConnectivity});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity) {
            this.SetConnectivityAssetsAsync(inUsername, inPassword, inTicketID, inUseConnectivity, null);
        }
        
        /// <remarks/>
        public void SetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID, bool inUseConnectivity, object userState) {
            if ((this.SetConnectivityAssetsOperationCompleted == null)) {
                this.SetConnectivityAssetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetConnectivityAssetsOperationCompleted);
            }
            this.InvokeAsync("SetConnectivityAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inUseConnectivity}, this.SetConnectivityAssetsOperationCompleted, userState);
        }
        
        private void OnSetConnectivityAssetsOperationCompleted(object arg) {
            if ((this.SetConnectivityAssetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetConnectivityAssetsCompleted(this, new SetConnectivityAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetConnectivityAssets", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetConnectivityAssets(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetConnectivityAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetConnectivityAssetsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetConnectivityAssetsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetConnectivityAssetsOperationCompleted == null)) {
                this.GetConnectivityAssetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConnectivityAssetsOperationCompleted);
            }
            this.InvokeAsync("GetConnectivityAssets", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetConnectivityAssetsOperationCompleted, userState);
        }
        
        private void OnGetConnectivityAssetsOperationCompleted(object arg) {
            if ((this.GetConnectivityAssetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConnectivityAssetsCompleted(this, new GetConnectivityAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetsPrefix", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetsPrefix(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix) {
            object[] results = this.Invoke("SetAssetsPrefix", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPrefixType,
                        inFiexedPrefix});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetsPrefixAsync(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix) {
            this.SetAssetsPrefixAsync(inUsername, inPassword, inTicketID, inPrefixType, inFiexedPrefix, null);
        }
        
        /// <remarks/>
        public void SetAssetsPrefixAsync(string inUsername, string inPassword, string inTicketID, string inPrefixType, string inFiexedPrefix, object userState) {
            if ((this.SetAssetsPrefixOperationCompleted == null)) {
                this.SetAssetsPrefixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetsPrefixOperationCompleted);
            }
            this.InvokeAsync("SetAssetsPrefix", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPrefixType,
                        inFiexedPrefix}, this.SetAssetsPrefixOperationCompleted, userState);
        }
        
        private void OnSetAssetsPrefixOperationCompleted(object arg) {
            if ((this.SetAssetsPrefixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetsPrefixCompleted(this, new SetAssetsPrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetsPrefixType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAssetsPrefixType(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetsPrefixType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetsPrefixTypeAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetsPrefixTypeAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetsPrefixTypeAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetsPrefixTypeOperationCompleted == null)) {
                this.GetAssetsPrefixTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetsPrefixTypeOperationCompleted);
            }
            this.InvokeAsync("GetAssetsPrefixType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetsPrefixTypeOperationCompleted, userState);
        }
        
        private void OnGetAssetsPrefixTypeOperationCompleted(object arg) {
            if ((this.GetAssetsPrefixTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetsPrefixTypeCompleted(this, new GetAssetsPrefixTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetsFixedPrefix", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAssetsFixedPrefix(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetsFixedPrefix", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetsFixedPrefixAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetsFixedPrefixAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetsFixedPrefixAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetsFixedPrefixOperationCompleted == null)) {
                this.GetAssetsFixedPrefixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetsFixedPrefixOperationCompleted);
            }
            this.InvokeAsync("GetAssetsFixedPrefix", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetsFixedPrefixOperationCompleted, userState);
        }
        
        private void OnGetAssetsFixedPrefixOperationCompleted(object arg) {
            if ((this.GetAssetsFixedPrefixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetsFixedPrefixCompleted(this, new GetAssetsFixedPrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSource(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceStruct inAssetSourceInfo, int inPriority) {
            object[] results = this.Invoke("SetAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inAssetSourceInfo,
                        inPriority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceStruct inAssetSourceInfo, int inPriority) {
            this.SetAssetSourceAsync(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority, null);
        }
        
        /// <remarks/>
        public void SetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceStruct inAssetSourceInfo, int inPriority, object userState) {
            if ((this.SetAssetSourceOperationCompleted == null)) {
                this.SetAssetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourceOperationCompleted);
            }
            this.InvokeAsync("SetAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inAssetSourceInfo,
                        inPriority}, this.SetAssetSourceOperationCompleted, userState);
        }
        
        private void OnSetAssetSourceOperationCompleted(object arg) {
            if ((this.SetAssetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourceCompleted(this, new SetAssetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSourceEx", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceInfo inAssetSourceInfo, int inPriority) {
            object[] results = this.Invoke("SetAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inAssetSourceInfo,
                        inPriority});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceInfo inAssetSourceInfo, int inPriority) {
            this.SetAssetSourceExAsync(inUsername, inPassword, inTicketID, inName, inAssetSourceInfo, inPriority, null);
        }
        
        /// <remarks/>
        public void SetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName, AssetSourceInfo inAssetSourceInfo, int inPriority, object userState) {
            if ((this.SetAssetSourceExOperationCompleted == null)) {
                this.SetAssetSourceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourceExOperationCompleted);
            }
            this.InvokeAsync("SetAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName,
                        inAssetSourceInfo,
                        inPriority}, this.SetAssetSourceExOperationCompleted, userState);
        }
        
        private void OnSetAssetSourceExOperationCompleted(object arg) {
            if ((this.SetAssetSourceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourceExCompleted(this, new SetAssetSourceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSources(string inUsername, string inPassword, string inTicketID, string[] inNames, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] AssetSourceStruct[] inAssetSources, int[] inPriorities) {
            object[] results = this.Invoke("SetAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inNames,
                        inAssetSources,
                        inPriorities});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, AssetSourceStruct[] inAssetSources, int[] inPriorities) {
            this.SetAssetSourcesAsync(inUsername, inPassword, inTicketID, inNames, inAssetSources, inPriorities, null);
        }
        
        /// <remarks/>
        public void SetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, AssetSourceStruct[] inAssetSources, int[] inPriorities, object userState) {
            if ((this.SetAssetSourcesOperationCompleted == null)) {
                this.SetAssetSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourcesOperationCompleted);
            }
            this.InvokeAsync("SetAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inNames,
                        inAssetSources,
                        inPriorities}, this.SetAssetSourcesOperationCompleted, userState);
        }
        
        private void OnSetAssetSourcesOperationCompleted(object arg) {
            if ((this.SetAssetSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourcesCompleted(this, new SetAssetSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSourcesEx", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSourcesEx(string inUsername, string inPassword, string inTicketID, string[] inNames, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] AssetSourceInfo[] inAssetSources, int[] inPriorities) {
            object[] results = this.Invoke("SetAssetSourcesEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inNames,
                        inAssetSources,
                        inPriorities});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, AssetSourceInfo[] inAssetSources, int[] inPriorities) {
            this.SetAssetSourcesExAsync(inUsername, inPassword, inTicketID, inNames, inAssetSources, inPriorities, null);
        }
        
        /// <remarks/>
        public void SetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID, string[] inNames, AssetSourceInfo[] inAssetSources, int[] inPriorities, object userState) {
            if ((this.SetAssetSourcesExOperationCompleted == null)) {
                this.SetAssetSourcesExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourcesExOperationCompleted);
            }
            this.InvokeAsync("SetAssetSourcesEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inNames,
                        inAssetSources,
                        inPriorities}, this.SetAssetSourcesExOperationCompleted, userState);
        }
        
        private void OnSetAssetSourcesExOperationCompleted(object arg) {
            if ((this.SetAssetSourcesExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourcesExCompleted(this, new SetAssetSourcesExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSourceByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSourceByID(string inUsername, string inPassword, string inTicketID, string inAssetSourceID) {
            object[] results = this.Invoke("SetAssetSourceByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inAssetSourceID) {
            this.SetAssetSourceByIDAsync(inUsername, inPassword, inTicketID, inAssetSourceID, null);
        }
        
        /// <remarks/>
        public void SetAssetSourceByIDAsync(string inUsername, string inPassword, string inTicketID, string inAssetSourceID, object userState) {
            if ((this.SetAssetSourceByIDOperationCompleted == null)) {
                this.SetAssetSourceByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourceByIDOperationCompleted);
            }
            this.InvokeAsync("SetAssetSourceByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceID}, this.SetAssetSourceByIDOperationCompleted, userState);
        }
        
        private void OnSetAssetSourceByIDOperationCompleted(object arg) {
            if ((this.SetAssetSourceByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourceByIDCompleted(this, new SetAssetSourceByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetAssetSourcesByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAssetSourcesByID(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray) {
            object[] results = this.Invoke("SetAssetSourcesByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIDArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssetSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray) {
            this.SetAssetSourcesByIDAsync(inUsername, inPassword, inTicketID, inAssetSourceIDArray, null);
        }
        
        /// <remarks/>
        public void SetAssetSourcesByIDAsync(string inUsername, string inPassword, string inTicketID, string[] inAssetSourceIDArray, object userState) {
            if ((this.SetAssetSourcesByIDOperationCompleted == null)) {
                this.SetAssetSourcesByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssetSourcesByIDOperationCompleted);
            }
            this.InvokeAsync("SetAssetSourcesByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIDArray}, this.SetAssetSourcesByIDOperationCompleted, userState);
        }
        
        private void OnSetAssetSourcesByIDOperationCompleted(object arg) {
            if ((this.SetAssetSourcesByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssetSourcesByIDCompleted(this, new SetAssetSourcesByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDefaultAssetSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultAssetSources(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            object[] results = this.Invoke("SetDefaultAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID) {
            this.SetDefaultAssetSourcesAsync(inUsername, inPassword, inTicketID, inCampaignID, null);
        }
        
        /// <remarks/>
        public void SetDefaultAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, object userState) {
            if ((this.SetDefaultAssetSourcesOperationCompleted == null)) {
                this.SetDefaultAssetSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultAssetSourcesOperationCompleted);
            }
            this.InvokeAsync("SetDefaultAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID}, this.SetDefaultAssetSourcesOperationCompleted, userState);
        }
        
        private void OnSetDefaultAssetSourcesOperationCompleted(object arg) {
            if ((this.SetDefaultAssetSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultAssetSourcesCompleted(this, new SetDefaultAssetSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllAssetSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllAssetSources(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllAssetSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllAssetSourcesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllAssetSourcesOperationCompleted == null)) {
                this.RemoveAllAssetSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllAssetSourcesOperationCompleted);
            }
            this.InvokeAsync("RemoveAllAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllAssetSourcesOperationCompleted, userState);
        }
        
        private void OnRemoveAllAssetSourcesOperationCompleted(object arg) {
            if ((this.RemoveAllAssetSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllAssetSourcesCompleted(this, new RemoveAllAssetSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAssetSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAssetSource(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("RemoveAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.RemoveAssetSourceAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void RemoveAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.RemoveAssetSourceOperationCompleted == null)) {
                this.RemoveAssetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAssetSourceOperationCompleted);
            }
            this.InvokeAsync("RemoveAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.RemoveAssetSourceOperationCompleted, userState);
        }
        
        private void OnRemoveAssetSourceOperationCompleted(object arg) {
            if ((this.RemoveAssetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAssetSourceCompleted(this, new RemoveAssetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AssetSourceStruct GetAssetSource(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("GetAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((AssetSourceStruct)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.GetAssetSourceAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void GetAssetSourceAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.GetAssetSourceOperationCompleted == null)) {
                this.GetAssetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourceOperationCompleted);
            }
            this.InvokeAsync("GetAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.GetAssetSourceOperationCompleted, userState);
        }
        
        private void OnGetAssetSourceOperationCompleted(object arg) {
            if ((this.GetAssetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourceCompleted(this, new GetAssetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourceEx", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AssetSourceInfo GetAssetSourceEx(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("GetAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((AssetSourceInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.GetAssetSourceExAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void GetAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.GetAssetSourceExOperationCompleted == null)) {
                this.GetAssetSourceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourceExOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.GetAssetSourceExOperationCompleted, userState);
        }
        
        private void OnGetAssetSourceExOperationCompleted(object arg) {
            if ((this.GetAssetSourceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourceExCompleted(this, new GetAssetSourceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourceID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAssetSourceID(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("GetAssetSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.GetAssetSourceIDAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void GetAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.GetAssetSourceIDOperationCompleted == null)) {
                this.GetAssetSourceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourceIDOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.GetAssetSourceIDOperationCompleted, userState);
        }
        
        private void OnGetAssetSourceIDOperationCompleted(object arg) {
            if ((this.GetAssetSourceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourceIDCompleted(this, new GetAssetSourceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourcePriority", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAssetSourcePriority(string inUsername, string inPassword, string inTicketID, string inName) {
            object[] results = this.Invoke("GetAssetSourcePriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, string inName) {
            this.GetAssetSourcePriorityAsync(inUsername, inPassword, inTicketID, inName, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, string inName, object userState) {
            if ((this.GetAssetSourcePriorityOperationCompleted == null)) {
                this.GetAssetSourcePriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcePriorityOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourcePriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inName}, this.GetAssetSourcePriorityOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcePriorityOperationCompleted(object arg) {
            if ((this.GetAssetSourcePriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcePriorityCompleted(this, new GetAssetSourcePriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourcesNames", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAssetSourcesNames(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetSourcesNames", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcesNamesAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetSourcesNamesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcesNamesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetSourcesNamesOperationCompleted == null)) {
                this.GetAssetSourcesNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcesNamesOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourcesNames", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetSourcesNamesOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcesNamesOperationCompleted(object arg) {
            if ((this.GetAssetSourcesNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcesNamesCompleted(this, new GetAssetSourcesNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSources", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public AssetSourceStruct[] GetAssetSources(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((AssetSourceStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetSourcesAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcesAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetSourcesOperationCompleted == null)) {
                this.GetAssetSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcesOperationCompleted);
            }
            this.InvokeAsync("GetAssetSources", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetSourcesOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcesOperationCompleted(object arg) {
            if ((this.GetAssetSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcesCompleted(this, new GetAssetSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourcesEx", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public AssetSourceInfo[] GetAssetSourcesEx(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetSourcesEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((AssetSourceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetSourcesExAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcesExAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetSourcesExOperationCompleted == null)) {
                this.GetAssetSourcesExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcesExOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourcesEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetSourcesExOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcesExOperationCompleted(object arg) {
            if ((this.GetAssetSourcesExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcesExCompleted(this, new GetAssetSourcesExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourcesIDs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAssetSourcesIDs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetSourcesIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcesIDsAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetSourcesIDsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcesIDsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetSourcesIDsOperationCompleted == null)) {
                this.GetAssetSourcesIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcesIDsOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourcesIDs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetSourcesIDsOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcesIDsOperationCompleted(object arg) {
            if ((this.GetAssetSourcesIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcesIDsCompleted(this, new GetAssetSourcesIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetAssetSourcesCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAssetSourcesCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetAssetSourcesCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssetSourcesCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetAssetSourcesCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetAssetSourcesCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetAssetSourcesCountOperationCompleted == null)) {
                this.GetAssetSourcesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetSourcesCountOperationCompleted);
            }
            this.InvokeAsync("GetAssetSourcesCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetAssetSourcesCountOperationCompleted, userState);
        }
        
        private void OnGetAssetSourcesCountOperationCompleted(object arg) {
            if ((this.GetAssetSourcesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetSourcesCountCompleted(this, new GetAssetSourcesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthAssetSourceName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthAssetSourceName(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            object[] results = this.Invoke("GetNthAssetSourceName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthAssetSourceNameAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            this.GetNthAssetSourceNameAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex, null);
        }
        
        /// <remarks/>
        public void GetNthAssetSourceNameAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex, object userState) {
            if ((this.GetNthAssetSourceNameOperationCompleted == null)) {
                this.GetNthAssetSourceNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthAssetSourceNameOperationCompleted);
            }
            this.InvokeAsync("GetNthAssetSourceName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex}, this.GetNthAssetSourceNameOperationCompleted, userState);
        }
        
        private void OnGetNthAssetSourceNameOperationCompleted(object arg) {
            if ((this.GetNthAssetSourceNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthAssetSourceNameCompleted(this, new GetNthAssetSourceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthAssetSource", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AssetSourceStruct GetNthAssetSource(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            object[] results = this.Invoke("GetNthAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex});
            return ((AssetSourceStruct)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthAssetSourceAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            this.GetNthAssetSourceAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex, null);
        }
        
        /// <remarks/>
        public void GetNthAssetSourceAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex, object userState) {
            if ((this.GetNthAssetSourceOperationCompleted == null)) {
                this.GetNthAssetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthAssetSourceOperationCompleted);
            }
            this.InvokeAsync("GetNthAssetSource", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex}, this.GetNthAssetSourceOperationCompleted, userState);
        }
        
        private void OnGetNthAssetSourceOperationCompleted(object arg) {
            if ((this.GetNthAssetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthAssetSourceCompleted(this, new GetNthAssetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthAssetSourceEx", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AssetSourceInfo GetNthAssetSourceEx(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            object[] results = this.Invoke("GetNthAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex});
            return ((AssetSourceInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            this.GetNthAssetSourceExAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex, null);
        }
        
        /// <remarks/>
        public void GetNthAssetSourceExAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex, object userState) {
            if ((this.GetNthAssetSourceExOperationCompleted == null)) {
                this.GetNthAssetSourceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthAssetSourceExOperationCompleted);
            }
            this.InvokeAsync("GetNthAssetSourceEx", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex}, this.GetNthAssetSourceExOperationCompleted, userState);
        }
        
        private void OnGetNthAssetSourceExOperationCompleted(object arg) {
            if ((this.GetNthAssetSourceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthAssetSourceExCompleted(this, new GetNthAssetSourceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthAssetSourceID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthAssetSourceID(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            object[] results = this.Invoke("GetNthAssetSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            this.GetNthAssetSourceIDAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex, null);
        }
        
        /// <remarks/>
        public void GetNthAssetSourceIDAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex, object userState) {
            if ((this.GetNthAssetSourceIDOperationCompleted == null)) {
                this.GetNthAssetSourceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthAssetSourceIDOperationCompleted);
            }
            this.InvokeAsync("GetNthAssetSourceID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex}, this.GetNthAssetSourceIDOperationCompleted, userState);
        }
        
        private void OnGetNthAssetSourceIDOperationCompleted(object arg) {
            if ((this.GetNthAssetSourceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthAssetSourceIDCompleted(this, new GetNthAssetSourceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthAssetSourcePriority", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNthAssetSourcePriority(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            object[] results = this.Invoke("GetNthAssetSourcePriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex) {
            this.GetNthAssetSourcePriorityAsync(inUsername, inPassword, inTicketID, inAssetSourceIndex, null);
        }
        
        /// <remarks/>
        public void GetNthAssetSourcePriorityAsync(string inUsername, string inPassword, string inTicketID, int inAssetSourceIndex, object userState) {
            if ((this.GetNthAssetSourcePriorityOperationCompleted == null)) {
                this.GetNthAssetSourcePriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthAssetSourcePriorityOperationCompleted);
            }
            this.InvokeAsync("GetNthAssetSourcePriority", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inAssetSourceIndex}, this.GetNthAssetSourcePriorityOperationCompleted, userState);
        }
        
        private void OnGetNthAssetSourcePriorityOperationCompleted(object arg) {
            if ((this.GetNthAssetSourcePriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthAssetSourcePriorityCompleted(this, new GetNthAssetSourcePriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetPopulationGUID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPopulationGUID(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetPopulationGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetPopulationGUIDAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetPopulationGUIDOperationCompleted == null)) {
                this.GetPopulationGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPopulationGUIDOperationCompleted);
            }
            this.InvokeAsync("GetPopulationGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetPopulationGUIDOperationCompleted, userState);
        }
        
        private void OnGetPopulationGUIDOperationCompleted(object arg) {
            if ((this.GetPopulationGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPopulationGUIDCompleted(this, new GetPopulationGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIRange", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIRange(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo) {
            object[] results = this.Invoke("SetRIRange", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRangeFrom,
                        inRangeTo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIRangeAsync(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo) {
            this.SetRIRangeAsync(inUsername, inPassword, inTicketID, inRangeFrom, inRangeTo, null);
        }
        
        /// <remarks/>
        public void SetRIRangeAsync(string inUsername, string inPassword, string inTicketID, int inRangeFrom, int inRangeTo, object userState) {
            if ((this.SetRIRangeOperationCompleted == null)) {
                this.SetRIRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIRangeOperationCompleted);
            }
            this.InvokeAsync("SetRIRange", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRangeFrom,
                        inRangeTo}, this.SetRIRangeOperationCompleted, userState);
        }
        
        private void OnSetRIRangeOperationCompleted(object arg) {
            if ((this.SetRIRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIRangeCompleted(this, new SetRIRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRI", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRI(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection) {
            object[] results = this.Invoke("SetRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inConnection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection) {
            this.SetRIAsync(inUsername, inPassword, inTicketID, inRIInfo, inConnection, null);
        }
        
        /// <remarks/>
        public void SetRIAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, Connection inConnection, object userState) {
            if ((this.SetRIOperationCompleted == null)) {
                this.SetRIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIOperationCompleted);
            }
            this.InvokeAsync("SetRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inConnection}, this.SetRIOperationCompleted, userState);
        }
        
        private void OnSetRIOperationCompleted(object arg) {
            if ((this.SetRICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRICompleted(this, new SetRICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIs(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] RecipientsInfo[] inRIInfos, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Connection[] inConnections) {
            object[] results = this.Invoke("SetRIs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfos,
                        inConnections});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIsAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo[] inRIInfos, Connection[] inConnections) {
            this.SetRIsAsync(inUsername, inPassword, inTicketID, inRIInfos, inConnections, null);
        }
        
        /// <remarks/>
        public void SetRIsAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo[] inRIInfos, Connection[] inConnections, object userState) {
            if ((this.SetRIsOperationCompleted == null)) {
                this.SetRIsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIsOperationCompleted);
            }
            this.InvokeAsync("SetRIs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfos,
                        inConnections}, this.SetRIsOperationCompleted, userState);
        }
        
        private void OnSetRIsOperationCompleted(object arg) {
            if ((this.SetRIsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIsCompleted(this, new SetRIsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIByID(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID) {
            object[] results = this.Invoke("SetRIByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inDataSourceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID) {
            this.SetRIByIDAsync(inUsername, inPassword, inTicketID, inRIInfo, inDataSourceID, null);
        }
        
        /// <remarks/>
        public void SetRIByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo inRIInfo, string inDataSourceID, object userState) {
            if ((this.SetRIByIDOperationCompleted == null)) {
                this.SetRIByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIByIDOperationCompleted);
            }
            this.InvokeAsync("SetRIByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfo,
                        inDataSourceID}, this.SetRIByIDOperationCompleted, userState);
        }
        
        private void OnSetRIByIDOperationCompleted(object arg) {
            if ((this.SetRIByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIByIDCompleted(this, new SetRIByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIByPopulationGUID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIByPopulationGUID(string inUsername, string inPassword, string inTicketID, string inPopulationGuid) {
            object[] results = this.Invoke("SetRIByPopulationGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPopulationGuid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIByPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID, string inPopulationGuid) {
            this.SetRIByPopulationGUIDAsync(inUsername, inPassword, inTicketID, inPopulationGuid, null);
        }
        
        /// <remarks/>
        public void SetRIByPopulationGUIDAsync(string inUsername, string inPassword, string inTicketID, string inPopulationGuid, object userState) {
            if ((this.SetRIByPopulationGUIDOperationCompleted == null)) {
                this.SetRIByPopulationGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIByPopulationGUIDOperationCompleted);
            }
            this.InvokeAsync("SetRIByPopulationGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inPopulationGuid}, this.SetRIByPopulationGUIDOperationCompleted, userState);
        }
        
        private void OnSetRIByPopulationGUIDOperationCompleted(object arg) {
            if ((this.SetRIByPopulationGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIByPopulationGUIDCompleted(this, new SetRIByPopulationGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetInfoByRunGUID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetInfoByRunGUID(string inUsername, string inPassword, string inTicketID, string inRunGUID) {
            object[] results = this.Invoke("SetInfoByRunGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRunGUID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetInfoByRunGUIDAsync(string inUsername, string inPassword, string inTicketID, string inRunGUID) {
            this.SetInfoByRunGUIDAsync(inUsername, inPassword, inTicketID, inRunGUID, null);
        }
        
        /// <remarks/>
        public void SetInfoByRunGUIDAsync(string inUsername, string inPassword, string inTicketID, string inRunGUID, object userState) {
            if ((this.SetInfoByRunGUIDOperationCompleted == null)) {
                this.SetInfoByRunGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetInfoByRunGUIDOperationCompleted);
            }
            this.InvokeAsync("SetInfoByRunGUID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRunGUID}, this.SetInfoByRunGUIDOperationCompleted, userState);
        }
        
        private void OnSetInfoByRunGUIDOperationCompleted(object arg) {
            if ((this.SetInfoByRunGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetInfoByRunGUIDCompleted(this, new SetInfoByRunGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetRIsByID", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetRIsByID(string inUsername, string inPassword, string inTicketID, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray) {
            object[] results = this.Invoke("SetRIsByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfos,
                        inDataSourceIDArray});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRIsByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray) {
            this.SetRIsByIDAsync(inUsername, inPassword, inTicketID, inRIInfos, inDataSourceIDArray, null);
        }
        
        /// <remarks/>
        public void SetRIsByIDAsync(string inUsername, string inPassword, string inTicketID, RecipientsInfo[] inRIInfos, string[] inDataSourceIDArray, object userState) {
            if ((this.SetRIsByIDOperationCompleted == null)) {
                this.SetRIsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRIsByIDOperationCompleted);
            }
            this.InvokeAsync("SetRIsByID", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIInfos,
                        inDataSourceIDArray}, this.SetRIsByIDOperationCompleted, userState);
        }
        
        private void OnSetRIsByIDOperationCompleted(object arg) {
            if ((this.SetRIsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRIsByIDCompleted(this, new SetRIsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/SetDefaultRI", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultRI(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            object[] results = this.Invoke("SetDefaultRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inTableName,
                        inFlatOriented});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented) {
            this.SetDefaultRIAsync(inUsername, inPassword, inTicketID, inCampaignID, inTableName, inFlatOriented, null);
        }
        
        /// <remarks/>
        public void SetDefaultRIAsync(string inUsername, string inPassword, string inTicketID, string inCampaignID, string inTableName, bool inFlatOriented, object userState) {
            if ((this.SetDefaultRIOperationCompleted == null)) {
                this.SetDefaultRIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultRIOperationCompleted);
            }
            this.InvokeAsync("SetDefaultRI", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inCampaignID,
                        inTableName,
                        inFlatOriented}, this.SetDefaultRIOperationCompleted, userState);
        }
        
        private void OnSetDefaultRIOperationCompleted(object arg) {
            if ((this.SetDefaultRICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultRICompleted(this, new SetDefaultRICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/RemoveAllRIs", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveAllRIs(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("RemoveAllRIs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAllRIsAsync(string inUsername, string inPassword, string inTicketID) {
            this.RemoveAllRIsAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void RemoveAllRIsAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.RemoveAllRIsOperationCompleted == null)) {
                this.RemoveAllRIsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAllRIsOperationCompleted);
            }
            this.InvokeAsync("RemoveAllRIs", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.RemoveAllRIsOperationCompleted, userState);
        }
        
        private void OnRemoveAllRIsOperationCompleted(object arg) {
            if ((this.RemoveAllRIsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAllRIsCompleted(this, new RemoveAllRIsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRIsCount", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRIsCount(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRIsCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIsCountAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRIsCountAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRIsCountAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRIsCountOperationCompleted == null)) {
                this.GetRIsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIsCountOperationCompleted);
            }
            this.InvokeAsync("GetRIsCount", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRIsCountOperationCompleted, userState);
        }
        
        private void OnGetRIsCountOperationCompleted(object arg) {
            if ((this.GetRIsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIsCountCompleted(this, new GetRIsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRIFrom", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRIFrom(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRIFrom", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIFromAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRIFromAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRIFromAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRIFromOperationCompleted == null)) {
                this.GetRIFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIFromOperationCompleted);
            }
            this.InvokeAsync("GetRIFrom", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRIFromOperationCompleted, userState);
        }
        
        private void OnGetRIFromOperationCompleted(object arg) {
            if ((this.GetRIFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIFromCompleted(this, new GetRIFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetRITo", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRITo(string inUsername, string inPassword, string inTicketID) {
            object[] results = this.Invoke("GetRITo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRIToAsync(string inUsername, string inPassword, string inTicketID) {
            this.GetRIToAsync(inUsername, inPassword, inTicketID, null);
        }
        
        /// <remarks/>
        public void GetRIToAsync(string inUsername, string inPassword, string inTicketID, object userState) {
            if ((this.GetRIToOperationCompleted == null)) {
                this.GetRIToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRIToOperationCompleted);
            }
            this.InvokeAsync("GetRITo", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID}, this.GetRIToOperationCompleted, userState);
        }
        
        private void OnGetRIToOperationCompleted(object arg) {
            if ((this.GetRIToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRIToCompleted(this, new GetRIToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthRIRecipientIDListFileName", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNthRIRecipientIDListFileName(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            object[] results = this.Invoke("GetNthRIRecipientIDListFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthRIRecipientIDListFileNameAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            this.GetNthRIRecipientIDListFileNameAsync(inUsername, inPassword, inTicketID, inRIIndex, null);
        }
        
        /// <remarks/>
        public void GetNthRIRecipientIDListFileNameAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex, object userState) {
            if ((this.GetNthRIRecipientIDListFileNameOperationCompleted == null)) {
                this.GetNthRIRecipientIDListFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthRIRecipientIDListFileNameOperationCompleted);
            }
            this.InvokeAsync("GetNthRIRecipientIDListFileName", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex}, this.GetNthRIRecipientIDListFileNameOperationCompleted, userState);
        }
        
        private void OnGetNthRIRecipientIDListFileNameOperationCompleted(object arg) {
            if ((this.GetNthRIRecipientIDListFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthRIRecipientIDListFileNameCompleted(this, new GetNthRIRecipientIDListFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("XMPieWSAPI/GetNthRIRecipientIDListMergeType", RequestNamespace="XMPieWSAPI", ResponseNamespace="XMPieWSAPI", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ERecipientIDListMergeType GetNthRIRecipientIDListMergeType(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            object[] results = this.Invoke("GetNthRIRecipientIDListMergeType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex});
            return ((ERecipientIDListMergeType)(results[0]));
        }
        
        /// <remarks/>
        public void GetNthRIRecipientIDListMergeTypeAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex) {
            this.GetNthRIRecipientIDListMergeTypeAsync(inUsername, inPassword, inTicketID, inRIIndex, null);
        }
        
        /// <remarks/>
        public void GetNthRIRecipientIDListMergeTypeAsync(string inUsername, string inPassword, string inTicketID, int inRIIndex, object userState) {
            if ((this.GetNthRIRecipientIDListMergeTypeOperationCompleted == null)) {
                this.GetNthRIRecipientIDListMergeTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNthRIRecipientIDListMergeTypeOperationCompleted);
            }
            this.InvokeAsync("GetNthRIRecipientIDListMergeType", new object[] {
                        inUsername,
                        inPassword,
                        inTicketID,
                        inRIIndex}, this.GetNthRIRecipientIDListMergeTypeOperationCompleted, userState);
        }
        
        private void OnGetNthRIRecipientIDListMergeTypeOperationCompleted(object arg) {
            if ((this.GetNthRIRecipientIDListMergeTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNthRIRecipientIDListMergeTypeCompleted(this, new GetNthRIRecipientIDListMergeTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Parameter {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceParameter {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceInfo {
        
        private string m_TypeField;
        
        private string m_AssemblyPathField;
        
        private string m_ClassNameField;
        
        private string m_ControlNameField;
        
        private string m_AssetSourceIDField;
        
        private AssetSourceParameter[] m_ParamsField;
        
        /// <remarks/>
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_AssemblyPath {
            get {
                return this.m_AssemblyPathField;
            }
            set {
                this.m_AssemblyPathField = value;
            }
        }
        
        /// <remarks/>
        public string m_ClassName {
            get {
                return this.m_ClassNameField;
            }
            set {
                this.m_ClassNameField = value;
            }
        }
        
        /// <remarks/>
        public string m_ControlName {
            get {
                return this.m_ControlNameField;
            }
            set {
                this.m_ControlNameField = value;
            }
        }
        
        /// <remarks/>
        public string m_AssetSourceID {
            get {
                return this.m_AssetSourceIDField;
            }
            set {
                this.m_AssetSourceIDField = value;
            }
        }
        
        /// <remarks/>
        public AssetSourceParameter[] m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class AssetSourceStruct {
        
        private string m_ParamsField;
        
        private string m_ObjectNameField;
        
        private string m_ProdObjectNameField;
        
        private string m_DllNameField;
        
        /// <remarks/>
        public string m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
            }
        }
        
        /// <remarks/>
        public string m_ObjectName {
            get {
                return this.m_ObjectNameField;
            }
            set {
                this.m_ObjectNameField = value;
            }
        }
        
        /// <remarks/>
        public string m_ProdObjectName {
            get {
                return this.m_ProdObjectNameField;
            }
            set {
                this.m_ProdObjectNameField = value;
            }
        }
        
        /// <remarks/>
        public string m_DllName {
            get {
                return this.m_DllNameField;
            }
            set {
                this.m_DllNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Customization {
        
        private string m_NameField;
        
        private string m_TypeField;
        
        private string m_IOTypeField;
        
        private string m_ExpressionField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_IOType {
            get {
                return this.m_IOTypeField;
            }
            set {
                this.m_IOTypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_Expression {
            get {
                return this.m_ExpressionField;
            }
            set {
                this.m_ExpressionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class SubJobInfo {
        
        private ulong m_IndexField;
        
        private int m_SplitNumField;
        
        private int m_SplitTypeField;
        
        private int m_OrigFromField;
        
        private int m_OrigToField;
        
        /// <remarks/>
        public ulong m_Index {
            get {
                return this.m_IndexField;
            }
            set {
                this.m_IndexField = value;
            }
        }
        
        /// <remarks/>
        public int m_SplitNum {
            get {
                return this.m_SplitNumField;
            }
            set {
                this.m_SplitNumField = value;
            }
        }
        
        /// <remarks/>
        public int m_SplitType {
            get {
                return this.m_SplitTypeField;
            }
            set {
                this.m_SplitTypeField = value;
            }
        }
        
        /// <remarks/>
        public int m_OrigFrom {
            get {
                return this.m_OrigFromField;
            }
            set {
                this.m_OrigFromField = value;
            }
        }
        
        /// <remarks/>
        public int m_OrigTo {
            get {
                return this.m_OrigToField;
            }
            set {
                this.m_OrigToField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Connection {
        
        private string m_TypeField;
        
        private string m_ConnectionStringField;
        
        private string m_AdditionalInfoField;
        
        /// <remarks/>
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_ConnectionString {
            get {
                return this.m_ConnectionStringField;
            }
            set {
                this.m_ConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        public string m_AdditionalInfo {
            get {
                return this.m_AdditionalInfoField;
            }
            set {
                this.m_AdditionalInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class RecipientsInfo {
        
        private int m_FromField;
        
        private int m_ToField;
        
        private int m_FilterTypeField;
        
        private string m_FilterField;
        
        private string m_SubFilterField;
        
        private string m_SelectOneQueryField;
        
        private string m_InsertQueryField;
        
        private string m_UpdateQueryField;
        
        private string m_DeleteQueryField;
        
        private string m_recipientIDListFileNameField;
        
        private int m_recipientIDListMergeTypeField;
        
        /// <remarks/>
        public int m_From {
            get {
                return this.m_FromField;
            }
            set {
                this.m_FromField = value;
            }
        }
        
        /// <remarks/>
        public int m_To {
            get {
                return this.m_ToField;
            }
            set {
                this.m_ToField = value;
            }
        }
        
        /// <remarks/>
        public int m_FilterType {
            get {
                return this.m_FilterTypeField;
            }
            set {
                this.m_FilterTypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_Filter {
            get {
                return this.m_FilterField;
            }
            set {
                this.m_FilterField = value;
            }
        }
        
        /// <remarks/>
        public string m_SubFilter {
            get {
                return this.m_SubFilterField;
            }
            set {
                this.m_SubFilterField = value;
            }
        }
        
        /// <remarks/>
        public string m_SelectOneQuery {
            get {
                return this.m_SelectOneQueryField;
            }
            set {
                this.m_SelectOneQueryField = value;
            }
        }
        
        /// <remarks/>
        public string m_InsertQuery {
            get {
                return this.m_InsertQueryField;
            }
            set {
                this.m_InsertQueryField = value;
            }
        }
        
        /// <remarks/>
        public string m_UpdateQuery {
            get {
                return this.m_UpdateQueryField;
            }
            set {
                this.m_UpdateQueryField = value;
            }
        }
        
        /// <remarks/>
        public string m_DeleteQuery {
            get {
                return this.m_DeleteQueryField;
            }
            set {
                this.m_DeleteQueryField = value;
            }
        }
        
        /// <remarks/>
        public string m_recipientIDListFileName {
            get {
                return this.m_recipientIDListFileNameField;
            }
            set {
                this.m_recipientIDListFileNameField = value;
            }
        }
        
        /// <remarks/>
        public int m_recipientIDListMergeType {
            get {
                return this.m_recipientIDListMergeTypeField;
            }
            set {
                this.m_recipientIDListMergeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class FieldMappingInfo {
        
        private string m_PlanFieldNameField;
        
        private EFieldMappingTypes m_MappingTypeField;
        
        private string m_MappingValueField;
        
        /// <remarks/>
        public string m_PlanFieldName {
            get {
                return this.m_PlanFieldNameField;
            }
            set {
                this.m_PlanFieldNameField = value;
            }
        }
        
        /// <remarks/>
        public EFieldMappingTypes m_MappingType {
            get {
                return this.m_MappingTypeField;
            }
            set {
                this.m_MappingTypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_MappingValue {
            get {
                return this.m_MappingValueField;
            }
            set {
                this.m_MappingValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public enum EFieldMappingTypes {
        
        /// <remarks/>
        eDSField,
        
        /// <remarks/>
        eConstant,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class FieldMappings {
        
        private FieldMappingInfo[] m_mappingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public FieldMappingInfo[] m_mappings {
            get {
                return this.m_mappingsField;
            }
            set {
                this.m_mappingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class Property {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class URLInfo {
        
        private string m_ProxyServerField;
        
        private int m_ProxyPortField;
        
        private string m_BaseURLField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        public string m_ProxyServer {
            get {
                return this.m_ProxyServerField;
            }
            set {
                this.m_ProxyServerField = value;
            }
        }
        
        /// <remarks/>
        public int m_ProxyPort {
            get {
                return this.m_ProxyPortField;
            }
            set {
                this.m_ProxyPortField = value;
            }
        }
        
        /// <remarks/>
        public string m_BaseURL {
            get {
                return this.m_BaseURLField;
            }
            set {
                this.m_BaseURLField = value;
            }
        }
        
        /// <remarks/>
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailBodyOptions {
        
        private bool m_EmbedResourcesField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        public bool m_EmbedResources {
            get {
                return this.m_EmbedResourcesField;
            }
            set {
                this.m_EmbedResourcesField = value;
            }
        }
        
        /// <remarks/>
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailBodyInfo {
        
        private string m_ContentField;
        
        private string m_ContentTypeField;
        
        private string m_FormatField;
        
        private EmailBodyOptions m_BodyOptionsField;
        
        private URLInfo m_URLInfoField;
        
        /// <remarks/>
        public string m_Content {
            get {
                return this.m_ContentField;
            }
            set {
                this.m_ContentField = value;
            }
        }
        
        /// <remarks/>
        public string m_ContentType {
            get {
                return this.m_ContentTypeField;
            }
            set {
                this.m_ContentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_Format {
            get {
                return this.m_FormatField;
            }
            set {
                this.m_FormatField = value;
            }
        }
        
        /// <remarks/>
        public EmailBodyOptions m_BodyOptions {
            get {
                return this.m_BodyOptionsField;
            }
            set {
                this.m_BodyOptionsField = value;
            }
        }
        
        /// <remarks/>
        public URLInfo m_URLInfo {
            get {
                return this.m_URLInfoField;
            }
            set {
                this.m_URLInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailAddress {
        
        private string m_AddressField;
        
        private string m_DisplayField;
        
        /// <remarks/>
        public string m_Address {
            get {
                return this.m_AddressField;
            }
            set {
                this.m_AddressField = value;
            }
        }
        
        /// <remarks/>
        public string m_Display {
            get {
                return this.m_DisplayField;
            }
            set {
                this.m_DisplayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailHeaderInfo {
        
        private string m_SubjectField;
        
        private EmailAddress[] m_ToField;
        
        private EmailAddress[] m_CCField;
        
        private EmailAddress[] m_BCCField;
        
        private EmailAddress[] m_FromField;
        
        private EmailAddress[] m_ReplyToField;
        
        private string m_CharsetField;
        
        /// <remarks/>
        public string m_Subject {
            get {
                return this.m_SubjectField;
            }
            set {
                this.m_SubjectField = value;
            }
        }
        
        /// <remarks/>
        public EmailAddress[] m_To {
            get {
                return this.m_ToField;
            }
            set {
                this.m_ToField = value;
            }
        }
        
        /// <remarks/>
        public EmailAddress[] m_CC {
            get {
                return this.m_CCField;
            }
            set {
                this.m_CCField = value;
            }
        }
        
        /// <remarks/>
        public EmailAddress[] m_BCC {
            get {
                return this.m_BCCField;
            }
            set {
                this.m_BCCField = value;
            }
        }
        
        /// <remarks/>
        public EmailAddress[] m_From {
            get {
                return this.m_FromField;
            }
            set {
                this.m_FromField = value;
            }
        }
        
        /// <remarks/>
        public EmailAddress[] m_ReplyTo {
            get {
                return this.m_ReplyToField;
            }
            set {
                this.m_ReplyToField = value;
            }
        }
        
        /// <remarks/>
        public string m_Charset {
            get {
                return this.m_CharsetField;
            }
            set {
                this.m_CharsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailProviderParameter {
        
        private string m_NameField;
        
        private string m_ValueField;
        
        /// <remarks/>
        public string m_Name {
            get {
                return this.m_NameField;
            }
            set {
                this.m_NameField = value;
            }
        }
        
        /// <remarks/>
        public string m_Value {
            get {
                return this.m_ValueField;
            }
            set {
                this.m_ValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public partial class EmailProviderInfo {
        
        private string m_TypeField;
        
        private string m_AssemblyPathField;
        
        private string m_ClassNameField;
        
        private string m_ControlNameField;
        
        private EmailProviderParameter[] m_ParamsField;
        
        /// <remarks/>
        public string m_Type {
            get {
                return this.m_TypeField;
            }
            set {
                this.m_TypeField = value;
            }
        }
        
        /// <remarks/>
        public string m_AssemblyPath {
            get {
                return this.m_AssemblyPathField;
            }
            set {
                this.m_AssemblyPathField = value;
            }
        }
        
        /// <remarks/>
        public string m_ClassName {
            get {
                return this.m_ClassNameField;
            }
            set {
                this.m_ClassNameField = value;
            }
        }
        
        /// <remarks/>
        public string m_ControlName {
            get {
                return this.m_ControlNameField;
            }
            set {
                this.m_ControlNameField = value;
            }
        }
        
        /// <remarks/>
        public EmailProviderParameter[] m_Params {
            get {
                return this.m_ParamsField;
            }
            set {
                this.m_ParamsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="XMPieWSAPI")]
    public enum ERecipientIDListMergeType {
        
        /// <remarks/>
        eNoMerge,
        
        /// <remarks/>
        eIntersectWithCSVList,
        
        /// <remarks/>
        eSkipRecipientsCSVList,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFFPMExecutablePathCompletedEventHandler(object sender, GetFFPMExecutablePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFFPMExecutablePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFFPMExecutablePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFFPMQueueSpecsCompletedEventHandler(object sender, GetFFPMQueueSpecsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFFPMQueueSpecsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFFPMQueueSpecsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRemoteCopyCompletedEventHandler(object sender, AddRemoteCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRemoteCopyByIDCompletedEventHandler(object sender, AddRemoteCopyByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteCopyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteCopyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveRemoteCopyCompletedEventHandler(object sender, RemoveRemoteCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRemoteCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRemoteCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsRemoteCopyExistCompletedEventHandler(object sender, IsRemoteCopyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRemoteCopyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRemoteCopyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRemoteCopyIDCompletedEventHandler(object sender, GetRemoteCopyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteCopyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteCopyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRemoteCopyDestinationCompletedEventHandler(object sender, GetRemoteCopyDestinationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteCopyDestinationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteCopyDestinationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsRemoteCopyDeleteSourceCompletedEventHandler(object sender, IsRemoteCopyDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRemoteCopyDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRemoteCopyDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddSecondaryRemoteCopyCompletedEventHandler(object sender, AddSecondaryRemoteCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSecondaryRemoteCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSecondaryRemoteCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddSecondaryRemoteCopyByIDCompletedEventHandler(object sender, AddSecondaryRemoteCopyByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSecondaryRemoteCopyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSecondaryRemoteCopyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveSecondaryRemoteCopyCompletedEventHandler(object sender, RemoveSecondaryRemoteCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSecondaryRemoteCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSecondaryRemoteCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsSecondaryRemoteCopyExistCompletedEventHandler(object sender, IsSecondaryRemoteCopyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSecondaryRemoteCopyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSecondaryRemoteCopyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSecondaryRemoteCopyIDCompletedEventHandler(object sender, GetSecondaryRemoteCopyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecondaryRemoteCopyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecondaryRemoteCopyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSecondaryRemoteCopyDestinationCompletedEventHandler(object sender, GetSecondaryRemoteCopyDestinationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecondaryRemoteCopyDestinationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecondaryRemoteCopyDestinationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsSecondaryRemoteCopyDeleteSourceCompletedEventHandler(object sender, IsSecondaryRemoteCopyDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSecondaryRemoteCopyDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSecondaryRemoteCopyDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddJDFCopyCompletedEventHandler(object sender, AddJDFCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddJDFCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddJDFCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddJDFCopyByIDCompletedEventHandler(object sender, AddJDFCopyByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddJDFCopyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddJDFCopyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJDFCopyCompletedEventHandler(object sender, RemoveJDFCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJDFCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJDFCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsJDFCopyExistCompletedEventHandler(object sender, IsJDFCopyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsJDFCopyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsJDFCopyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJDFCopyIDCompletedEventHandler(object sender, GetJDFCopyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJDFCopyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJDFCopyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJDFCopyDestinationCompletedEventHandler(object sender, GetJDFCopyDestinationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJDFCopyDestinationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJDFCopyDestinationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsJDFCopyDeleteSourceCompletedEventHandler(object sender, IsJDFCopyDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsJDFCopyDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsJDFCopyDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDistillJobOptionNameCompletedEventHandler(object sender, SetDistillJobOptionNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDistillJobOptionNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDistillJobOptionNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsJobTrackedCompletedEventHandler(object sender, IsJobTrackedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsJobTrackedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsJobTrackedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTouchPointIDCompletedEventHandler(object sender, SetTouchPointIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTouchPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTouchPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTouchPointIDCompletedEventHandler(object sender, GetTouchPointIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTouchPointIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTouchPointIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTrackingCompletedEventHandler(object sender, AddTrackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveTrackingCompletedEventHandler(object sender, RemoveTrackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTrackingParameterCompletedEventHandler(object sender, SetTrackingParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTrackingParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTrackingParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTrackingParametersCompletedEventHandler(object sender, SetTrackingParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTrackingParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTrackingParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTrackingParameterCompletedEventHandler(object sender, GetTrackingParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackingParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackingParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTrackingParametersCompletedEventHandler(object sender, GetTrackingParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackingParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackingParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveTrackingParameterCompletedEventHandler(object sender, RemoveTrackingParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTrackingParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTrackingParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveTrackingParametersCompletedEventHandler(object sender, RemoveTrackingParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTrackingParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTrackingParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllTrackingParametersCompletedEventHandler(object sender, RemoveAllTrackingParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllTrackingParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllTrackingParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsTrackingADORCompletedEventHandler(object sender, IsTrackingADORCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTrackingADORCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTrackingADORCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTrackingADORsCompletedEventHandler(object sender, GetTrackingADORsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackingADORsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackingADORsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetCircleTouchpointGuidCompletedEventHandler(object sender, SetCircleTouchpointGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCircleTouchpointGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCircleTouchpointGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCircleTouchpointGuidCompletedEventHandler(object sender, GetCircleTouchpointGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCircleTouchpointGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCircleTouchpointGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetCircleRunGuidCompletedEventHandler(object sender, SetCircleRunGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCircleRunGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCircleRunGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCircleRunGuidCompletedEventHandler(object sender, GetCircleRunGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCircleRunGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCircleRunGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDeliveryProviderCompletedEventHandler(object sender, SetDeliveryProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDeliveryProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDeliveryProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDeliveryProviderByIDCompletedEventHandler(object sender, SetDeliveryProviderByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDeliveryProviderByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDeliveryProviderByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDeliveryProviderCompletedEventHandler(object sender, GetDeliveryProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeliveryProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeliveryProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailProviderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailProviderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDeliveryProviderIDCompletedEventHandler(object sender, GetDeliveryProviderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeliveryProviderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeliveryProviderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailHeaderCompletedEventHandler(object sender, SetEmailHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmailHeaderCompletedEventHandler(object sender, GetEmailHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailHeaderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailHeaderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailBodyCompletedEventHandler(object sender, SetEmailBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailBodiesCompletedEventHandler(object sender, SetEmailBodiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailBodiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailBodiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddEmailBodyCompletedEventHandler(object sender, AddEmailBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailBodyByIDCompletedEventHandler(object sender, SetEmailBodyByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailBodyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailBodyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailBodiesByIDsCompletedEventHandler(object sender, SetEmailBodiesByIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailBodiesByIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailBodiesByIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddEmailBodyByIDCompletedEventHandler(object sender, AddEmailBodyByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailBodyByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailBodyByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllEmailBodiesCompletedEventHandler(object sender, RemoveAllEmailBodiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllEmailBodiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllEmailBodiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmailBodiesCompletedEventHandler(object sender, GetEmailBodiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailBodiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailBodiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailBodyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailBodyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmailBodiesIDsCompletedEventHandler(object sender, GetEmailBodiesIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailBodiesIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailBodiesIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmailBodyCountCompletedEventHandler(object sender, GetEmailBodyCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailBodyCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailBodyCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthEmailBodyCompletedEventHandler(object sender, GetNthEmailBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthEmailBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthEmailBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailBodyInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailBodyInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthEmailBodyIDCompletedEventHandler(object sender, GetNthEmailBodyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthEmailBodyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthEmailBodyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetMetaDataCompletedEventHandler(object sender, SetMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetMetaDataCompletedEventHandler(object sender, GetMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAllMetaDataCompletedEventHandler(object sender, GetAllMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetMetaDataSubGroupsCompletedEventHandler(object sender, GetMetaDataSubGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetaDataSubGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetaDataSubGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveMetaDataCompletedEventHandler(object sender, RemoveMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveMetaDataGroupCompletedEventHandler(object sender, RemoveMetaDataGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveMetaDataGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveMetaDataGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsMappingExistsCompletedEventHandler(object sender, IsMappingExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMappingExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMappingExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFieldMappingsCompletedEventHandler(object sender, GetFieldMappingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FieldMappings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FieldMappings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetFieldMappingCompletedEventHandler(object sender, SetFieldMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFieldMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFieldMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetFieldMappingByIDCompletedEventHandler(object sender, SetFieldMappingByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFieldMappingByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFieldMappingByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveFieldMappingCompletedEventHandler(object sender, RemoveFieldMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFieldMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFieldMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthRIInfoCompletedEventHandler(object sender, GetNthRIInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthRIInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthRIInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecipientsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecipientsInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthRIDataSourceIDCompletedEventHandler(object sender, GetNthRIDataSourceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthRIDataSourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthRIDataSourceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthRIDataSourceCompletedEventHandler(object sender, GetNthRIDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthRIDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthRIDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Connection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Connection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRICompletedEventHandler(object sender, AddRICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRIByIDCompletedEventHandler(object sender, AddRIByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRIByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRIByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddDefaultRICompletedEventHandler(object sender, AddDefaultRICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDefaultRICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDefaultRICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIOnDemandInfoCompletedEventHandler(object sender, SetRIOnDemandInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIOnDemandInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIOnDemandInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRIOnDemandRecipientIDCompletedEventHandler(object sender, GetRIOnDemandRecipientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIOnDemandRecipientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIOnDemandRecipientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRIOnDemandRecipientInfoCompletedEventHandler(object sender, GetRIOnDemandRecipientInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIOnDemandRecipientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIOnDemandRecipientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobTypeCompletedEventHandler(object sender, SetJobTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobTypeCompletedEventHandler(object sender, GetJobTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobPriorityCompletedEventHandler(object sender, GetJobPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobPriorityCompletedEventHandler(object sender, SetJobPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobTrackingWebServiceCompletedEventHandler(object sender, SetJobTrackingWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobTrackingWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobTrackingWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobTrackingWebServiceCompletedEventHandler(object sender, GetJobTrackingWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobTrackingWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobTrackingWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobReportingWebServiceCompletedEventHandler(object sender, SetJobReportingWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobReportingWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobReportingWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobReportingWebServiceCompletedEventHandler(object sender, GetJobReportingWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobReportingWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobReportingWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetSplittedJobInfoCompletedEventHandler(object sender, SetSplittedJobInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSplittedJobInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSplittedJobInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsSplittedJobCompletedEventHandler(object sender, IsSplittedJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSplittedJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSplittedJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsParallelProcessingJobCompletedEventHandler(object sender, IsParallelProcessingJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsParallelProcessingJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsParallelProcessingJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAutomaticSubSplitAndMergeCompletedEventHandler(object sender, SetAutomaticSubSplitAndMergeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAutomaticSubSplitAndMergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAutomaticSubSplitAndMergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsAutomaticSubSplitEnabledCompletedEventHandler(object sender, IsAutomaticSubSplitEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAutomaticSubSplitEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAutomaticSubSplitEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsAutomaticMergeEnabledCompletedEventHandler(object sender, IsAutomaticMergeEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAutomaticMergeEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAutomaticMergeEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsSubJobCompletedEventHandler(object sender, IsSubJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSubJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSubJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobInfoCompletedEventHandler(object sender, GetSubJobInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubJobInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubJobInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobIndexCompletedEventHandler(object sender, GetSubJobIndexCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobIndexCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobIndexCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobOrigFromCompletedEventHandler(object sender, GetSubJobOrigFromCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobOrigFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobOrigFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobOrigToCompletedEventHandler(object sender, GetSubJobOrigToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobOrigToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobOrigToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobSplitCountCompletedEventHandler(object sender, GetSubJobSplitCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobSplitCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobSplitCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubJobSplitTypeCompletedEventHandler(object sender, GetSubJobSplitTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubJobSplitTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubJobSplitTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobParameterCompletedEventHandler(object sender, SetJobParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJobParametersCompletedEventHandler(object sender, SetJobParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJobParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJobParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobParameterCompletedEventHandler(object sender, GetJobParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJobParametersCompletedEventHandler(object sender, GetJobParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJobParameterCompletedEventHandler(object sender, RemoveJobParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJobParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJobParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJobParametersCompletedEventHandler(object sender, RemoveJobParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJobParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJobParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllJobParametersCompletedEventHandler(object sender, RemoveAllJobParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllJobParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllJobParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailInfoCompletedEventHandler(object sender, SetEmailInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmailAdorNameCompletedEventHandler(object sender, SetEmailAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmailAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmailAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetSenderAdorNameCompletedEventHandler(object sender, SetSenderAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSenderAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSenderAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetSubjectAdorNameCompletedEventHandler(object sender, SetSubjectAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSubjectAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSubjectAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEmbedEmailBodyCompletedEventHandler(object sender, SetEmbedEmailBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmbedEmailBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmbedEmailBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetProcessEmailOutputTypeCompletedEventHandler(object sender, SetProcessEmailOutputTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetProcessEmailOutputTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetProcessEmailOutputTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOnDemandBaseURLCompletedEventHandler(object sender, SetOnDemandBaseURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOnDemandBaseURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOnDemandBaseURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmailAdorNameCompletedEventHandler(object sender, GetEmailAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSenderAdorNameCompletedEventHandler(object sender, GetSenderAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSenderAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSenderAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSubjectAdorNameCompletedEventHandler(object sender, GetSubjectAdorNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubjectAdorNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubjectAdorNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEmbedEmailBodyCompletedEventHandler(object sender, GetEmbedEmailBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmbedEmailBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmbedEmailBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetProcessEmailOutputTypeCompletedEventHandler(object sender, GetProcessEmailOutputTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessEmailOutputTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessEmailOutputTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOnDemandBaseURLCompletedEventHandler(object sender, GetOnDemandBaseURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnDemandBaseURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnDemandBaseURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputFileNameOptionCompletedEventHandler(object sender, GetOutputFileNameOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputFileNameOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputFileNameOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputInfoCompletedEventHandler(object sender, SetOutputInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputParameterCompletedEventHandler(object sender, SetOutputParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputParametersCompletedEventHandler(object sender, SetOutputParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputParameterCompletedEventHandler(object sender, GetOutputParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputParametersCompletedEventHandler(object sender, GetOutputParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveOutputParameterCompletedEventHandler(object sender, RemoveOutputParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveOutputParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveOutputParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveOutputParametersCompletedEventHandler(object sender, RemoveOutputParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveOutputParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveOutputParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllOutputParametersCompletedEventHandler(object sender, RemoveAllOutputParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllOutputParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllOutputParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAppendJobIDCompletedEventHandler(object sender, SetAppendJobIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAppendJobIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAppendJobIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetEnvJobNameCompletedEventHandler(object sender, SetEnvJobNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEnvJobNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEnvJobNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputMediaCompletedEventHandler(object sender, SetOutputMediaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputMediaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputMediaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputTypeCompletedEventHandler(object sender, SetOutputTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputFolderCompletedEventHandler(object sender, SetOutputFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOutputFileNameCompletedEventHandler(object sender, SetOutputFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOutputFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOutputFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAppendJobIDCompletedEventHandler(object sender, GetAppendJobIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppendJobIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppendJobIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDefaultCacheEnvCompletedEventHandler(object sender, GetDefaultCacheEnvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultCacheEnvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultCacheEnvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetEnvJobNameCompletedEventHandler(object sender, GetEnvJobNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnvJobNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnvJobNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputMediaCompletedEventHandler(object sender, GetOutputMediaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputMediaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputMediaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputTypeCompletedEventHandler(object sender, GetOutputTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputFolderCompletedEventHandler(object sender, GetOutputFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetOutputFileNameCompletedEventHandler(object sender, GetOutputFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutputFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutputFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddImpositionCompletedEventHandler(object sender, AddImpositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImpositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddImpositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveImpositionCompletedEventHandler(object sender, RemoveImpositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveImpositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveImpositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsImpositionExistCompletedEventHandler(object sender, IsImpositionExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsImpositionExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsImpositionExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetImpositionParameterCompletedEventHandler(object sender, SetImpositionParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetImpositionParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetImpositionParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetImpositionParametersCompletedEventHandler(object sender, SetImpositionParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetImpositionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetImpositionParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetImpositionParameterCompletedEventHandler(object sender, GetImpositionParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImpositionParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImpositionParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetImpositionParametersCompletedEventHandler(object sender, GetImpositionParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImpositionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImpositionParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveImpositionParameterCompletedEventHandler(object sender, RemoveImpositionParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveImpositionParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveImpositionParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveImpositionParametersCompletedEventHandler(object sender, RemoveImpositionParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveImpositionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveImpositionParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllImpositionParametersCompletedEventHandler(object sender, RemoveAllImpositionParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllImpositionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllImpositionParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddJDFCompletedEventHandler(object sender, AddJDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddJDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddJDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJDFCompletedEventHandler(object sender, RemoveJDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsJDFExistCompletedEventHandler(object sender, IsJDFExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsJDFExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsJDFExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJDFParameterCompletedEventHandler(object sender, SetJDFParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJDFParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJDFParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetJDFParametersCompletedEventHandler(object sender, SetJDFParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetJDFParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetJDFParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJDFParameterCompletedEventHandler(object sender, GetJDFParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJDFParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJDFParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetJDFParametersCompletedEventHandler(object sender, GetJDFParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJDFParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJDFParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Parameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Parameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJDFParameterCompletedEventHandler(object sender, RemoveJDFParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJDFParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJDFParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveJDFParametersCompletedEventHandler(object sender, RemoveJDFParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveJDFParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveJDFParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllJDFParametersCompletedEventHandler(object sender, RemoveAllJDFParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllJDFParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllJDFParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddCompressionCompletedEventHandler(object sender, AddCompressionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompressionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCompressionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveCompressionCompletedEventHandler(object sender, RemoveCompressionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCompressionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCompressionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsCompressionExistCompletedEventHandler(object sender, IsCompressionExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCompressionExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCompressionExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsVPCCompressionCompletedEventHandler(object sender, IsVPCCompressionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsVPCCompressionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsVPCCompressionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddDestinationByIDCompletedEventHandler(object sender, AddDestinationByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDestinationByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDestinationByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddFTPCompletedEventHandler(object sender, AddFTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddFTPByIDCompletedEventHandler(object sender, AddFTPByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFTPByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFTPByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveFTPCompletedEventHandler(object sender, RemoveFTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFTPExistCompletedEventHandler(object sender, IsFTPExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFTPExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFTPExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPIDCompletedEventHandler(object sender, GetFTPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPAddressCompletedEventHandler(object sender, GetFTPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPPortCompletedEventHandler(object sender, GetFTPPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPUserCompletedEventHandler(object sender, GetFTPUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPPasswordCompletedEventHandler(object sender, GetFTPPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFTPPassiveCompletedEventHandler(object sender, GetFTPPassiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPPassiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPPassiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFTPDeleteSourceCompletedEventHandler(object sender, IsFTPDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFTPDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFTPDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddUMailCompletedEventHandler(object sender, AddUMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveUMailCompletedEventHandler(object sender, RemoveUMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsUMailExistCompletedEventHandler(object sender, IsUMailExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUMailExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUMailExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUMailTemplateCompletedEventHandler(object sender, GetUMailTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUMailTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUMailTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUMailOrigZipCompletedEventHandler(object sender, GetUMailOrigZipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUMailOrigZipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUMailOrigZipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUMailPCWTCompletedEventHandler(object sender, GetUMailPCWTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUMailPCWTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUMailPCWTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUMailPCThickCompletedEventHandler(object sender, GetUMailPCThickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUMailPCThickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUMailPCThickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddPrintCompletedEventHandler(object sender, AddPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddPrintByIDCompletedEventHandler(object sender, AddPrintByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPrintByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPrintByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemovePrintCompletedEventHandler(object sender, RemovePrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsPrintExistCompletedEventHandler(object sender, IsPrintExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPrintExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPrintExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPrintIDCompletedEventHandler(object sender, GetPrintIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrintIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrintIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPrinterCompletedEventHandler(object sender, GetPrinterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrinterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrinterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsPrinterDeleteSourceCompletedEventHandler(object sender, IsPrinterDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPrinterDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPrinterDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddFFPMCompletedEventHandler(object sender, AddFFPMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFFPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFFPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddFFPMByIDCompletedEventHandler(object sender, AddFFPMByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFFPMByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFFPMByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveFFPMCompletedEventHandler(object sender, RemoveFFPMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFFPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFFPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFFPMExistCompletedEventHandler(object sender, IsFFPMExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFFPMExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFFPMExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFFPMIDCompletedEventHandler(object sender, GetFFPMIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFFPMIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFFPMIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFFPMDeleteSourceCompletedEventHandler(object sender, IsFFPMDeleteSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFFPMDeleteSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFFPMDeleteSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateNewTicketCompletedEventHandler(object sender, CreateNewTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateNewTicketForDocumentCompletedEventHandler(object sender, CreateNewTicketForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTicketForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewTicketForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateNewTicketForPlanCompletedEventHandler(object sender, CreateNewTicketForPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTicketForPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewTicketForPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateNewTicketForCampaignCompletedEventHandler(object sender, CreateNewTicketForCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTicketForCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewTicketForCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RecycleTicketIDCompletedEventHandler(object sender, RecycleTicketIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecycleTicketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecycleTicketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTicketFromFileCompletedEventHandler(object sender, LoadTicketFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTicketFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTicketFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadJobTicketCompletedEventHandler(object sender, LoadJobTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadJobTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadJobTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadLastJobTicketOfDocumentCompletedEventHandler(object sender, LoadLastJobTicketOfDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadLastJobTicketOfDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadLastJobTicketOfDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadLastJobTicketOfPlanCompletedEventHandler(object sender, LoadLastJobTicketOfPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadLastJobTicketOfPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadLastJobTicketOfPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTicketFromTicketCompletedEventHandler(object sender, LoadTicketFromTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTicketFromTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTicketFromTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTicketPropertyFromDBCompletedEventHandler(object sender, GetTicketPropertyFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketPropertyFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketPropertyFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTicketFromDBCompletedEventHandler(object sender, LoadTicketFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTicketFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTicketFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveTicketToFileCompletedEventHandler(object sender, SaveTicketToFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTicketToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTicketToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveNewTicketToDBCompletedEventHandler(object sender, SaveNewTicketToDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewTicketToDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewTicketToDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void OverwriteTicketInDBCompletedEventHandler(object sender, OverwriteTicketInDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OverwriteTicketInDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OverwriteTicketInDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteTicketFromDBCompletedEventHandler(object sender, DeleteTicketFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTicketFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTicketFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTicketsFromDBCompletedEventHandler(object sender, GetTicketsFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTemplatesFromDBCompletedEventHandler(object sender, GetTemplatesFromDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplatesFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplatesFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTicketCompletedEventHandler(object sender, GetTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTicketAndRecycleIDCompletedEventHandler(object sender, GetTicketAndRecycleIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketAndRecycleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketAndRecycleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTicketDefaultsForDocumentCompletedEventHandler(object sender, SetTicketDefaultsForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTicketDefaultsForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTicketDefaultsForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTicketDefaultsForPlanCompletedEventHandler(object sender, SetTicketDefaultsForPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTicketDefaultsForPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTicketDefaultsForPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetTicketDefaultsForCampaignCompletedEventHandler(object sender, SetTicketDefaultsForCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTicketDefaultsForCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTicketDefaultsForCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetPlanCompletedEventHandler(object sender, SetPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetPlanByIDCompletedEventHandler(object sender, SetPlanByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPlanByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPlanByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUseTrivialPlanCompletedEventHandler(object sender, GetUseTrivialPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUseTrivialPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUseTrivialPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetUseTrivialPlanCompletedEventHandler(object sender, SetUseTrivialPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUseTrivialPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUseTrivialPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPlanPathCompletedEventHandler(object sender, GetPlanPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlanPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlanPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPlanIDCompletedEventHandler(object sender, GetPlanIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlanIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlanIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetCustomizationCompletedEventHandler(object sender, SetCustomizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCustomizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCustomizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetCustomizationsCompletedEventHandler(object sender, SetCustomizationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCustomizationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCustomizationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveCustomizationCompletedEventHandler(object sender, RemoveCustomizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCustomizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCustomizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllCustomizationsCompletedEventHandler(object sender, RemoveAllCustomizationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllCustomizationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllCustomizationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCustomizationsCountCompletedEventHandler(object sender, GetCustomizationsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomizationsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomizationsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthCustomizationCompletedEventHandler(object sender, GetNthCustomizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthCustomizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthCustomizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Customization Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Customization)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCustomizationsCompletedEventHandler(object sender, GetCustomizationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomizationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomizationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Customization[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Customization[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDocumentByIDCompletedEventHandler(object sender, SetDocumentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDocumentCompletedEventHandler(object sender, SetDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentIDCompletedEventHandler(object sender, GetDocumentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentFolderCompletedEventHandler(object sender, GetDocumentFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentNameCompletedEventHandler(object sender, GetDocumentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentTypeCompletedEventHandler(object sender, GetDocumentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetWebResourcesBasePathCompletedEventHandler(object sender, SetWebResourcesBasePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWebResourcesBasePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWebResourcesBasePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetWebResourcesBasePathCompletedEventHandler(object sender, GetWebResourcesBasePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebResourcesBasePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebResourcesBasePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAllowFriendlyCompletedEventHandler(object sender, SetAllowFriendlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAllowFriendlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAllowFriendlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAllowFriendlyCompletedEventHandler(object sender, GetAllowFriendlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllowFriendlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllowFriendlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetFriendlinessCompletedEventHandler(object sender, SetFriendlinessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFriendlinessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFriendlinessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFriendlyDomainCompletedEventHandler(object sender, GetFriendlyDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendlyDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendlyDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFriendlyFolderCompletedEventHandler(object sender, GetFriendlyFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendlyFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendlyFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFriendlyLandingPageCompletedEventHandler(object sender, GetFriendlyLandingPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFriendlyLandingPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFriendlyLandingPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFriendlyUrlRedirectModeCompletedEventHandler(object sender, IsFriendlyUrlRedirectModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFriendlyUrlRedirectModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFriendlyUrlRedirectModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsFriendlyUrlUseRIDPrefixModeCompletedEventHandler(object sender, IsFriendlyUrlUseRIDPrefixModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFriendlyUrlUseRIDPrefixModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFriendlyUrlUseRIDPrefixModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetCampaignIDCompletedEventHandler(object sender, SetCampaignIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCampaignIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCampaignIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetCampaignIDCompletedEventHandler(object sender, GetCampaignIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCampaignIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCampaignIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetFontsCompletedEventHandler(object sender, SetFontsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFontsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFontsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetFontsByIDCompletedEventHandler(object sender, SetFontsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFontsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFontsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetFontsFolderCompletedEventHandler(object sender, GetFontsFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFontsFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFontsFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetPortLinkCompletedEventHandler(object sender, SetPortLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPortLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPortLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RefreshPortLinkCompletedEventHandler(object sender, RefreshPortLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshPortLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshPortLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemovePortLinkCompletedEventHandler(object sender, RemovePortLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePortLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePortLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void IsPortLinkExistCompletedEventHandler(object sender, IsPortLinkExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPortLinkExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPortLinkExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPortLinkAccountCompletedEventHandler(object sender, GetPortLinkAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortLinkAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortLinkAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPortLinkCampaignCompletedEventHandler(object sender, GetPortLinkCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortLinkCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortLinkCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPortLinkPortNameCompletedEventHandler(object sender, GetPortLinkPortNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortLinkPortNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortLinkPortNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDataSourceCompletedEventHandler(object sender, SetDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDataSourcesCompletedEventHandler(object sender, SetDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDataSourceByIDCompletedEventHandler(object sender, SetDataSourceByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataSourceByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataSourceByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDataSourcesByIDCompletedEventHandler(object sender, SetDataSourcesByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataSourcesByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataSourcesByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDefaultDataSourcesCompletedEventHandler(object sender, SetDefaultDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllSchemaDataSourcesCompletedEventHandler(object sender, RemoveAllSchemaDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllSchemaDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllSchemaDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveSchemaDataSourceCompletedEventHandler(object sender, RemoveSchemaDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSchemaDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSchemaDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemaDataSourceCompletedEventHandler(object sender, GetSchemaDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Connection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Connection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemaDataSourceIDCompletedEventHandler(object sender, GetSchemaDataSourceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaDataSourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaDataSourceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemasNamesCompletedEventHandler(object sender, GetSchemasNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemasNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemasNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemasDataSourcesCompletedEventHandler(object sender, GetSchemasDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemasDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemasDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Connection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Connection[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemaDataSourceIDsCompletedEventHandler(object sender, GetSchemaDataSourceIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaDataSourceIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaDataSourceIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSchemaDataSourcesCountCompletedEventHandler(object sender, GetSchemaDataSourcesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaDataSourcesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaDataSourcesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthSchemaNameCompletedEventHandler(object sender, GetNthSchemaNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthSchemaNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthSchemaNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthSchemaDataSourceIDCompletedEventHandler(object sender, GetNthSchemaDataSourceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthSchemaDataSourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthSchemaDataSourceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthSchemaDataSourceCompletedEventHandler(object sender, GetNthSchemaDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthSchemaDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthSchemaDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Connection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Connection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetResolveAssetsCompletedEventHandler(object sender, SetResolveAssetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetResolveAssetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetResolveAssetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetResolveAssetsCompletedEventHandler(object sender, GetResolveAssetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResolveAssetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResolveAssetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetConnectivityAssetsCompletedEventHandler(object sender, SetConnectivityAssetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetConnectivityAssetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetConnectivityAssetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetConnectivityAssetsCompletedEventHandler(object sender, GetConnectivityAssetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConnectivityAssetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConnectivityAssetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetsPrefixCompletedEventHandler(object sender, SetAssetsPrefixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetsPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetsPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetsPrefixTypeCompletedEventHandler(object sender, GetAssetsPrefixTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetsPrefixTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetsPrefixTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetsFixedPrefixCompletedEventHandler(object sender, GetAssetsFixedPrefixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetsFixedPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetsFixedPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourceCompletedEventHandler(object sender, SetAssetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourceExCompletedEventHandler(object sender, SetAssetSourceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourcesCompletedEventHandler(object sender, SetAssetSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourcesExCompletedEventHandler(object sender, SetAssetSourcesExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourcesExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourcesExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourceByIDCompletedEventHandler(object sender, SetAssetSourceByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourceByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourceByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetAssetSourcesByIDCompletedEventHandler(object sender, SetAssetSourcesByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssetSourcesByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssetSourcesByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDefaultAssetSourcesCompletedEventHandler(object sender, SetDefaultAssetSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultAssetSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultAssetSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllAssetSourcesCompletedEventHandler(object sender, RemoveAllAssetSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllAssetSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllAssetSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAssetSourceCompletedEventHandler(object sender, RemoveAssetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAssetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAssetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourceCompletedEventHandler(object sender, GetAssetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceStruct)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourceExCompletedEventHandler(object sender, GetAssetSourceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourceIDCompletedEventHandler(object sender, GetAssetSourceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcePriorityCompletedEventHandler(object sender, GetAssetSourcePriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcePriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcePriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcesNamesCompletedEventHandler(object sender, GetAssetSourcesNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcesNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcesNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcesCompletedEventHandler(object sender, GetAssetSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcesExCompletedEventHandler(object sender, GetAssetSourcesExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcesExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcesExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcesIDsCompletedEventHandler(object sender, GetAssetSourcesIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcesIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcesIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAssetSourcesCountCompletedEventHandler(object sender, GetAssetSourcesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssetSourcesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssetSourcesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthAssetSourceNameCompletedEventHandler(object sender, GetNthAssetSourceNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthAssetSourceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthAssetSourceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthAssetSourceCompletedEventHandler(object sender, GetNthAssetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthAssetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthAssetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceStruct)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthAssetSourceExCompletedEventHandler(object sender, GetNthAssetSourceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthAssetSourceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthAssetSourceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssetSourceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssetSourceInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthAssetSourceIDCompletedEventHandler(object sender, GetNthAssetSourceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthAssetSourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthAssetSourceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthAssetSourcePriorityCompletedEventHandler(object sender, GetNthAssetSourcePriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthAssetSourcePriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthAssetSourcePriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPopulationGUIDCompletedEventHandler(object sender, GetPopulationGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPopulationGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPopulationGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIRangeCompletedEventHandler(object sender, SetRIRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRICompletedEventHandler(object sender, SetRICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIsCompletedEventHandler(object sender, SetRIsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIByIDCompletedEventHandler(object sender, SetRIByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIByPopulationGUIDCompletedEventHandler(object sender, SetRIByPopulationGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIByPopulationGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIByPopulationGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetInfoByRunGUIDCompletedEventHandler(object sender, SetInfoByRunGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetInfoByRunGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetInfoByRunGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRIsByIDCompletedEventHandler(object sender, SetRIsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRIsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRIsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetDefaultRICompletedEventHandler(object sender, SetDefaultRICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultRICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultRICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveAllRIsCompletedEventHandler(object sender, RemoveAllRIsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAllRIsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAllRIsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRIsCountCompletedEventHandler(object sender, GetRIsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRIFromCompletedEventHandler(object sender, GetRIFromCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetRIToCompletedEventHandler(object sender, GetRIToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRIToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRIToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthRIRecipientIDListFileNameCompletedEventHandler(object sender, GetNthRIRecipientIDListFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthRIRecipientIDListFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthRIRecipientIDListFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNthRIRecipientIDListMergeTypeCompletedEventHandler(object sender, GetNthRIRecipientIDListMergeTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNthRIRecipientIDListMergeTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNthRIRecipientIDListMergeTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ERecipientIDListMergeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ERecipientIDListMergeType)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591